!function(){"use strict";function e(e,t){e.$on("$stateChangeError",t.stateChangeError)}angular.module("app",["ui.router","ui.bootstrap","angularMoment"]).controller("AppController",e),e.$inject=["$rootScope","appService"]}(),function(){"use strict";function e(e,t){function n(e){return e.cacheAll()}function r(e){return e.getUser()}function a(e){return e.isAuthenticated()}e.state("root",{url:"",templateUrl:"index.html","abstract":!0,resolve:{cache:["cacheService",n],user:["headerService",r]},views:{header:{templateUrl:"pages/layout/header/header.html",controller:"HeaderController",controllerAs:"hc"},sidebar:{templateUrl:"pages/layout/sidebar/sidebar.html",controller:"SidebarController",controllerAs:"sc"}}}).state("login",{url:"/login",parent:"root",views:{"content@":{templateUrl:"pages/login/login.html",controller:"LoginController",controllerAs:"vm"}}}).state("logout",{url:"/logout",parent:"root",views:{"content@":{templateUrl:"modules/logout/logout.html",controller:"LogoutController",controllerAs:"vm"}}}).state("register",{url:"/register",parent:"root",views:{"content@":{templateUrl:"pages/register/register.html",controller:"RegisterController",controllerAs:"vm"}}}).state("dashboard",{url:"/dashboard",parent:"root",views:{"content@":{templateUrl:"pages/dashboard/dashboard.html",resolve:{isAuthenticated:["accessService",a]}}}}).state("labels",{url:"/labels",parent:"root"}).state("labels.label",{url:"/:labelId",views:{"content@":{templateUrl:"pages/tasks/label.html",controller:"LabelPageController",controllerAs:"vm"}}}).state("inbox",{url:"/inbox",parent:"root",views:{"content@":{templateUrl:"pages/tasks/inbox.html",resolve:{isAuthenticated:["accessService",a]}}}}).state("today",{url:"/today",parent:"root",views:{"content@":{templateUrl:"pages/tasks/today.html",resolve:{isAuthenticated:["accessService",a]}}}}).state("week",{url:"/week",parent:"root",views:{"content@":{templateUrl:"pages/tasks/week.html",resolve:{isAuthenticated:["accessService",a]}}}}).state("calendar",{url:"/calendar",parent:"root",views:{"content@":{templateUrl:"pages/calendar/calendar.html",resolve:{isAuthenticated:["accessService",a]}}}}),t.otherwise("/dashboard")}angular.module("app").config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function e(e,t){function n(n,r,a,o){o===t.UNAUTHORIZED?e.path("/login"):o===t.FORBIDDEN&&e.path("/forbidden")}return{stateChangeError:n}}angular.module("app").factory("appService",e),e.$inject=["$location","statusService"]}(),function(){"use strict";function e(){return function(e,t){if(!t)return e;for(var n=[],r=0;r<e.length;r++)(e[r].label_id===t||e[r].calendar_id===t)&&n.push(e[r]);return n}}angular.module("app").filter("inGroups",e),e.$inject=[]}(),function(){"use strict";function e(e){return function(t,n){for(var r=[],a=0;a<t.length;a++){var o=n.isSame(e(t[a].dt_start),"day");o||(o=n.isSame(e(t[a].dt_end),"day")),o&&r.push(t[a])}return r}}angular.module("app").filter("sameDayAs",e),e.$inject=["moment"]}(),function(){"use strict";function e(e){return function(t,n){if(!n)return t;for(var r=[],a=0;a<t.length;a++){(!t[a].due||t[a].due&&e(t[a].due).isBefore(e().add(n,"days")))&&r.push(t[a])}return r}}angular.module("app").filter("withinDays",e),e.$inject=["moment"]}(),function(){"use strict";function e(e,t){function n(){r(),a(),o(),c()}function r(){p.calendar=new t("calendar"),p.calendar.getByUser().then(function(t){p.calendars=s(t),e.$broadcast("updateCalendars")})}function a(){p.event=new t("event"),p.event.getByUser().then(function(t){p.events=s(t),e.$broadcast("updateEvents")})}function o(){p.label=new t("label"),p.label.getByUser().then(function(t){p.labels=s(t),e.$broadcast("updateLabels")})}function c(){p.task=new t("task"),p.task.getByUser().then(function(t){p.tasks=s(t),e.$broadcast("updateTasks")})}function s(e){var t=e.data;return t.success?t.data:t.title}function u(){return{calendars:l(),events:i(),labels:d(),tasks:f()}}function l(){return p.calendars}function i(){return p.events}function d(){return p.labels}function f(){return p.tasks}var p=this;return p.calendars=[],p.events=[],p.labels=[],p.tasks=[],{cacheAll:n,cacheCalendars:r,cacheEvents:a,cacheLabels:o,cacheTasks:c,getAll:u,getCalendars:l,getEvents:i,getLabels:d,getTasks:f}}angular.module("app").service("cacheService",e),e.$inject=["$rootScope","crudService"]}(),function(){"use strict";function e(e,t){function n(e){switch(this.type=e,this.base="api/",e){case"event":case"calendar":this.base+="activity/calendar/";break;case"label":case"task":this.base+="activity/task/";break;default:this.base+=e+"/"}this.base+=e+"Manager.php"}function r(t){return e.get(this.base+"?id="+t).then(l)["catch"](i)}function a(){return e.get(this.base+"?byuser=true").then(l)["catch"](i)}function o(t){return t=this.removeUnecessaryKeys(t),e.post(this.base,t).then(l)["catch"](i)}function c(t,n){return n=this.removeUnecessaryKeys(n),e.put(this.base+"?id="+t,n).then(l)["catch"](i)}function s(t){return e["delete"](this.base+"?id="+t).then(l)["catch"](i)}function u(t){return e["delete"](this.base+"?usewhere=true&where="+escape(t)).then(l)["catch"](i)}function l(e){return e}function i(e){return t.error(e),{success:"false",title:"Error when querying server.",message:e}}function d(e){for(var t=["id","person_id",this.type+"_id","activity_info_id","parent_name"],n=0;n<t.length;n++)delete e[t[n]];return e}var f=n;return f.prototype={get:r,getByUser:a,create:o,update:c,remove:s,removeWhere:u,removeUnecessaryKeys:d},f}angular.module("app").factory("crudService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(e,t){function n(t){return e.get(c.base+t).then(a)["catch"](o)}function r(t,n){return e.post(c.base+t,n).then(a)["catch"](o)}function a(e){return e}function o(e){return t.error(e),{success:"false",title:"Error when accessing variable.",message:e}}var c=this;return c.base="api/session/sessionVarManager.php?var=",{getVar:n,setVar:r}}angular.module("app").factory("sessionService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(e,t,n,r,a,o){function c(){p(),v(),e.$on("updateCalendars",p),e.$on("updateEvents",v),h.today=n.getToday(),h.selectedDay=h.today,h.month=n.getMonth(h.today)}function s(e){return n.getEndOfDay(e)}function u(e){return n.isSameDay(e,h.selectedDay)}function l(e){h.selectedDay=e.fullDate}function i(e){o.openEventModal(e,h.calendars)}function d(){h.month=n.lastMonth(h.month)}function f(){h.month=n.nextMonth(h.month)}function p(){h.calendars=r.getCalendars()}function v(){h.events=a.getEvents()}var h=this;h.events=[],h.calendar=[],h.today=null,h.selectedDay=null,h.month=null,h.isSameDayAsSelected=u,h.getEndOfDay=s,h.selectDay=l,h.showEventModal=i,h.lastMonth=d,h.nextMonth=f,c()}angular.module("app").controller("EventsController",e),e.$inject=["$rootScope","moment","calendarWidgetService","calendarService","eventsService","eventModalService"]}(),function(){"use strict";function e(){return{templateUrl:"modules/events/events.html",controller:"EventsController",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("spEvents",e)}(),function(){"use strict";function e(e,t){function n(e){return u.event.create(e).then(s)}function r(e){return e.event_id?c(e.event_id,e):n(e)}function a(e){return u.event.remove(e).then(s)}function o(){return t.getEvents()}function c(e,t){return u.event.update(e,t).then(s)}function s(e){var n=e.data;return n.success?(t.cacheEvents(),n.data):n.title}var u=this;return u.event=new e("event"),{createEvent:n,createOrUpdateEvent:r,deleteEvent:a,getEvents:o,updateEvent:c}}angular.module("app").factory("eventsService",e),e.$inject=["crudService","cacheService"]}(),function(){"use strict";function e(){function e(e,t,n,r){t[0].focus()}return{restrict:"A",link:e}}angular.module("app").directive("spAutoFocus",e)}(),function(){"use strict";function e(){function e(e,t,n,r){function a(){s()}function o(t){return t===e.otherModel.$viewValue}function c(e,t){r.$validate()}var s=e.$watch("otherModel",c);r.$validators.spCompareTo=o,t.on("$destroy",a)}return{require:"ngModel",scope:{otherModel:"=spCompareTo"},link:e}}angular.module("app").directive("spCompareTo",e)}(),function(){"use strict";function e(e,t,n){function r(){e.dismiss("cancel")}function a(){e.close()}function o(t){e.close(t)}function c(t){e.dismiss(t)}var s=this;s.groups=t,s.item=n,s.cancel=r,s.close=a,s.confirm=o,s.remove=c}angular.module("app").controller("ModalController",e),e.$inject=["$uibModalInstance","groups","item"]}(),function(){"use strict";function e(e){function t(){n.item.recurrence&&e.openRecurrenceModal(n.item)}var n=this;n.showRecurrenceModal=t}angular.module("app").controller("RecurrenceController",e),e.$inject=["recurrenceModalService"]}(),function(){"use strict";function e(){return{templateUrl:"modules/recurrence/recurrence.html",controller:"RecurrenceController",controllerAs:"rc",bindToController:!0,scope:{item:"="}}}angular.module("app").directive("spRepeat",e)}(),function(){"use strict";function e(){function e(e){e.recurrence=!1}function t(e){}return{clearRecurrence:e,constructRecurrence:t}}angular.module("app").factory("recurrenceService",e)}(),function(){"use strict";function e(e,t,n,r){function a(){s(),u(),e.$on("updateLabels",s),e.$on("updateTasks",u)}function o(e){r.openTaskModal(e,l.labels)}function c(e){t.toggleCompleted(e)}function s(){l.labels=n.getLabels()}function u(){l.tasks=t.getTasks()}var l=this;l.labels=[],l.tasks=[],l.showTaskModal=o,l.toggleCompleted=c,a()}angular.module("app").controller("TasksController",e),e.$inject=["$rootScope","tasksService","labelService","taskModalService"]}(),function(){"use strict";function e(){return{templateUrl:"modules/tasks/tasks.html",controller:"TasksController",controllerAs:"vm",bindToController:!0,scope:{order:"=",days:"=withinDays",inLabels:"=inGroups"}}}angular.module("app").directive("spTasks",e)}(),function(){"use strict";function e(e,t){function n(e){return l.task.create(e).then(u)}function r(e){return e.task_id?s(e.task_id,e):n(e)}function a(e){return l.task.remove(e).then(u)}function o(){return t.getTasks()}function c(e){return e.completed=!parseInt(e.completed),s(e.task_id,e).then(o)}function s(e,t){return l.task.update(e,t).then(u)}function u(e){var n=e.data;return n.success?(t.cacheTasks(),n.data):n.title}var l=this;return l.task=new e("task"),{createTask:n,createOrUpdateTask:r,deleteTask:a,getTasks:o,toggleCompleted:c,updateTask:s}}angular.module("app").factory("tasksService",e),e.$inject=["crudService","cacheService"]}(),function(){"use strict";function e(e,t,n){function r(e,t){return n.uploadFile(e).then(function(e){return e})}var a=this;a.uploadFile=r}angular.module("app").controller("UploadController",e),e.$inject=["$scope","$http","uploadService"]}(),function(){"use strict";function e(e){function t(t,n,r){function a(e){t.$apply(function(){var e=n[0].files[0];e.size<=o?t.uc.uploadFile(e).then(function(e){t.spFileChange=e}):alert("File must be less than "+o/1024/1024+"MB.")})}var o=2097152;e(r.spFileChange);n[0].addEventListener("change",a,!1)}return{restrict:"A",controller:"UploadController",controllerAs:"uc",link:t,scope:{spFileChange:"="}}}angular.module("app").directive("spFileChange",e),e.$inject=["$parse"]}(),function(){"use strict";function e(e,t){function n(n){var r=new FormData;return r.append("file",n),e.post("api/upload/uploadManager.php",r,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).then(function(e){return e.data.success?e.data.data:(t.error(e.title),"")})["catch"](function(e){t.error(e)})}return{uploadFile:n}}angular.module("app").factory("uploadService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(e){function t(){n.loading=!0,e.login(n.user).then(function(e){n.loading=!1,n.error=e})}var n=this;n.loading=!1,n.error="",n.login=t}angular.module("app").controller("LoginController",e),e.$inject=["loginService"]}(),function(){"use strict";function e(e,t,n,r){function a(a){function o(e){return e.data.success===!1?e.data.title:(r.cacheAll(),void t.path("/dashboard"))}function c(e){return n.error(e),"Something went wrong. Please try again."}return a.name=a.name.toLowerCase().trim(),e.post("api/user/loginManager.php",a).then(o)["catch"](c)}return{login:a}}angular.module("app").factory("loginService",e),e.$inject=["$http","$location","$log","cacheService"]}(),function(){"use strict";function e(e){function t(){n.loading=!0,e.register(n.user).then(function(e){n.loading=!1,n.error=e})}var n=this;n.error="",n.loading=!1,n.register=t}angular.module("app").controller("RegisterController",e),e.$inject=["registerService"]}(),function(){"use strict";function e(e,t,n){function r(n){function r(n){return"false"===n.success?(t.error(n.title),n.title):void e.url("/login")}return n.name=n.name.toLowerCase().trim(),a.crud.create(n).then(r)}var a=this;return a.crud=new n("user"),{register:r}}angular.module("app").factory("registerService",e),e.$inject=["$location","$log","crudService"]}(),function(){"use strict";function e(e){this.labelId=e.labelId}angular.module("app").controller("LabelPageController",e),e.$inject=["$stateParams"]}(),function(){"use strict";function e(e,t,n,r){function a(){function e(e){return e.data.success!==!1?c.resolve(r.OK):c.reject(r.UNAUTHORIZED),c.promise}return n.getVar("name").then(e)}function o(){}var c=t.defer();return{isAuthenticated:a,isAdmin:o}}angular.module("app").factory("accessService",e),e.$inject=["$location","$q","sessionService","statusService"]}(),function(){"use strict";function e(){return{OK:200,UNAUTHORIZED:401,FORBIDDEN:403}}angular.module("app").service("statusService",e)}(),function(){"use strict";function e(e,t){function n(e){return s.calendar.create(e).then(c)}function r(e){return s.calendar.remove(e).then(c)}function a(){return t.getCalendars()}function o(e,t){return s.calendar.update(e,t).then(c)}function c(e){var n=e.data;return n.success?(t.cacheCalendars(),n.data):n.title}var s=this;return s.calendar=new e("calendar"),{createCalendar:n,deleteCalendar:r,getCalendars:a,updateCalendar:o}}angular.module("app").factory("calendarService",e),e.$inject=["crudService","cacheService"]}(),function(){"use strict";function e(e,t,n){function r(t,r){var a={};return angular.extend(a,t),e.open({controller:"ModalController",controllerAs:"vm",templateUrl:"modules/events/modal/event.modal.html",resolve:{groups:function(){return r},item:a}}).result.then(function(e){return n.createOrUpdateEvent(e).then(n.getEvents)},function(e){return Number(e)?n.deleteEvent(e).then(n.getEvents):void 0})}return{openEventModal:r}}angular.module("app").factory("eventModalService",e),e.$inject=["$uibModal","calendarService","eventsService"]}(),function(){"use strict";function e(e){function t(e){return e.clone().add(1,"day").subtract(1,"ms")}function n(e){for(var t=[],n=e.clone().date(1).startOf("week"),r=0;6>r;r++)t.push(a(n,e.month())),n=n.add(1,"weeks");return t}function r(){return e()}function a(t,n){for(var r=[],a=t.clone(),o=0;7>o;o++)r.push({number:a.date(),isTargetMonth:a.month()===n,isToday:a.isSame(e(),"day"),fullDate:a}),a=a.clone().add(1,"days");return r}function o(e,t){return e.isSame(t,"day")}function c(e){return n(e[3][0].fullDate.clone().subtract(1,"months"))}function s(e){return n(e[3][0].fullDate.clone().add(1,"months"))}return{getEndOfDay:t,getMonth:n,getToday:r,getWeek:a,isSameDay:o,lastMonth:c,nextMonth:s}}angular.module("app").factory("calendarWidgetService",e),e.$inject=["moment"]}(),function(){"use strict";function e(e,t){function n(n){return e.open({controller:"ModalController",controllerAs:"vm",templateUrl:"modules/recurrence/modal/recurrence.modal.html",resolve:{groups:function(){return r},item:n}}).result.then(function(e){t.constructRecurrence(n)},function(e){t.clearRecurrence(n)})}var r={freq:["hourly","daily","weekly","monthly","yearly"],days:["mo","tu","we","th","fr","sa","su"]};return{openRecurrenceModal:n}}angular.module("app").factory("recurrenceModalService",e),e.$inject=["$uibModal","recurrenceService"]}(),function(){"use strict";function e(e,t){function n(e){return s.label.create(e).then(c)}function r(e){return s.label.remove(e).then(c)}function a(){return t.getLabels()}function o(e,t){return s.label.update(e,t).then(c)}function c(e){var n=e.data;return n.success?(t.cacheLabels(),n.data):n.title}var s=this;return s.label=new e("label"),{createLabel:n,deleteLabel:r,getLabels:a,updateLabel:o}}angular.module("app").factory("labelService",e),e.$inject=["crudService","cacheService"]}(),function(){"use strict";function e(e,t,n){function r(t,r){var a={};angular.extend(a,t),e.open({controller:"ModalController",controllerAs:"vm",templateUrl:"modules/tasks/modal/subtask.modal.html",resolve:{groups:r,item:a}}).result.then(function(e){n.createOrUpdateSubtask(e.subtask,e.task)},function(e){"string"!=typeof e&&n.deleteSubtask(e.subtask,e.task)})}return{openSubtaskModal:r}}angular.module("app").factory("subtaskModalService",e),e.$inject=["$uibModal","labelService","subtasksService"]}(),function(){"use strict";function e(e,t,n){function r(t,r){var a={};return angular.extend(a,t),e.open({controller:"ModalController",controllerAs:"vm",templateUrl:"modules/tasks/modal/task.modal.html",resolve:{groups:function(){return r},item:a}}).result.then(function(e){return n.createOrUpdateTask(e).then(n.getTasks)},function(e){return Number(e)?n.deleteTask(e).then(n.getTasks):void 0})}return{openTaskModal:r}}angular.module("app").factory("taskModalService",e),e.$inject=["$uibModal","labelService","tasksService"]}(),function(){"use strict";function e(e,t){function n(e){t.openSubtaskModal(e,a.task)}function r(t){e.toggleCompleted(t)}var a=this;a.showSubtaskModal=n,a.toggleCompleted=r}angular.module("app").controller("SubtasksController",e),e.$inject=["subtasksService","subtaskModalService"]}(),function(){"use strict";function e(){return{templateUrl:"modules/tasks/subtasks/subtasks.html",controller:"SubtasksController",controllerAs:"st",bindToController:!0,scope:{task:"="}}}angular.module("app").directive("spSubtasks",e)}(),function(){"use strict";function e(e,t){function n(e,t){t.subtasks||(t.subtasks={currentId:1,list:[]}),void 0===e.id&&(e.id=t.subtasks.currentId++,e.completed=!1,t.subtasks.list.push(e))}function r(e,t){t.subtasks.list.splice(t.subtasks.list.indexOf(e),1)}function a(e){e.completed=!e.completed}return{createOrUpdateSubtask:n,deleteSubtask:r,toggleCompleted:a}}angular.module("app").factory("subtasksService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(e){this.user=e}angular.module("app").controller("HeaderController",e),e.$inject=["user"]}(),function(){"use strict";function e(e,t,n){function r(){function e(e){var t=e.data;return t.success===!1?{name:!1,url:"#/login"}:{name:t.data,url:"#/dashboard"}}return n.getVar("name").then(e)}return{getUser:r}}angular.module("app").factory("headerService",e),e.$inject=["$http","$log","sessionService"]}(),function(){"use strict";function e(e,t,n){function r(){a(),o(),e.$on("updateCalendars",a),e.$on("updateLabels",o)}function a(){c.calendars=n.getCalendars()}function o(){c.labels=t.getLabels()}var c=this;c.collapsed=!0,c.labels=[],c.calendars=[],r()}angular.module("app").controller("SidebarController",e),e.$inject=["$rootScope","labelService","calendarService"]}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5taW4uanMiXSwibmFtZXMiOlsiQXBwQ29udHJvbGxlciIsIiRyb290U2NvcGUiLCJhcHBTZXJ2aWNlIiwiJG9uIiwic3RhdGVDaGFuZ2VFcnJvciIsImFuZ3VsYXIiLCJtb2R1bGUiLCJjb250cm9sbGVyIiwiJGluamVjdCIsImFwcENvbmZpZyIsIiRzdGF0ZVByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwiY2FjaGVBbGwiLCJjYWNoZVNlcnZpY2UiLCJnZXRVc2VyIiwiaGVhZGVyU2VydmljZSIsImlzQXV0aGVudGljYXRlZCIsImFjY2Vzc1NlcnZpY2UiLCJzdGF0ZSIsInVybCIsInRlbXBsYXRlVXJsIiwiYWJzdHJhY3QiLCJyZXNvbHZlIiwiY2FjaGUiLCJ1c2VyIiwidmlld3MiLCJoZWFkZXIiLCJjb250cm9sbGVyQXMiLCJzaWRlYmFyIiwicGFyZW50IiwiY29udGVudEAiLCJvdGhlcndpc2UiLCJjb25maWciLCIkbG9jYXRpb24iLCJzdGF0dXNTZXJ2aWNlIiwiZXZlbnQiLCJ1bmZvdW5kU3RhdGUiLCJmcm9tU3RhdGUiLCJmcm9tUGFyYW1zIiwiVU5BVVRIT1JJWkVEIiwicGF0aCIsIkZPUkJJRERFTiIsImZhY3RvcnkiLCJpbkdyb3VwcyIsImFjdGl2aXRpZXMiLCJncm91cHMiLCJhY3Rpdml0aWVzSW5Hcm91cHMiLCJpIiwibGVuZ3RoIiwibGFiZWxfaWQiLCJjYWxlbmRhcl9pZCIsInB1c2giLCJmaWx0ZXIiLCJzYW1lRGF5QXMiLCJtb21lbnQiLCJldmVudHMiLCJkYXkiLCJzYW1lRGF5RXZlbnRzIiwicmVzdWx0IiwiaXNTYW1lIiwiZHRfc3RhcnQiLCJkdF9lbmQiLCJ3aXRoaW5EYXlzIiwidGFza3MiLCJudW1PZkRheXMiLCJ0YXNrc1dpdGhpbkRheXMiLCJkdWUiLCJpc0JlZm9yZSIsImFkZCIsImNydWRTZXJ2aWNlIiwiY2FjaGVDYWxlbmRhcnMiLCJjYWNoZUV2ZW50cyIsImNhY2hlTGFiZWxzIiwiY2FjaGVUYXNrcyIsInZtIiwiY2FsZW5kYXIiLCJnZXRCeVVzZXIiLCJ0aGVuIiwicmVzcG9uc2UiLCJjYWxlbmRhcnMiLCJnZXRSZXN1bHQiLCIkYnJvYWRjYXN0IiwibGFiZWwiLCJsYWJlbHMiLCJ0YXNrIiwiZGF0YSIsInN1Y2Nlc3MiLCJ0aXRsZSIsImdldEFsbCIsImdldENhbGVuZGFycyIsImdldEV2ZW50cyIsImdldExhYmVscyIsImdldFRhc2tzIiwidGhpcyIsInNlcnZpY2UiLCIkaHR0cCIsIiRsb2ciLCJpbml0IiwidHlwZSIsImJhc2UiLCJnZXQiLCJpZCIsInByb21pc2VDb21wbGV0ZSIsInByb21pc2VGYWlsZWQiLCJjcmVhdGUiLCJyZW1vdmVVbmVjZXNzYXJ5S2V5cyIsInBvc3QiLCJ1cGRhdGUiLCJwdXQiLCJyZW1vdmUiLCJyZW1vdmVXaGVyZSIsIndoZXJlIiwiZXNjYXBlIiwiZXJyb3IiLCJtZXNzYWdlIiwidG9EZWxldGUiLCJjcnVkIiwicHJvdG90eXBlIiwic2Vzc2lvblNlcnZpY2UiLCJnZXRWYXIiLCIkbmFtZSIsInNldFZhciIsIiR2YWx1ZSIsIkV2ZW50c0NvbnRyb2xsZXIiLCJjYWxlbmRhcldpZGdldFNlcnZpY2UiLCJjYWxlbmRhclNlcnZpY2UiLCJldmVudHNTZXJ2aWNlIiwiZXZlbnRNb2RhbFNlcnZpY2UiLCJhY3RpdmF0ZSIsInVwZGF0ZUNhbGVuZGFycyIsInVwZGF0ZUV2ZW50cyIsInRvZGF5IiwiZ2V0VG9kYXkiLCJzZWxlY3RlZERheSIsIm1vbnRoIiwiZ2V0TW9udGgiLCJnZXRFbmRPZkRheSIsImlzU2FtZURheUFzU2VsZWN0ZWQiLCJpc1NhbWVEYXkiLCJzZWxlY3REYXkiLCJmdWxsRGF0ZSIsInNob3dFdmVudE1vZGFsIiwib3BlbkV2ZW50TW9kYWwiLCJsYXN0TW9udGgiLCJuZXh0TW9udGgiLCJldmVudHNEaXJlY3RpdmUiLCJiaW5kVG9Db250cm9sbGVyIiwiZGlyZWN0aXZlIiwiY3JlYXRlRXZlbnQiLCJjcmVhdGVPclVwZGF0ZUV2ZW50IiwiZXZlbnRfaWQiLCJ1cGRhdGVFdmVudCIsImRlbGV0ZUV2ZW50IiwicmVzIiwiYXV0b0ZvY3VzRGlyZWN0aXZlIiwibGluayIsInNjb3BlIiwiZWxlbWVudCIsImF0dHJzIiwibmdNb2RlbCIsImZvY3VzIiwicmVzdHJpY3QiLCJjb21wYXJlVG9EaXJlY3RpdmUiLCJjbGVhblVwIiwidW5iaW5kV2F0Y2giLCJjb21wYXJlVmFsdWVzIiwidmlld1ZhbHVlIiwib3RoZXJNb2RlbCIsIiR2aWV3VmFsdWUiLCJ2YWxpZGF0ZU9uQ2hhbmdlIiwibmV3VmFsdWUiLCJvbGRWYWx1ZSIsIiR2YWxpZGF0ZSIsIiR3YXRjaCIsIiR2YWxpZGF0b3JzIiwic3BDb21wYXJlVG8iLCJvbiIsInJlcXVpcmUiLCJNb2RhbENvbnRyb2xsZXIiLCIkdWliTW9kYWxJbnN0YW5jZSIsIml0ZW0iLCJjYW5jZWwiLCJkaXNtaXNzIiwiY2xvc2UiLCJjb25maXJtIiwiUmVjdXJyZW5jZUNvbnRyb2xsZXIiLCJyZWN1cnJlbmNlTW9kYWxTZXJ2aWNlIiwic2hvd1JlY3VycmVuY2VNb2RhbCIsInJjIiwicmVjdXJyZW5jZSIsIm9wZW5SZWN1cnJlbmNlTW9kYWwiLCJyZWN1cnJlbmNlRGlyZWN0aXZlIiwicmVjdXJyZW5jZVNlcnZpY2UiLCJjbGVhclJlY3VycmVuY2UiLCJjb25zdHJ1Y3RSZWN1cnJlbmNlIiwiVGFza3NDb250cm9sbGVyIiwidGFza3NTZXJ2aWNlIiwibGFiZWxTZXJ2aWNlIiwidGFza01vZGFsU2VydmljZSIsInVwZGF0ZUxhYmVscyIsInVwZGF0ZVRhc2tzIiwic2hvd1Rhc2tNb2RhbCIsIm9wZW5UYXNrTW9kYWwiLCJ0b2dnbGVDb21wbGV0ZWQiLCJ0YXNrc0RpcmVjdGl2ZSIsIm9yZGVyIiwiZGF5cyIsImluTGFiZWxzIiwiY3JlYXRlVGFzayIsImNyZWF0ZU9yVXBkYXRlVGFzayIsInRhc2tfaWQiLCJ1cGRhdGVUYXNrIiwiZGVsZXRlVGFzayIsImNvbXBsZXRlZCIsInBhcnNlSW50IiwiVXBsb2FkQ29udHJvbGxlciIsIiRzY29wZSIsInVwbG9hZFNlcnZpY2UiLCJ1cGxvYWRGaWxlIiwiZmlsZSIsIm9sZEZpbGUiLCJmaWxlUGF0aCIsInVjIiwidXBsb2FkRGlyZWN0aXZlIiwiJHBhcnNlIiwiZmlsZUhhbmRsZXIiLCIkYXBwbHkiLCJmaWxlcyIsInNpemUiLCJtYXhGaWxlU2l6ZSIsInNwRmlsZUNoYW5nZSIsImFsZXJ0IiwiYWRkRXZlbnRMaXN0ZW5lciIsImZvcm1EYXRhIiwiRm9ybURhdGEiLCJhcHBlbmQiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwiaWRlbnRpdHkiLCJoZWFkZXJzIiwiQ29udGVudC1UeXBlIiwidW5kZWZpbmVkIiwiTG9naW5Db250cm9sbGVyIiwibG9naW5TZXJ2aWNlIiwibG9naW4iLCJsb2FkaW5nIiwibG9naW5Db21wbGV0ZSIsImxvZ2luRmFpbGVkIiwibmFtZSIsInRvTG93ZXJDYXNlIiwidHJpbSIsIlJlZ2lzdGVyQ29udHJvbGxlciIsInJlZ2lzdGVyU2VydmljZSIsInJlZ2lzdGVyIiwicmVnaXN0cmF0aW9uQ29tcGxldGUiLCJMYWJlbFBhZ2VDb250cm9sbGVyIiwiJHN0YXRlUGFyYW1zIiwibGFiZWxJZCIsIiRxIiwiaXNBdXRoZW50aWNhdGVkQ29tcGxldGUiLCJkZWZlcnJlZCIsIk9LIiwicmVqZWN0IiwicHJvbWlzZSIsImlzQWRtaW4iLCJkZWZlciIsImNyZWF0ZUNhbGVuZGFyIiwiZGVsZXRlQ2FsZW5kYXIiLCJ1cGRhdGVDYWxlbmRhciIsIiR1aWJNb2RhbCIsImNsb25lZEV2ZW50IiwiZXh0ZW5kIiwib3BlbiIsIk51bWJlciIsImNsb25lIiwic3VidHJhY3QiLCJhRGF5IiwiZGF0ZSIsInN0YXJ0T2YiLCJnZXRXZWVrIiwic3RhcnREYXkiLCJ0YXJnZXRNb250aCIsIndlZWsiLCJudW1iZXIiLCJpc1RhcmdldE1vbnRoIiwiaXNUb2RheSIsImRheTEiLCJkYXkyIiwic3JjTW9udGgiLCJyZWN1cnJlbmNlSW5mbyIsImZyZXEiLCJjcmVhdGVMYWJlbCIsImRlbGV0ZUxhYmVsIiwidXBkYXRlTGFiZWwiLCJzdWJ0YXNrTW9kYWxTZXJ2aWNlIiwic3VidGFza3NTZXJ2aWNlIiwib3BlblN1YnRhc2tNb2RhbCIsInN1YnRhc2siLCJjbG9uZWRTdWJ0YXNrIiwiY3JlYXRlT3JVcGRhdGVTdWJ0YXNrIiwiZGVsZXRlU3VidGFzayIsImNsb25lZFRhc2siLCJTdWJ0YXNrc0NvbnRyb2xsZXIiLCJzaG93U3VidGFza01vZGFsIiwic3QiLCJzdWJ0YXNrc0RpcmVjdGl2ZSIsInN1YnRhc2tzIiwiY3VycmVudElkIiwibGlzdCIsInNwbGljZSIsImluZGV4T2YiLCJIZWFkZXJDb250cm9sbGVyIiwiZ2V0TmFtZUNvbXBsZXRlIiwiU2lkZWJhckNvbnRyb2xsZXIiLCJjb2xsYXBzZWQiXSwibWFwcGluZ3MiOiJDQUFBLFdBQ0MsWUFPQSxTQUFTQSxHQUFjQyxFQUFZQyxHQUNsQ0QsRUFBV0UsSUFBSSxvQkFBcUJELEVBQVdFLGtCQU5oREMsUUFDRUMsT0FBTyxPQUFRLFlBQWEsZUFBZ0Isa0JBQzVDQyxXQUFXLGdCQUFpQlAsR0FFOUJBLEVBQWNRLFNBQVcsYUFBYyxpQkFLeEMsV0FDQyxZQU9BLFNBQVNDLEdBQVVDLEVBQWdCQyxHQXNJbEMsUUFBU0MsR0FBU0MsR0FDakIsTUFBT0EsR0FBYUQsV0FHckIsUUFBU0UsR0FBUUMsR0FDaEIsTUFBT0EsR0FBY0QsVUFHdEIsUUFBU0UsR0FBZ0JDLEdBQ3hCLE1BQU9BLEdBQWNELGtCQTdJdEJOLEVBQ0VRLE1BQU0sUUFDTkMsSUFBSyxHQUNMQyxZQUFhLGFBQ2JDLFlBQVUsRUFDVkMsU0FDQ0MsT0FBUSxlQUFnQlgsR0FDeEJZLE1BQU8sZ0JBQWlCVixJQUV6QlcsT0FDQ0MsUUFDQ04sWUFBYSxrQ0FDYmIsV0FBWSxtQkFDWm9CLGFBQWMsTUFFZkMsU0FDQ1IsWUFBYSxvQ0FDYmIsV0FBWSxvQkFDWm9CLGFBQWMsU0FJaEJULE1BQU0sU0FDTkMsSUFBSyxTQUNMVSxPQUFRLE9BQ1JKLE9BQ0NLLFlBQ0NWLFlBQWEseUJBQ2JiLFdBQVksa0JB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LFdBSzdCLFdBQ0MsWUFPQSxTQUFTTyxHQUFjZ0YsRUFBT0MsRUFBTXNCLEdBS25DLFFBQVN4RyxLQUlSLFFBQVN5UyxHQUFnQnpPLEdBQ3hCLEdBQUkyRSxHQUFNM0UsRUFBU08sSUFFbkIsT0FBSW9FLEdBQUluRSxXQUFZLEdBQ1hpSyxNQUFNLEVBQU9wTyxJQUFLLFlBRW5Cb08sS0FBTTlGLEVBQUlwRSxLQUFNbEUsSUFBSyxlQVQ5QixNQUFPbUcsR0FBZUMsT0FBTyxRQUMzQjFDLEtBQUswTyxHQU5SLE9BQ0N6UyxRQUFTQSxHQVBYVCxRQUNFQyxPQUFPLE9BQ1BvQyxRQUFRLGdCQUFpQjNCLEdBRTNCQSxFQUFjUCxTQUFXLFFBQVMsT0FBUSxxQkFzQjNDLFdBQ0MsWUFPQSxTQUFTZ1QsR0FBa0J2VCxFQUFZb00sRUFBY3hFLEdBUXBELFFBQVNHLEtBQ1JDLElBQ0FzRSxJQUVBdE0sRUFBV0UsSUFBSSxrQkFBbUI4SCxHQUNsQ2hJLEVBQVdFLElBQUksZUFBZ0JvTSxHQUdoQyxRQUFTdEUsS0FDUnZELEVBQUdLLFVBQVk4QyxFQUFnQnBDLGVBR2hDLFFBQVM4RyxLQUNSN0gsRUFBR1MsT0FBU2tILEVBQWExRyxZQXBCMUIsR0FBSWpCLEdBQUttQixJQUNUbkIsR0FBRytPLFdBQVksRUFDZi9PLEVBQUdTLFVBQ0hULEVBQUdLLGFBRUhpRCxJQVhEM0gsUUFDRUMsT0FBTyxPQUNQQyxXQUFXLG9CQUFxQmlULEdBRWxDQSxFQUFrQmhULFNBQVcsYUFBYyxlQUFnQiIsImZpbGUiOiJhcHAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJywgWyd1aS5yb3V0ZXInLCAndWkuYm9vdHN0cmFwJywgJ2FuZ3VsYXJNb21lbnQnXSlcclxuXHRcdC5jb250cm9sbGVyKCdBcHBDb250cm9sbGVyJywgQXBwQ29udHJvbGxlcik7XHJcblxyXG5cdEFwcENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHJvb3RTY29wZScsICdhcHBTZXJ2aWNlJ107XHJcblx0ZnVuY3Rpb24gQXBwQ29udHJvbGxlcigkcm9vdFNjb3BlLCBhcHBTZXJ2aWNlKSB7XHJcblx0XHQkcm9vdFNjb3BlLiRvbignJHN0YXRlQ2hhbmdlRXJyb3InLCBhcHBTZXJ2aWNlLnN0YXRlQ2hhbmdlRXJyb3IpO1xyXG5cdH1cclxufSkoKTtcbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuY29uZmlnKGFwcENvbmZpZyk7XHJcblxyXG5cdGFwcENvbmZpZy4kaW5qZWN0ID0gWyckc3RhdGVQcm92aWRlcicsICckdXJsUm91dGVyUHJvdmlkZXInXTtcclxuXHRmdW5jdGlvbiBhcHBDb25maWcoJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlcikge1xyXG5cclxuXHRcdCRzdGF0ZVByb3ZpZGVyXHJcblx0XHRcdC5zdGF0ZSgncm9vdCcsIHtcclxuXHRcdFx0XHR1cmw6ICcnLFxyXG5cdFx0XHRcdHRlbXBsYXRlVXJsOiAnaW5kZXguaHRtbCcsXHJcblx0XHRcdFx0YWJzdHJhY3Q6IHRydWUsXHJcblx0XHRcdFx0cmVzb2x2ZToge1xyXG5cdFx0XHRcdFx0Y2FjaGU6IFsnY2FjaGVTZXJ2aWNlJywgY2FjaGVBbGxdLFxyXG5cdFx0XHRcdFx0dXNlcjogWydoZWFkZXJTZXJ2aWNlJywgZ2V0VXNlcl1cclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHZpZXdzOiB7XHJcblx0XHRcdFx0XHQnaGVhZGVyJzoge1xyXG5cdFx0XHRcdFx0XHR0ZW1wbGF0ZVVybDogJ3BhZ2VzL2xheW91dC9oZWFkZXIvaGVhZGVyLmh0bWwnLFxyXG5cdFx0XHRcdFx0XHRjb250cm9sbGVyOiAnSGVhZGVyQ29udHJvbGxlcicsXHJcblx0XHRcdFx0XHRcdGNvbnRyb2xsZXJBczogJ2hjJ1xyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdCdzaWRlYmFyJzoge1xyXG5cdFx0XHRcdFx0XHR0ZW1wbGF0ZVVybDogJ3BhZ2VzL2xheW91dC9zaWRlYmFyL3NpZGViYXIuaHRtbCcsXHJcblx0XHRcdFx0XHRcdGNvbnRyb2xsZXI6ICdTaWRlYmFyQ29udHJvbGxlcicsXHJcblx0XHRcdFx0XHRcdGNvbnRyb2xsZXJBczogJ3NjJ1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSlcclxuXHRcdFx0LnN0YXRlKCdsb2dpbicsIHtcclxuXHRcdFx0XHR1cmw6ICcvbG9naW4nLFxyXG5cdFx0XHRcdHBhcmVudDogJ3Jvb3QnLFxyXG5cdFx0XHRcdHZpZXdzOiB7XHJcblx0XHRcdFx0XHQnY29udGVudEAnOiB7XHJcblx0XHRcdFx0XHRcdHRlbXBsYXRlVXJsOiAncGFnZXMvbG9naW4vbG9naW4uaHRtbCcsXHJcblx0XHRcdFx0XHRcdGNvbnRyb2xsZXI6ICdMb2dpbkNvbnRyb2xsZXInLFxyXG5cdFx0XHRcdFx0XHRjb250cm9sbGVyQXM6ICd2bSdcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pXHJcblx0XHRcdC5zdGF0ZSgnbG9nb3V0Jywge1xyXG5cdFx0XHRcdHVybDogJy9sb2dvdXQnLFxyXG5cdFx0XHRcdHBhcmVudDogJ3Jvb3QnLFxyXG5cdFx0XHRcdHZpZXdzOiB7XHJcblx0XHRcdFx0XHQnY29udGVudEAnOiB7XHJcblx0XHRcdFx0XHRcdHRlbXBsYXRlVXJsOiAnbW9kdWxlcy9sb2dvdXQvbG9nb3V0Lmh0bWwnLFxyXG5cdFx0XHRcdFx0XHRjb250cm9sbGVyOiAnTG9nb3V0Q29udHJvbGxlcicsXHJcblx0XHRcdFx0XHRcdGNvbnRyb2xsZXJBczogJ3ZtJ1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSlcclxuXHRcdFx0LnN0YXRlKCdyZWdpc3RlcicsIHtcclxuXHRcdFx0XHR1cmw6ICcvcmVnaXN0ZXInLFxyXG5cdFx0XHRcdHBhcmVudDogJ3Jvb3QnLFxyXG5cdFx0XHRcdHZpZXdzOiB7XHJcblx0XHRcdFx0XHQnY29udGVudEAnOiB7XHJcblx0XHRcdFx0XHRcdHRlbXBsYXRlVXJsOiAncGFnZXMvcmVnaXN0ZXIvcmVnaXN0ZXIuaHRtbCcsXHJcblx0XHRcdFx0XHRcdGNvbnRyb2xsZXI6ICdSZWdpc3RlckNvbnRyb2xsZXInLFxyXG5cdFx0XHRcdFx0XHRjb250cm9sbGVyQXM6ICd2bSdcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pXHJcblx0XHRcdC5zdGF0ZSgnZGFzaGJvYXJkJywge1xyXG5cdFx0XHRcdHVybDogJy9kYXNoYm9hcmQnLFxyXG5cdFx0XHRcdHBhcmVudDogJ3Jvb3QnLFxyXG5cdFx0XHRcdHZpZXdzOiB7XHJcblx0XHRcdFx0XHQnY29udGVudEAnOiB7XHJcblx0XHRcdFx0XHRcdHRlbXBsYXRlVXJsOiAncGFnZXMvZGFzaGJvYXJkL2Rhc2hib2FyZC5odG1sJyxcclxuXHRcdFx0XHRcdFx0cmVzb2x2ZToge1xyXG5cdFx0XHRcdFx0XHRcdGlzQXV0aGVudGljYXRlZDogWydhY2Nlc3NTZXJ2aWNlJywgaXNBdXRoZW50aWNhdGVkXVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KVxyXG5cdFx0XHQuc3RhdGUoJ2xhYmVscycsIHtcclxuXHRcdFx0XHR1cmw6ICcvbGFiZWxzJyxcclxuXHRcdFx0XHRwYXJlbnQ6ICdyb290J1xyXG5cdFx0XHR9KVxyXG5cdFx0XHQuc3RhdGUoJ2xhYmVscy5sYWJlbCcsIHtcclxuXHRcdFx0XHR1cmw6ICcvOmxhYmVsSWQnLFxyXG5cdFx0XHRcdHZpZXdzOiB7XHJcblx0XHRcdFx0XHQnY29udGVudEAnOiB7XHJcblx0XHRcdFx0XHRcdHRlbXBsYXRlVXJsOiBcInBhZ2VzL3Rhc2tzL2xhYmVsLmh0bWxcIixcclxuXHRcdFx0XHRcdFx0Y29udHJvbGxlcjogJ0xhYmVsUGFnZUNvbnRyb2xsZXInLFxyXG5cdFx0XHRcdFx0XHRjb250cm9sbGVyQXM6ICd2bSdcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pXHJcblx0XHRcdC5zdGF0ZSgnaW5ib3gnLCB7XHJcblx0XHRcdFx0dXJsOiAnL2luYm94JyxcclxuXHRcdFx0XHRwYXJlbnQ6ICdyb290JyxcclxuXHRcdFx0XHR2aWV3czoge1xyXG5cdFx0XHRcdFx0J2NvbnRlbnRAJzoge1xyXG5cdFx0XHRcdFx0XHR0ZW1wbGF0ZVVybDogJ3BhZ2VzL3Rhc2tzL2luYm94Lmh0bWwnLFxyXG5cdFx0XHRcdFx0XHRyZXNvbHZlOiB7XHJcblx0XHRcdFx0XHRcdFx0aXNBdXRoZW50aWNhdGVkOiBbJ2FjY2Vzc1NlcnZpY2UnLCBpc0F1dGhlbnRpY2F0ZWRdXHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pXHJcblx0XHRcdC5zdGF0ZSgndG9kYXknLCB7XHJcblx0XHRcdFx0dXJsOiAnL3RvZGF5JyxcclxuXHRcdFx0XHRwYXJlbnQ6ICdyb290JyxcclxuXHRcdFx0XHR2aWV3czoge1xyXG5cdFx0XHRcdFx0J2NvbnRlbnRAJzoge1xyXG5cdFx0XHRcdFx0XHR0ZW1wbGF0ZVVybDogJ3BhZ2VzL3Rhc2tzL3RvZGF5Lmh0bWwnLFxyXG5cdFx0XHRcdFx0XHRyZXNvbHZlOiB7XHJcblx0XHRcdFx0XHRcdFx0aXNBdXRoZW50aWNhdGVkOiBbJ2FjY2Vzc1NlcnZpY2UnLCBpc0F1dGhlbnRpY2F0ZWRdXHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pXHJcblx0XHRcdC5zdGF0ZSgnd2VlaycsIHtcclxuXHRcdFx0XHR1cmw6ICcvd2VlaycsXHJcblx0XHRcdFx0cGFyZW50OiAncm9vdCcsXHJcblx0XHRcdFx0dmlld3M6IHtcclxuXHRcdFx0XHRcdCdjb250ZW50QCc6IHtcclxuXHRcdFx0XHRcdFx0dGVtcGxhdGVVcmw6ICdwYWdlcy90YXNrcy93ZWVrLmh0bWwnLFxyXG5cdFx0XHRcdFx0XHRyZXNvbHZlOiB7XHJcblx0XHRcdFx0XHRcdFx0aXNBdXRoZW50aWNhdGVkOiBbJ2FjY2Vzc1NlcnZpY2UnLCBpc0F1dGhlbnRpY2F0ZWRdXHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pXHJcblx0XHRcdC5zdGF0ZSgnY2FsZW5kYXInLCB7XHJcblx0XHRcdFx0dXJsOiAnL2NhbGVuZGFyJyxcclxuXHRcdFx0XHRwYXJlbnQ6ICdyb290JyxcclxuXHRcdFx0XHR2aWV3czoge1xyXG5cdFx0XHRcdFx0J2NvbnRlbnRAJzoge1xyXG5cdFx0XHRcdFx0XHR0ZW1wbGF0ZVVybDogJ3BhZ2VzL2NhbGVuZGFyL2NhbGVuZGFyLmh0bWwnLFxyXG5cdFx0XHRcdFx0XHRyZXNvbHZlOiB7XHJcblx0XHRcdFx0XHRcdFx0aXNBdXRoZW50aWNhdGVkOiBbJ2FjY2Vzc1NlcnZpY2UnLCBpc0F1dGhlbnRpY2F0ZWRdXHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdCR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy9kYXNoYm9hcmQnKTtcclxuXHJcblx0XHRmdW5jdGlvbiBjYWNoZUFsbChjYWNoZVNlcnZpY2UpIHtcclxuXHRcdFx0cmV0dXJuIGNhY2hlU2VydmljZS5jYWNoZUFsbCgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGdldFVzZXIoaGVhZGVyU2VydmljZSkge1xyXG5cdFx0XHRyZXR1cm4gaGVhZGVyU2VydmljZS5nZXRVc2VyKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gaXNBdXRoZW50aWNhdGVkKGFjY2Vzc1NlcnZpY2UpIHtcclxuXHRcdFx0cmV0dXJuIGFjY2Vzc1NlcnZpY2UuaXNBdXRoZW50aWNhdGVkKCk7XHJcblx0XHR9XHJcblx0fVxyXG59KSgpO1xuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5mYWN0b3J5KCdhcHBTZXJ2aWNlJywgYXBwU2VydmljZSk7XHJcblxyXG5cdGFwcFNlcnZpY2UuJGluamVjdCA9IFsnJGxvY2F0aW9uJywgJ3N0YXR1c1NlcnZpY2UnXTtcclxuXHRmdW5jdGlvbiBhcHBTZXJ2aWNlKCRsb2NhdGlvbiwgc3RhdHVzU2VydmljZSkge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0c3RhdGVDaGFuZ2VFcnJvcjogc3RhdGVDaGFuZ2VFcnJvclxyXG5cdFx0fTtcclxuXHJcblx0XHRmdW5jdGlvbiBzdGF0ZUNoYW5nZUVycm9yKGV2ZW50LCB1bmZvdW5kU3RhdGUsIGZyb21TdGF0ZSwgZnJvbVBhcmFtcykge1xyXG5cdFx0XHRpZiAoZnJvbVBhcmFtcyA9PT0gc3RhdHVzU2VydmljZS5VTkFVVEhPUklaRUQpIHtcclxuXHRcdFx0XHQkbG9jYXRpb24ucGF0aCgnL2xvZ2luJyk7XHJcblx0XHRcdH0gZWxzZSBpZiAoZnJvbVBhcmFtcyA9PT0gc3RhdHVzU2VydmljZS5GT1JCSURERU4pIHtcclxuXHRcdFx0XHQkbG9jYXRpb24ucGF0aCgnL2ZvcmJpZGRlbicpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59KSgpO1xyXG5cbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuZmlsdGVyKCdpbkdyb3VwcycsIGluR3JvdXBzKTtcclxuXHJcblx0aW5Hcm91cHMuJGluamVjdCA9IFtdO1xyXG5cdGZ1bmN0aW9uIGluR3JvdXBzKCkge1xyXG5cdFx0cmV0dXJuIGZ1bmN0aW9uKGFjdGl2aXRpZXMsIGdyb3Vwcykge1xyXG5cdFx0XHRpZiAoIWdyb3Vwcykge1xyXG5cdFx0XHRcdHJldHVybiBhY3Rpdml0aWVzO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2YXIgYWN0aXZpdGllc0luR3JvdXBzID0gW107XHJcblxyXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFjdGl2aXRpZXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0XHRpZiAoYWN0aXZpdGllc1tpXS5sYWJlbF9pZCA9PT0gZ3JvdXBzIHx8XHJcblx0XHRcdFx0XHRhY3Rpdml0aWVzW2ldLmNhbGVuZGFyX2lkID09PSBncm91cHNcclxuXHRcdFx0XHQpIHtcclxuXHRcdFx0XHRcdGFjdGl2aXRpZXNJbkdyb3Vwcy5wdXNoKGFjdGl2aXRpZXNbaV0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGFjdGl2aXRpZXNJbkdyb3VwcztcclxuXHRcdH07XHJcblx0fVxyXG59KSgpO1xuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5maWx0ZXIoJ3NhbWVEYXlBcycsIHNhbWVEYXlBcyk7XHJcblxyXG5cdHNhbWVEYXlBcy4kaW5qZWN0ID0gWydtb21lbnQnXTtcclxuXHRmdW5jdGlvbiBzYW1lRGF5QXMobW9tZW50KSB7XHJcblx0XHRyZXR1cm4gZnVuY3Rpb24oZXZlbnRzLCBkYXkpIHtcclxuXHRcdFx0dmFyIHNhbWVEYXlFdmVudHMgPSBbXTtcclxuXHJcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0dmFyIHJlc3VsdCA9IGRheS5pc1NhbWUobW9tZW50KGV2ZW50c1tpXS5kdF9zdGFydCksICdkYXknKTtcclxuXHJcblx0XHRcdFx0aWYgKCFyZXN1bHQpIHtcclxuXHRcdFx0XHRcdHJlc3VsdCA9IGRheS5pc1NhbWUobW9tZW50KGV2ZW50c1tpXS5kdF9lbmQpLCAnZGF5Jyk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZihyZXN1bHQpIHtcclxuXHRcdFx0XHRcdHNhbWVEYXlFdmVudHMucHVzaChldmVudHNbaV0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIHNhbWVEYXlFdmVudHM7XHJcblx0XHR9O1xyXG5cdH1cclxufSkoKTtcbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuZmlsdGVyKCd3aXRoaW5EYXlzJywgd2l0aGluRGF5cyk7XHJcblxyXG5cdHdpdGhpbkRheXMuJGluamVjdCA9IFsnbW9tZW50J107XHJcblx0ZnVuY3Rpb24gd2l0aGluRGF5cyhtb21lbnQpIHtcclxuXHRcdHJldHVybiBmdW5jdGlvbih0YXNrcywgbnVtT2ZEYXlzKSB7XHJcblx0XHRcdGlmICghbnVtT2ZEYXlzKSB7XHJcblx0XHRcdFx0cmV0dXJuIHRhc2tzO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2YXIgdGFza3NXaXRoaW5EYXlzID0gW107XHJcblxyXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRhc2tzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0dmFyIHJlc3VsdDtcclxuXHJcblx0XHRcdFx0aWYgKCF0YXNrc1tpXS5kdWUgfHwgKHRhc2tzW2ldLmR1ZSAmJlxyXG5cdFx0XHRcdFx0bW9tZW50KHRhc2tzW2ldLmR1ZSkuaXNCZWZvcmUobW9tZW50KCkuYWRkKG51bU9mRGF5cywgJ2RheXMnKSkpXHJcblx0XHRcdFx0KSB7XHJcblx0XHRcdFx0XHR0YXNrc1dpdGhpbkRheXMucHVzaCh0YXNrc1tpXSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gdGFza3NXaXRoaW5EYXlzO1xyXG5cdFx0fTtcclxuXHR9XHJcbn0pKCk7XG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LnNlcnZpY2UoJ2NhY2hlU2VydmljZScsIGNhY2hlU2VydmljZSk7XHJcblxyXG5cdGNhY2hlU2VydmljZS4kaW5qZWN0ID0gWyckcm9vdFNjb3BlJywgJ2NydWRTZXJ2aWNlJ107XHJcblx0ZnVuY3Rpb24gY2FjaGVTZXJ2aWNlKCRyb290U2NvcGUsIGNydWRTZXJ2aWNlKSB7XHJcblx0XHR2YXIgdm0gPSB0aGlzOyAvLyBqc2hpbnQgaWdub3JlOiBsaW5lXHJcblx0XHR2bS5jYWxlbmRhcnMgPSBbXTtcclxuXHRcdHZtLmV2ZW50cyA9IFtdO1xyXG5cdFx0dm0ubGFiZWxzID0gW107XHJcblx0XHR2bS50YXNrcyA9IFtdO1xyXG5cclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGNhY2hlQWxsOiBjYWNoZUFsbCxcclxuXHRcdFx0Y2FjaGVDYWxlbmRhcnM6IGNhY2hlQ2FsZW5kYXJzLFxyXG5cdFx0XHRjYWNoZUV2ZW50czogY2FjaGVFdmVudHMsXHJcblx0XHRcdGNhY2hlTGFiZWxzOiBjYWNoZUxhYmVscyxcclxuXHRcdFx0Y2FjaGVUYXNrczogY2FjaGVUYXNrcyxcclxuXHJcblx0XHRcdGdldEFsbDogZ2V0QWxsLFxyXG5cdFx0XHRnZXRDYWxlbmRhcnM6IGdldENhbGVuZGFycyxcclxuXHRcdFx0Z2V0RXZlbnRzOiBnZXRFdmVudHMsXHJcblx0XHRcdGdldExhYmVsczogZ2V0TGFiZWxzLFxyXG5cdFx0XHRnZXRUYXNrczogZ2V0VGFza3NcclxuXHRcdH07XHJcblxyXG5cdFx0Ly8gVE9ETzogSWRlYWxseSBvbmUgQVBJIGNhbGwuXHJcblx0XHRmdW5jdGlvbiBjYWNoZUFsbCgpIHtcclxuXHRcdFx0Y2FjaGVDYWxlbmRhcnMoKTtcclxuXHRcdFx0Y2FjaGVFdmVudHMoKTtcclxuXHRcdFx0Y2FjaGVMYWJlbHMoKTtcclxuXHRcdFx0Y2FjaGVUYXNrcygpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGNhY2hlQ2FsZW5kYXJzKCkge1xyXG5cdFx0XHR2bS5jYWxlbmRhciA9IG5ldyBjcnVkU2VydmljZSgnY2FsZW5kYXInKTtcclxuXHRcdFx0dm0uY2FsZW5kYXIuZ2V0QnlVc2VyKClcclxuXHRcdFx0XHQudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xyXG5cdFx0XHRcdFx0dm0uY2FsZW5kYXJzID0gZ2V0UmVzdWx0KHJlc3BvbnNlKTtcclxuXHRcdFx0XHRcdCRyb290U2NvcGUuJGJyb2FkY2FzdCgndXBkYXRlQ2FsZW5kYXJzJyk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gY2FjaGVFdmVudHMoKSB7XHJcblx0XHRcdHZtLmV2ZW50ID0gbmV3IGNydWRTZXJ2aWNlKCdldmVudCcpO1xyXG5cdFx0XHR2bS5ldmVudC5nZXRCeVVzZXIoKVxyXG5cdFx0XHRcdC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcblx0XHRcdFx0XHR2bS5ldmVudHMgPSBnZXRSZXN1bHQocmVzcG9uc2UpO1xyXG5cdFx0XHRcdFx0JHJvb3RTY29wZS4kYnJvYWRjYXN0KCd1cGRhdGVFdmVudHMnKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBjYWNoZUxhYmVscygpIHtcclxuXHRcdFx0dm0ubGFiZWwgPSBuZXcgY3J1ZFNlcnZpY2UoJ2xhYmVsJyk7XHJcblx0XHRcdHZtLmxhYmVsLmdldEJ5VXNlcigpXHJcblx0XHRcdFx0LnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuXHRcdFx0XHRcdHZtLmxhYmVscyA9IGdldFJlc3VsdChyZXNwb25zZSk7XHJcblx0XHRcdFx0XHQkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3VwZGF0ZUxhYmVscycpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGNhY2hlVGFza3MoKSB7XHJcblx0XHRcdHZtLnRhc2sgPSBuZXcgY3J1ZFNlcnZpY2UoJ3Rhc2snKTtcclxuXHRcdFx0dm0udGFzay5nZXRCeVVzZXIoKVxyXG5cdFx0XHRcdC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcblx0XHRcdFx0XHR2bS50YXNrcyA9IGdldFJlc3VsdChyZXNwb25zZSk7XHJcblx0XHRcdFx0XHQkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3VwZGF0ZVRhc2tzJyk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gZ2V0UmVzdWx0KHJlc3BvbnNlKSB7XHJcblx0XHRcdHZhciByZXN1bHQgPSByZXNwb25zZS5kYXRhO1xyXG5cdFx0XHRyZXR1cm4gcmVzdWx0LnN1Y2Nlc3MgPyByZXN1bHQuZGF0YSA6IHJlc3VsdC50aXRsZTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBnZXRBbGwoKSB7XHJcblx0XHRcdHJldHVybiB7XHJcblx0XHRcdFx0Y2FsZW5kYXJzOiBnZXRDYWxlbmRhcnMoKSxcclxuXHRcdFx0XHRldmVudHM6IGdldEV2ZW50cygpLFxyXG5cdFx0XHRcdGxhYmVsczogZ2V0TGFiZWxzKCksXHJcblx0XHRcdFx0dGFza3M6IGdldFRhc2tzKClcclxuXHRcdFx0fTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBnZXRDYWxlbmRhcnMoKSB7XHJcblx0XHRcdHJldHVybiB2bS5jYWxlbmRhcnM7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gZ2V0RXZlbnRzKCkge1xyXG5cdFx0XHRyZXR1cm4gdm0uZXZlbnRzO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGdldExhYmVscygpIHtcclxuXHRcdFx0cmV0dXJuIHZtLmxhYmVscztcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBnZXRUYXNrcygpIHtcclxuXHRcdFx0cmV0dXJuIHZtLnRhc2tzO1xyXG5cdFx0fVxyXG5cdH1cclxufSkoKTtcclxuXG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHQvKipcclxuXHQqIFVzZWQgdG8gYWNjZXNzIHRoZSBhcGkgb2YgdGhlIHZhcmlvdXMgaXRlbSB0eXBlcy5cclxuXHQqIEFuIGluc3RhbmNlIG9mIGNydWQgbXVzdCBiZSBjcmVhdGVkIGluIG9yZGVyIHRvIHVzZSB0aGUgc2VydmljZS5cclxuXHQqXHJcblx0KiBBbGwgcHJvbWlzZXMgcmV0dXJuICdzdWNjZXNzJyBhbmQgZWl0aGVyICdkYXRhJyBvbiBzdWNjZXNzIG9yLCBvbiBlcnJvciwgJ3RpdGxlJ1xyXG5cdCogd2l0aCBhIGdlbmVyYWwgZXJyb3IgYW5kICdkZXRhaWxzJyB3aXRoIG1vcmUgZGV0YWlscy5cclxuXHQqL1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmZhY3RvcnkoJ2NydWRTZXJ2aWNlJywgY3J1ZFNlcnZpY2UpO1xyXG5cclxuXHRjcnVkU2VydmljZS4kaW5qZWN0ID0gWyckaHR0cCcsICckbG9nJ107XHJcblx0ZnVuY3Rpb24gY3J1ZFNlcnZpY2UoJGh0dHAsICRsb2cpIHtcclxuXHRcdHZhciBjcnVkID0gaW5pdDtcclxuXHRcdGNydWQucHJvdG90eXBlID0ge1xyXG5cdFx0XHRnZXQ6IGdldCxcclxuXHRcdFx0Z2V0QnlVc2VyOiBnZXRCeVVzZXIsXHJcblx0XHRcdGNyZWF0ZTogY3JlYXRlLFxyXG5cdFx0XHR1cGRhdGU6IHVwZGF0ZSxcclxuXHRcdFx0cmVtb3ZlOiByZW1vdmUsXHJcblx0XHRcdHJlbW92ZVdoZXJlOiByZW1vdmVXaGVyZSxcclxuXHRcdFx0cmVtb3ZlVW5lY2Vzc2FyeUtleXM6IHJlbW92ZVVuZWNlc3NhcnlLZXlzXHJcblx0XHR9O1xyXG5cclxuXHRcdHJldHVybiBjcnVkO1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0KiBJbml0aWFsaXplIHRoZSBiYXNlIHVybCB1c2luZyB0aGUgdHlwZSBvZiBpdGVtIHRvIGJlIGNhbGxlZCBvbi5cclxuXHRcdCogQWN0aXZpdGllcyBhbmQgdGhlaXIgcGFyZW50cyBoYXZlIGEgc3BlY2lmaWMgc3ViZm9sZGVyIHRvIGJlIHBvaW50ZWQgdG8sXHJcblx0XHQqIHdoaWxlIG90aGVycyBkbyBub3QuXHJcblx0XHQqXHJcblx0XHQqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFR5cGUgb2YgaXRlbS5cclxuXHRcdCovXHJcblx0XHRmdW5jdGlvbiBpbml0KHR5cGUpIHtcclxuXHRcdFx0LyoganNoaW50IGlnbm9yZTpzdGFydCAqL1xyXG5cdFx0XHR0aGlzLnR5cGUgPSB0eXBlO1xyXG5cdFx0XHR0aGlzLmJhc2UgPSAnYXBpLyc7XHJcblx0XHRcdHN3aXRjaCAodHlwZSkge1xyXG5cdFx0XHRcdGNhc2UgJ2V2ZW50JzpcclxuXHRcdFx0XHRjYXNlICdjYWxlbmRhcic6XHJcblx0XHRcdFx0XHR0aGlzLmJhc2UgKz0gJ2FjdGl2aXR5L2NhbGVuZGFyLyc7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRjYXNlICdsYWJlbCc6XHJcblx0XHRcdFx0Y2FzZSAndGFzayc6XHJcblx0XHRcdFx0XHR0aGlzLmJhc2UgKz0gJ2FjdGl2aXR5L3Rhc2svJztcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0XHR0aGlzLmJhc2UgKz0gdHlwZSArICcvJztcclxuXHRcdFx0fVxyXG5cdFx0XHR0aGlzLmJhc2UgKz0gdHlwZSArICdNYW5hZ2VyLnBocCc7XHJcblx0XHRcdC8qIGpzaGludCBpZ25vcmU6ZW5kICovXHJcblx0XHR9XHJcblxyXG5cdFx0LyoqXHJcblx0XHQqIEBwYXJhbVx0e3N0cmluZ31cdGlkXHRcdElEIG9mIGl0ZW0gdHlwZSB0byBnZXQuXHJcblx0XHQqIEByZXR1cm5cdHtzdHJpbmdbXX1cdFx0XHRQcm9taXNlIHdpdGggJ2RhdGEnID09IHF1ZXJ5IHJlc3VsdHMgb24gc3VjY2Vzcy5cclxuXHRcdCovXHJcblx0XHRmdW5jdGlvbiBnZXQoaWQpIHtcclxuXHRcdFx0cmV0dXJuICRodHRwLmdldCh0aGlzLmJhc2UgKyAnP2lkPScgKyBpZCkgLy8ganNoaW50IGlnbm9yZTpsaW5lXHJcblx0XHRcdFx0LnRoZW4ocHJvbWlzZUNvbXBsZXRlKVxyXG5cdFx0XHRcdC5jYXRjaChwcm9taXNlRmFpbGVkKTtcclxuXHRcdH1cclxuXHRcdC8qKlxyXG5cdFx0KiBAcmV0dXJuXHR7c3RyaW5nW119XHRcdFx0UHJvbWlzZSB3aXRoICdkYXRhJyA9PSBxdWVyeSByZXN1bHRzIG9uIHN1Y2Nlc3MuXHJcblx0XHQqL1xyXG5cdFx0ZnVuY3Rpb24gZ2V0QnlVc2VyKCkge1xyXG5cdFx0XHRyZXR1cm4gJGh0dHAuZ2V0KHRoaXMuYmFzZSArICc/Ynl1c2VyPXRydWUnKSAvLyBqc2hpbnQgaWdub3JlOmxpbmVcclxuXHRcdFx0XHQudGhlbihwcm9taXNlQ29tcGxldGUpXHJcblx0XHRcdFx0LmNhdGNoKHByb21pc2VGYWlsZWQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8qKlxyXG5cdFx0KiBAcGFyYW1cdHttaXhlZFtdfVx0ZGF0YVx0RGF0YSBvZiBpdGVtIHRvIGNyZWF0ZS5cclxuXHRcdCogQHJldHVyblx0e3N0cmluZ1tdfVx0XHRcdFByb21pc2Ugd2l0aCAnZGF0YScgPT09IDEgb24gc3VjY2Vzcy5cclxuXHRcdCovXHJcblx0XHRmdW5jdGlvbiBjcmVhdGUoZGF0YSkge1xyXG5cdFx0XHRkYXRhID0gdGhpcy5yZW1vdmVVbmVjZXNzYXJ5S2V5cyhkYXRhKTsgIC8vIGpzaGludCBpZ25vcmU6bGluZVxyXG5cdFx0XHRyZXR1cm4gJGh0dHAucG9zdCh0aGlzLmJhc2UsIGRhdGEpIC8vIGpzaGludCBpZ25vcmU6bGluZVxyXG5cdFx0XHRcdC50aGVuKHByb21pc2VDb21wbGV0ZSlcclxuXHRcdFx0XHQuY2F0Y2gocHJvbWlzZUZhaWxlZCk7XHJcblx0XHR9XHJcblxyXG5cdFx0LyoqXHJcblx0XHQqIEBwYXJhbVx0e3N0cmluZ31cdGlkXHRcdElEIG9mIGl0ZW0gdHlwZSB0byB1cGRhdGUuXHJcblx0XHQqIEBwYXJhbVx0e21peGVkW119XHRkYXRhXHREYXRhIG9mIGl0ZW0gdG8gdXBkYXRlLlxyXG5cdFx0KlxyXG5cdFx0KiBAcmV0dXJuXHR7c3RyaW5nW119XHRcdFx0UHJvbWlzZSB3aXRoICdkYXRhJyA9PT0gJzEnIG9uIHN1Y2Nlc3MuXHJcblx0XHQqL1xyXG5cdFx0ZnVuY3Rpb24gdXBkYXRlKGlkLCBkYXRhKSB7XHJcblx0XHRcdGRhdGEgPSB0aGlzLnJlbW92ZVVuZWNlc3NhcnlLZXlzKGRhdGEpOyAgLy8ganNoaW50IGlnbm9yZTpsaW5lXHJcblx0XHRcdHJldHVybiAkaHR0cC5wdXQodGhpcy5iYXNlICsgJz9pZD0nICsgaWQsIGRhdGEpIC8vIGpzaGludCBpZ25vcmU6bGluZVxyXG5cdFx0XHRcdC50aGVuKHByb21pc2VDb21wbGV0ZSlcclxuXHRcdFx0XHQuY2F0Y2gocHJvbWlzZUZhaWxlZCk7XHJcblx0XHR9XHJcblxyXG5cdFx0LyoqXHJcblx0XHQqIEBwYXJhbVx0e3N0cmluZ31cdGlkXHRcdElEIG9mIGl0ZW0gdHlwZSB0byBkZWxldGUuXHJcblx0XHQqIEByZXR1cm5cdHtzdHJpbmdbXX1cdFx0XHRQcm9taXNlIHdpdGggJ2RhdGEnID09PSAxIG9uIHN1Y2Nlc3MuXHJcblx0XHQqL1xyXG5cdFx0ZnVuY3Rpb24gcmVtb3ZlKGlkKSB7XHJcblx0XHRcdHJldHVybiAkaHR0cC5kZWxldGUodGhpcy5iYXNlICsgJz9pZD0nICsgaWQpIC8vIGpzaGludCBpZ25vcmU6bGluZVxyXG5cdFx0XHRcdC50aGVuKHByb21pc2VDb21wbGV0ZSlcclxuXHRcdFx0XHQuY2F0Y2gocHJvbWlzZUZhaWxlZCk7XHJcblx0XHR9XHJcblxyXG5cdFx0LyoqXHJcblx0XHQqIEBwYXJhbSBcdHtzdHJpbmd9XHR3aGVyZSBcdFdoZXJlIGNsYXVzZS5cclxuXHRcdCogQHJldHVyblx0e3N0cmluZ1tdfVx0XHRcdFByb21pc2Ugd2l0aCAnZGF0YScgPj0gMCBvbiBzdWNjZXNzLlxyXG5cdFx0Ki9cclxuXHRcdGZ1bmN0aW9uIHJlbW92ZVdoZXJlKHdoZXJlKSB7XHJcblx0XHRcdHJldHVybiAkaHR0cC5kZWxldGUodGhpcy5iYXNlICsgJz91c2V3aGVyZT10cnVlJndoZXJlPScgKyBlc2NhcGUod2hlcmUpKSAvLyBqc2hpbnQgaWdub3JlOmxpbmVcclxuXHRcdFx0XHQudGhlbihwcm9taXNlQ29tcGxldGUpXHJcblx0XHRcdFx0LmNhdGNoKHByb21pc2VGYWlsZWQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIHByb21pc2VDb21wbGV0ZShyZXNwb25zZSkge1xyXG5cdFx0XHRyZXR1cm4gcmVzcG9uc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gcHJvbWlzZUZhaWxlZChlcnJvcikge1xyXG5cdFx0XHQkbG9nLmVycm9yKGVycm9yKTtcclxuXHRcdFx0cmV0dXJuIHtcclxuXHRcdFx0XHRzdWNjZXNzOiAnZmFsc2UnLFxyXG5cdFx0XHRcdHRpdGxlOiAnRXJyb3Igd2hlbiBxdWVyeWluZyBzZXJ2ZXIuJyxcclxuXHRcdFx0XHRtZXNzYWdlOiBlcnJvclxyXG5cdFx0XHR9O1xyXG5cdFx0fVxyXG5cclxuXHRcdC8qKlxyXG5cdFx0KiBJdGVtIGRhdGEgcGFzc2VkIGluIG1heSBzdGlsbCBoYXZlIHRoZWlyIGlkcyBvciBhbGlhcyBmaWVsZHMgKGZvciBhY3Rpdml0aWVzKVxyXG5cdFx0KiBlbWJlZGRlZCwgd2hpY2ggd2lsbCBjYW4gY2F1c2UgZXJyb3JzIGluIHRoZSBTUUwuXHJcblx0XHQqXHJcblx0XHQqIEBwYXJhbVx0e21peGVkW119IGRhdGFcclxuXHRcdCogQHJldHVyblx0e21peGVkW119XHJcblx0XHQqL1xyXG5cdFx0ZnVuY3Rpb24gcmVtb3ZlVW5lY2Vzc2FyeUtleXMoZGF0YSkge1xyXG5cdFx0XHR2YXIgdG9EZWxldGUgPSBbJ2lkJywgJ3BlcnNvbl9pZCcsIHRoaXMudHlwZSArICdfaWQnLCAnYWN0aXZpdHlfaW5mb19pZCcsICdwYXJlbnRfbmFtZSddOyAgLy8ganNoaW50IGlnbm9yZTpsaW5lXHJcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdG9EZWxldGUubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0XHRkZWxldGUgZGF0YVt0b0RlbGV0ZVtpXV07XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIGRhdGE7XHJcblx0XHR9XHJcblx0fVxyXG59KSgpO1xyXG5cbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdC8qKlxyXG5cdCogVXNlZCB0byBhY2Nlc3Mgc2Vzc2lvbiB2YXJpYWJsZXMuXHJcblx0Ki9cclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5mYWN0b3J5KCdzZXNzaW9uU2VydmljZScsIHNlc3Npb25TZXJ2aWNlKTtcclxuXHJcblx0c2Vzc2lvblNlcnZpY2UuJGluamVjdCA9IFsnJGh0dHAnLCAnJGxvZyddO1xyXG5cdGZ1bmN0aW9uIHNlc3Npb25TZXJ2aWNlKCRodHRwLCAkbG9nKSB7XHJcblx0XHR2YXIgdm0gPSB0aGlzOyAgLy8ganNoaW50IGlnbm9yZTpsaW5lXHJcblx0XHR2bS5iYXNlID0gJ2FwaS9zZXNzaW9uL3Nlc3Npb25WYXJNYW5hZ2VyLnBocD92YXI9JztcclxuXHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRnZXRWYXI6IGdldFZhcixcclxuXHRcdFx0c2V0VmFyOiBzZXRWYXJcclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQqIEBwYXJhbVx0e3N0cmluZ30gJG5hbWVcdFZhcmlhYmxlIG5hbWUgdG8gZ2V0IGZyb20gc2Vzc2lvbi5cclxuXHRcdCogQHJldHVyblx0e3N0cmluZ30gXHRcdFByb21pc2Ugb3IgZXJyb3Igb24gZmFpbC5cclxuXHRcdCovXHJcblx0XHRmdW5jdGlvbiBnZXRWYXIoJG5hbWUpIHtcclxuXHRcdFx0cmV0dXJuICRodHRwLmdldCh2bS5iYXNlICsgJG5hbWUpXHJcblx0XHRcdFx0LnRoZW4ocHJvbWlzZUNvbXBsZXRlKVxyXG5cdFx0XHRcdC5jYXRjaChwcm9taXNlRmFpbGVkKTtcclxuXHRcdH1cclxuXHJcblx0XHQvKipcclxuXHRcdCogQHBhcmFtXHR7c3RyaW5nfSAkbmFtZVx0VmFyaWFibGUgbmFtZSB0byBnZXQgZnJvbSBzZXNzaW9uLlxyXG5cdFx0KiBAcmV0dXJuXHR7c3RyaW5nfSBcdFx0UHJvbWlzZSBvciBlcnJvciBvbiBmYWlsLlxyXG5cdFx0Ki9cclxuXHRcdGZ1bmN0aW9uIHNldFZhcigkbmFtZSwgJHZhbHVlKSB7XHJcblx0XHRcdHJldHVybiAkaHR0cC5wb3N0KHZtLmJhc2UgKyAkbmFtZSwgJHZhbHVlKVxyXG5cdFx0XHRcdC50aGVuKHByb21pc2VDb21wbGV0ZSlcclxuXHRcdFx0XHQuY2F0Y2gocHJvbWlzZUZhaWxlZCk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gcHJvbWlzZUNvbXBsZXRlKHJlc3BvbnNlKSB7XHJcblx0XHRcdHJldHVybiByZXNwb25zZTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBwcm9taXNlRmFpbGVkKGVycm9yKSB7XHJcblx0XHRcdCRsb2cuZXJyb3IoZXJyb3IpO1xyXG5cdFx0XHRyZXR1cm4ge1xyXG5cdFx0XHRcdHN1Y2Nlc3M6ICdmYWxzZScsXHJcblx0XHRcdFx0dGl0bGU6ICdFcnJvciB3aGVuIGFjY2Vzc2luZyB2YXJpYWJsZS4nLFxyXG5cdFx0XHRcdG1lc3NhZ2U6IGVycm9yXHJcblx0XHRcdH07XHJcblx0XHR9XHJcblx0fVxyXG59KSgpO1xyXG5cbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuY29udHJvbGxlcignRXZlbnRzQ29udHJvbGxlcicsIEV2ZW50c0NvbnRyb2xsZXIpO1xyXG5cclxuXHRFdmVudHNDb250cm9sbGVyLiRpbmplY3QgPSBbJyRyb290U2NvcGUnLCAnbW9tZW50JywgJ2NhbGVuZGFyV2lkZ2V0U2VydmljZScsICdjYWxlbmRhclNlcnZpY2UnLCAnZXZlbnRzU2VydmljZScsICdldmVudE1vZGFsU2VydmljZSddO1xyXG5cdGZ1bmN0aW9uIEV2ZW50c0NvbnRyb2xsZXIoJHJvb3RTY29wZSwgbW9tZW50LCBjYWxlbmRhcldpZGdldFNlcnZpY2UsIGNhbGVuZGFyU2VydmljZSwgZXZlbnRzU2VydmljZSwgZXZlbnRNb2RhbFNlcnZpY2UpIHtcclxuXHRcdHZhciB2bSA9IHRoaXM7XHJcblx0XHR2bS5ldmVudHMgPSBbXTtcclxuXHRcdHZtLmNhbGVuZGFyID0gW107XHJcblxyXG5cdFx0dm0udG9kYXkgPSBudWxsO1xyXG5cdFx0dm0uc2VsZWN0ZWREYXkgPSBudWxsO1xyXG5cdFx0dm0ubW9udGggPSBudWxsO1xyXG5cclxuXHRcdHZtLmlzU2FtZURheUFzU2VsZWN0ZWQgPSBpc1NhbWVEYXlBc1NlbGVjdGVkO1xyXG5cdFx0dm0uZ2V0RW5kT2ZEYXkgPSBnZXRFbmRPZkRheTtcclxuXHRcdHZtLnNlbGVjdERheSA9IHNlbGVjdERheTtcclxuXHRcdHZtLnNob3dFdmVudE1vZGFsID0gc2hvd0V2ZW50TW9kYWw7XHJcblx0XHR2bS5sYXN0TW9udGggPSBsYXN0TW9udGg7XHJcblx0XHR2bS5uZXh0TW9udGggPSBuZXh0TW9udGg7XHJcblxyXG5cdFx0YWN0aXZhdGUoKTtcclxuXHJcblx0XHRmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcclxuXHRcdFx0dXBkYXRlQ2FsZW5kYXJzKCk7XHJcblx0XHRcdHVwZGF0ZUV2ZW50cygpO1xyXG5cclxuXHRcdFx0JHJvb3RTY29wZS4kb24oJ3VwZGF0ZUNhbGVuZGFycycsIHVwZGF0ZUNhbGVuZGFycyk7XHJcblx0XHRcdCRyb290U2NvcGUuJG9uKCd1cGRhdGVFdmVudHMnLCB1cGRhdGVFdmVudHMpO1xyXG5cclxuXHRcdFx0dm0udG9kYXkgPSBjYWxlbmRhcldpZGdldFNlcnZpY2UuZ2V0VG9kYXkoKTtcclxuXHRcdFx0dm0uc2VsZWN0ZWREYXkgPSB2bS50b2RheTtcclxuXHRcdFx0dm0ubW9udGggPSBjYWxlbmRhcldpZGdldFNlcnZpY2UuZ2V0TW9udGgodm0udG9kYXkpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGdldEVuZE9mRGF5KGRheSkge1xyXG5cdFx0XHRyZXR1cm4gY2FsZW5kYXJXaWRnZXRTZXJ2aWNlLmdldEVuZE9mRGF5KGRheSk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gaXNTYW1lRGF5QXNTZWxlY3RlZChkYXkpIHtcclxuXHRcdFx0cmV0dXJuIGNhbGVuZGFyV2lkZ2V0U2VydmljZS5pc1NhbWVEYXkoZGF5LCB2bS5zZWxlY3RlZERheSk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gc2VsZWN0RGF5KGRheSkge1xyXG5cdFx0XHR2bS5zZWxlY3RlZERheSA9IGRheS5mdWxsRGF0ZTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBzaG93RXZlbnRNb2RhbChldmVudCkge1xyXG5cdFx0XHRldmVudE1vZGFsU2VydmljZS5vcGVuRXZlbnRNb2RhbChldmVudCwgdm0uY2FsZW5kYXJzKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBsYXN0TW9udGgoKSB7XHJcblx0XHRcdHZtLm1vbnRoID0gY2FsZW5kYXJXaWRnZXRTZXJ2aWNlLmxhc3RNb250aCh2bS5tb250aCk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gbmV4dE1vbnRoKCkge1xyXG5cdFx0XHR2bS5tb250aCA9IGNhbGVuZGFyV2lkZ2V0U2VydmljZS5uZXh0TW9udGgodm0ubW9udGgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIHVwZGF0ZUNhbGVuZGFycygpIHtcclxuXHRcdFx0dm0uY2FsZW5kYXJzID0gY2FsZW5kYXJTZXJ2aWNlLmdldENhbGVuZGFycygpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIHVwZGF0ZUV2ZW50cygpIHtcclxuXHRcdFx0dm0uZXZlbnRzID0gZXZlbnRzU2VydmljZS5nZXRFdmVudHMoKTtcclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmRpcmVjdGl2ZSgnc3BFdmVudHMnLCBldmVudHNEaXJlY3RpdmUpO1xyXG5cclxuXHRmdW5jdGlvbiBldmVudHNEaXJlY3RpdmUoKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHR0ZW1wbGF0ZVVybDogJ21vZHVsZXMvZXZlbnRzL2V2ZW50cy5odG1sJyxcclxuXHRcdFx0Y29udHJvbGxlcjogJ0V2ZW50c0NvbnRyb2xsZXInLFxyXG5cdFx0XHRjb250cm9sbGVyQXM6ICd2bScsXHJcblx0XHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcclxuXHRcdH07XHJcblx0fVxyXG59KSgpO1xuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5mYWN0b3J5KCdldmVudHNTZXJ2aWNlJywgZXZlbnRzU2VydmljZSk7XHJcblxyXG5cdGV2ZW50c1NlcnZpY2UuJGluamVjdCA9IFsnY3J1ZFNlcnZpY2UnLCAnY2FjaGVTZXJ2aWNlJ107XHJcblx0ZnVuY3Rpb24gZXZlbnRzU2VydmljZShjcnVkU2VydmljZSwgY2FjaGVTZXJ2aWNlKSB7XHJcblx0XHR2YXIgdm0gPSB0aGlzOyAgLy8ganNoaW50IGlnbm9yZTpsaW5lXHJcblx0XHR2bS5ldmVudCA9IG5ldyBjcnVkU2VydmljZSgnZXZlbnQnKTtcclxuXHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRjcmVhdGVFdmVudDogY3JlYXRlRXZlbnQsXHJcblx0XHRcdGNyZWF0ZU9yVXBkYXRlRXZlbnQ6IGNyZWF0ZU9yVXBkYXRlRXZlbnQsXHJcblx0XHRcdGRlbGV0ZUV2ZW50OiBkZWxldGVFdmVudCxcclxuXHRcdFx0Z2V0RXZlbnRzOiBnZXRFdmVudHMsXHJcblx0XHRcdHVwZGF0ZUV2ZW50OiB1cGRhdGVFdmVudFxyXG5cdFx0fTtcclxuXHJcblx0XHRmdW5jdGlvbiBjcmVhdGVFdmVudChldmVudCkge1xyXG5cdFx0XHRyZXR1cm4gdm0uZXZlbnQuY3JlYXRlKGV2ZW50KS50aGVuKHByb21pc2VDb21wbGV0ZSk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gY3JlYXRlT3JVcGRhdGVFdmVudChldmVudCkge1xyXG5cdFx0XHRpZiAoIWV2ZW50LmV2ZW50X2lkKSB7XHJcblx0XHRcdFx0cmV0dXJuIGNyZWF0ZUV2ZW50KGV2ZW50KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gdXBkYXRlRXZlbnQoZXZlbnQuZXZlbnRfaWQsIGV2ZW50KTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBkZWxldGVFdmVudChpZCkge1xyXG5cdFx0XHRyZXR1cm4gdm0uZXZlbnQucmVtb3ZlKGlkKS50aGVuKHByb21pc2VDb21wbGV0ZSk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gZ2V0RXZlbnRzKCkge1xyXG5cdFx0XHRyZXR1cm4gY2FjaGVTZXJ2aWNlLmdldEV2ZW50cygpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIHVwZGF0ZUV2ZW50KGlkLCBldmVudCkge1xyXG5cdFx0XHRyZXR1cm4gdm0uZXZlbnQudXBkYXRlKGlkLCBldmVudCkudGhlbihwcm9taXNlQ29tcGxldGUpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIHByb21pc2VDb21wbGV0ZShyZXNwb25zZSkge1xyXG5cdFx0XHR2YXIgcmVzID0gcmVzcG9uc2UuZGF0YTtcclxuXHRcdFx0aWYgKHJlcy5zdWNjZXNzKSB7XHJcblx0XHRcdFx0Y2FjaGVTZXJ2aWNlLmNhY2hlRXZlbnRzKCk7XHJcblx0XHRcdFx0cmV0dXJuIHJlcy5kYXRhO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXMudGl0bGU7XHJcblx0XHR9XHJcblx0fVxyXG59KSgpO1xyXG5cbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdC8qKlxyXG5cdCogVG8gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGF1dG9mb2N1cyBhdHRyaWJ1dGUgdG8gYXV0by1mb2N1c1xyXG5cdCogbW9kYWwgaW5wdXRzLlxyXG5cdCovXHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuZGlyZWN0aXZlKCdzcEF1dG9Gb2N1cycsIGF1dG9Gb2N1c0RpcmVjdGl2ZSk7XHJcblxyXG5cdGZ1bmN0aW9uIGF1dG9Gb2N1c0RpcmVjdGl2ZSgpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHJlc3RyaWN0OiAnQScsXHJcblx0XHRcdGxpbms6IGxpbmtcclxuXHRcdH07XHJcblxyXG5cdFx0ZnVuY3Rpb24gbGluayhzY29wZSwgZWxlbWVudCwgYXR0cnMsIG5nTW9kZWwpIHtcclxuXHRcdFx0ZWxlbWVudFswXS5mb2N1cygpO1xyXG5cdFx0fVxyXG5cdH1cclxufSkoKTtcbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdC8qKlxyXG5cdCogQ29tcGFyZSBhbiBpbnB1dCBmaWVsZCB0byBhbm90aGVyIGZpZWxkLCBkZXRlcm1pbmVkIGJ5IHRoZSBkZXYuXHJcblx0Ki9cclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5kaXJlY3RpdmUoJ3NwQ29tcGFyZVRvJywgY29tcGFyZVRvRGlyZWN0aXZlKTtcclxuXHJcblx0ZnVuY3Rpb24gY29tcGFyZVRvRGlyZWN0aXZlKCkge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0cmVxdWlyZTogJ25nTW9kZWwnLFxyXG5cdFx0XHRzY29wZToge1xyXG5cdFx0XHRcdG90aGVyTW9kZWw6ICc9c3BDb21wYXJlVG8nXHJcblx0XHRcdH0sXHJcblx0XHRcdGxpbms6IGxpbmtcclxuXHRcdH07XHJcblxyXG5cdFx0ZnVuY3Rpb24gbGluayhzY29wZSwgZWxlbWVudCwgYXR0cnMsIG5nTW9kZWwpIHtcclxuXHRcdFx0dmFyIHVuYmluZFdhdGNoID0gc2NvcGUuJHdhdGNoKCdvdGhlck1vZGVsJywgdmFsaWRhdGVPbkNoYW5nZSk7XHJcblx0XHRcdG5nTW9kZWwuJHZhbGlkYXRvcnMuc3BDb21wYXJlVG8gPSBjb21wYXJlVmFsdWVzO1xyXG5cdFx0XHRlbGVtZW50Lm9uKCckZGVzdHJveScsIGNsZWFuVXApO1xyXG5cclxuXHRcdFx0ZnVuY3Rpb24gY2xlYW5VcCgpIHtcclxuXHRcdFx0XHR1bmJpbmRXYXRjaCgpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRmdW5jdGlvbiBjb21wYXJlVmFsdWVzKHZpZXdWYWx1ZSkge1xyXG5cdFx0XHRcdHJldHVybiAodmlld1ZhbHVlID09PSBzY29wZS5vdGhlck1vZGVsLiR2aWV3VmFsdWUpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRmdW5jdGlvbiB2YWxpZGF0ZU9uQ2hhbmdlKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xyXG5cdFx0XHRcdG5nTW9kZWwuJHZhbGlkYXRlKCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmNvbnRyb2xsZXIoJ01vZGFsQ29udHJvbGxlcicsIE1vZGFsQ29udHJvbGxlcik7XHJcblxyXG5cdE1vZGFsQ29udHJvbGxlci4kaW5qZWN0ID0gWyckdWliTW9kYWxJbnN0YW5jZScsICdncm91cHMnLCAnaXRlbSddO1xyXG5cdGZ1bmN0aW9uIE1vZGFsQ29udHJvbGxlcigkdWliTW9kYWxJbnN0YW5jZSwgZ3JvdXBzLCBpdGVtKSB7XHJcblx0XHR2YXIgdm0gPSB0aGlzO1xyXG5cdFx0dm0uZ3JvdXBzID0gZ3JvdXBzO1xyXG5cdFx0dm0uaXRlbSA9IGl0ZW07XHJcblxyXG5cdFx0dm0uY2FuY2VsID0gY2FuY2VsO1xyXG5cdFx0dm0uY2xvc2UgPSBjbG9zZTtcclxuXHRcdHZtLmNvbmZpcm0gPSBjb25maXJtO1xyXG5cdFx0dm0ucmVtb3ZlID0gcmVtb3ZlO1xyXG5cclxuXHRcdGZ1bmN0aW9uIGNhbmNlbCgpIHtcclxuXHRcdFx0JHVpYk1vZGFsSW5zdGFuY2UuZGlzbWlzcygnY2FuY2VsJyk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gY2xvc2UoKSB7XHJcblx0XHRcdCR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gY29uZmlybShkYXRhKSB7XHJcblx0XHRcdCR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKGRhdGEpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIHJlbW92ZShkYXRhKSB7XHJcblx0XHRcdCR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoZGF0YSk7XHJcblx0XHR9XHJcblx0fVxyXG59KSgpO1xuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5jb250cm9sbGVyKCdSZWN1cnJlbmNlQ29udHJvbGxlcicsIFJlY3VycmVuY2VDb250cm9sbGVyKTtcclxuXHJcblx0UmVjdXJyZW5jZUNvbnRyb2xsZXIuJGluamVjdCA9IFsncmVjdXJyZW5jZU1vZGFsU2VydmljZSddO1xyXG5cdGZ1bmN0aW9uIFJlY3VycmVuY2VDb250cm9sbGVyKHJlY3VycmVuY2VNb2RhbFNlcnZpY2UpIHtcclxuXHRcdHZhciByYyA9IHRoaXM7XHJcblx0XHRyYy5zaG93UmVjdXJyZW5jZU1vZGFsID0gc2hvd1JlY3VycmVuY2VNb2RhbDtcclxuXHJcblx0XHRmdW5jdGlvbiBzaG93UmVjdXJyZW5jZU1vZGFsKCkge1xyXG5cdFx0XHRpZiAocmMuaXRlbS5yZWN1cnJlbmNlKSB7XHJcblx0XHRcdFx0cmVjdXJyZW5jZU1vZGFsU2VydmljZS5vcGVuUmVjdXJyZW5jZU1vZGFsKHJjLml0ZW0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59KSgpO1xuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5kaXJlY3RpdmUoJ3NwUmVwZWF0JywgcmVjdXJyZW5jZURpcmVjdGl2ZSk7XHJcblxyXG5cdGZ1bmN0aW9uIHJlY3VycmVuY2VEaXJlY3RpdmUoKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHR0ZW1wbGF0ZVVybDogJ21vZHVsZXMvcmVjdXJyZW5jZS9yZWN1cnJlbmNlLmh0bWwnLFxyXG5cdFx0XHRjb250cm9sbGVyOiAnUmVjdXJyZW5jZUNvbnRyb2xsZXInLFxyXG5cdFx0XHRjb250cm9sbGVyQXM6ICdyYycsXHJcblx0XHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXHJcblx0XHRcdHNjb3BlOiB7XHJcblx0XHRcdFx0aXRlbTogJz0nXHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0fVxyXG59KSgpO1xuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5mYWN0b3J5KCdyZWN1cnJlbmNlU2VydmljZScsIHJlY3VycmVuY2VTZXJ2aWNlKTtcclxuXHJcblx0ZnVuY3Rpb24gcmVjdXJyZW5jZVNlcnZpY2UoKSB7XHJcblx0XHR2YXIgcmVjdXJyZW5jZUNvbHMgPSB7XHJcblx0XHRcdGZyZXE6IFsnaG91cmx5JywgJ2RhaWx5JywgJ3dlZWtseScsICdtb250aGx5JywgJ3llYXJseSddLFxyXG5cdFx0XHRkYXlzOiBbJ21vJywgJ3R1JywgJ3dlJywgJ3RoJywgJ2ZyJywgJ3NhJywgJ3N1J10sXHJcblx0XHRcdGJ5OiBbJ2J5X2hvdXInLCAnYnlfZGF5JywgJ2J5X21vbnRoX2RheScsICdieV95ZWFyX2RheScsICdieV93ZWVrX25vJywgJ2J5X21vbnRoJ11cclxuXHRcdH07XHJcblxyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0Y2xlYXJSZWN1cnJlbmNlOiBjbGVhclJlY3VycmVuY2UsXHJcblx0XHRcdGNvbnN0cnVjdFJlY3VycmVuY2U6IGNvbnN0cnVjdFJlY3VycmVuY2VcclxuXHRcdH07XHJcblxyXG5cdFx0ZnVuY3Rpb24gY2xlYXJSZWN1cnJlbmNlKGl0ZW0pIHtcclxuXHRcdFx0aXRlbS5yZWN1cnJlbmNlID0gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gY29uc3RydWN0UmVjdXJyZW5jZShpdGVtKSB7XHJcblxyXG5cdFx0fVxyXG5cdH1cclxufSkoKTtcclxuXG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmNvbnRyb2xsZXIoJ1Rhc2tzQ29udHJvbGxlcicsIFRhc2tzQ29udHJvbGxlcik7XHJcblxyXG5cdFRhc2tzQ29udHJvbGxlci4kaW5qZWN0ID0gWyckcm9vdFNjb3BlJywgJ3Rhc2tzU2VydmljZScsICdsYWJlbFNlcnZpY2UnLCAndGFza01vZGFsU2VydmljZSddO1xyXG5cdGZ1bmN0aW9uIFRhc2tzQ29udHJvbGxlcigkcm9vdFNjb3BlLCB0YXNrc1NlcnZpY2UsIGxhYmVsU2VydmljZSwgdGFza01vZGFsU2VydmljZSkge1xyXG5cdFx0dmFyIHZtID0gdGhpcztcclxuXHRcdHZtLmxhYmVscyA9IFtdO1xyXG5cdFx0dm0udGFza3MgPSBbXTtcclxuXHRcdHZtLnNob3dUYXNrTW9kYWwgPSBzaG93VGFza01vZGFsO1xyXG5cdFx0dm0udG9nZ2xlQ29tcGxldGVkID0gdG9nZ2xlQ29tcGxldGVkO1xyXG5cclxuXHRcdGFjdGl2YXRlKCk7XHJcblxyXG5cdFx0ZnVuY3Rpb24gYWN0aXZhdGUoKSB7XHJcblx0XHRcdHVwZGF0ZUxhYmVscygpO1xyXG5cdFx0XHR1cGRhdGVUYXNrcygpO1xyXG5cclxuXHRcdFx0JHJvb3RTY29wZS4kb24oJ3VwZGF0ZUxhYmVscycsIHVwZGF0ZUxhYmVscyk7XHJcblx0XHRcdCRyb290U2NvcGUuJG9uKCd1cGRhdGVUYXNrcycsIHVwZGF0ZVRhc2tzKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBzaG93VGFza01vZGFsKHRhc2spIHtcclxuXHRcdFx0dGFza01vZGFsU2VydmljZS5vcGVuVGFza01vZGFsKHRhc2ssIHZtLmxhYmVscyk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gdG9nZ2xlQ29tcGxldGVkKHRhc2spIHtcclxuXHRcdFx0dGFza3NTZXJ2aWNlLnRvZ2dsZUNvbXBsZXRlZCh0YXNrKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiB1cGRhdGVMYWJlbHMoKSB7XHJcblx0XHRcdHZtLmxhYmVscyA9IGxhYmVsU2VydmljZS5nZXRMYWJlbHMoKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiB1cGRhdGVUYXNrcygpIHtcclxuXHRcdFx0dm0udGFza3MgPSB0YXNrc1NlcnZpY2UuZ2V0VGFza3MoKTtcclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmRpcmVjdGl2ZSgnc3BUYXNrcycsIHRhc2tzRGlyZWN0aXZlKTtcclxuXHJcblx0ZnVuY3Rpb24gdGFza3NEaXJlY3RpdmUoKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHR0ZW1wbGF0ZVVybDogJ21vZHVsZXMvdGFza3MvdGFza3MuaHRtbCcsXHJcblx0XHRcdGNvbnRyb2xsZXI6ICdUYXNrc0NvbnRyb2xsZXInLFxyXG5cdFx0XHRjb250cm9sbGVyQXM6ICd2bScsXHJcblx0XHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXHJcblx0XHRcdHNjb3BlOiB7XHJcblx0XHRcdFx0b3JkZXI6ICc9JyxcclxuXHRcdFx0XHRkYXlzOiAnPXdpdGhpbkRheXMnLFxyXG5cdFx0XHRcdGluTGFiZWxzOiAnPWluR3JvdXBzJ1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdH1cclxufSkoKTtcbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuZmFjdG9yeSgndGFza3NTZXJ2aWNlJywgdGFza3NTZXJ2aWNlKTtcclxuXHJcblx0dGFza3NTZXJ2aWNlLiRpbmplY3QgPSBbJ2NydWRTZXJ2aWNlJywgJ2NhY2hlU2VydmljZSddO1xyXG5cdGZ1bmN0aW9uIHRhc2tzU2VydmljZShjcnVkU2VydmljZSwgY2FjaGVTZXJ2aWNlKSB7XHJcblx0XHR2YXIgdm0gPSB0aGlzOyAgLy8ganNoaW50IGlnbm9yZTpsaW5lXHJcblx0XHR2bS50YXNrID0gbmV3IGNydWRTZXJ2aWNlKCd0YXNrJyk7XHJcblxyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0Y3JlYXRlVGFzazogY3JlYXRlVGFzayxcclxuXHRcdFx0Y3JlYXRlT3JVcGRhdGVUYXNrOiBjcmVhdGVPclVwZGF0ZVRhc2ssXHJcblx0XHRcdGRlbGV0ZVRhc2s6IGRlbGV0ZVRhc2ssXHJcblx0XHRcdGdldFRhc2tzOiBnZXRUYXNrcyxcclxuXHRcdFx0dG9nZ2xlQ29tcGxldGVkOiB0b2dnbGVDb21wbGV0ZWQsXHJcblx0XHRcdHVwZGF0ZVRhc2s6IHVwZGF0ZVRhc2tcclxuXHRcdH07XHJcblxyXG5cdFx0ZnVuY3Rpb24gY3JlYXRlVGFzayh0YXNrKSB7XHJcblx0XHRcdHJldHVybiB2bS50YXNrLmNyZWF0ZSh0YXNrKS50aGVuKHByb21pc2VDb21wbGV0ZSk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gY3JlYXRlT3JVcGRhdGVUYXNrKHRhc2spIHtcclxuXHRcdFx0aWYgKCF0YXNrLnRhc2tfaWQpIHtcclxuXHRcdFx0XHRyZXR1cm4gY3JlYXRlVGFzayh0YXNrKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gdXBkYXRlVGFzayh0YXNrLnRhc2tfaWQsIHRhc2spO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGRlbGV0ZVRhc2soaWQpIHtcclxuXHRcdFx0cmV0dXJuIHZtLnRhc2sucmVtb3ZlKGlkKS50aGVuKHByb21pc2VDb21wbGV0ZSk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gZ2V0VGFza3MoKSB7XHJcblx0XHRcdHJldHVybiBjYWNoZVNlcnZpY2UuZ2V0VGFza3MoKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiB0b2dnbGVDb21wbGV0ZWQodGFzaykge1xyXG5cdFx0XHR0YXNrLmNvbXBsZXRlZCA9ICFwYXJzZUludCh0YXNrLmNvbXBsZXRlZCk7XHJcblx0XHRcdHJldHVybiB1cGRhdGVUYXNrKHRhc2sudGFza19pZCwgdGFzaykudGhlbihnZXRUYXNrcyk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gdXBkYXRlVGFzayhpZCwgdGFzaykge1xyXG5cdFx0XHRyZXR1cm4gdm0udGFzay51cGRhdGUoaWQsIHRhc2spLnRoZW4ocHJvbWlzZUNvbXBsZXRlKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBwcm9taXNlQ29tcGxldGUocmVzcG9uc2UpIHtcclxuXHRcdFx0dmFyIHJlcyA9IHJlc3BvbnNlLmRhdGE7XHJcblx0XHRcdGlmIChyZXMuc3VjY2Vzcykge1xyXG5cdFx0XHRcdGNhY2hlU2VydmljZS5jYWNoZVRhc2tzKCk7XHJcblx0XHRcdFx0cmV0dXJuIHJlcy5kYXRhO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXMudGl0bGU7XHJcblx0XHR9XHJcblx0fVxyXG59KSgpO1xyXG5cbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuY29udHJvbGxlcignVXBsb2FkQ29udHJvbGxlcicsIFVwbG9hZENvbnRyb2xsZXIpO1xyXG5cclxuXHRVcGxvYWRDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckaHR0cCcsICd1cGxvYWRTZXJ2aWNlJ107XHJcblx0ZnVuY3Rpb24gVXBsb2FkQ29udHJvbGxlcigkc2NvcGUsICRodHRwLCB1cGxvYWRTZXJ2aWNlKSB7XHJcblx0XHR2YXIgdWMgPSB0aGlzO1xyXG5cdFx0dWMudXBsb2FkRmlsZSA9IHVwbG9hZEZpbGU7XHJcblxyXG5cdFx0ZnVuY3Rpb24gdXBsb2FkRmlsZShmaWxlLCBvbGRGaWxlKSB7XHJcblx0XHRcdHJldHVybiB1cGxvYWRTZXJ2aWNlLnVwbG9hZEZpbGUoZmlsZSlcclxuXHRcdFx0XHQudGhlbihmdW5jdGlvbihmaWxlUGF0aCkgeyByZXR1cm4gZmlsZVBhdGg7IH0pO1xyXG5cdFx0fVxyXG5cdH1cclxufSkoKTtcbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuZGlyZWN0aXZlKCdzcEZpbGVDaGFuZ2UnLCB1cGxvYWREaXJlY3RpdmUpO1xyXG5cclxuXHR1cGxvYWREaXJlY3RpdmUuJGluamVjdCA9IFsnJHBhcnNlJ107XHJcblx0ZnVuY3Rpb24gdXBsb2FkRGlyZWN0aXZlKCRwYXJzZSkge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0cmVzdHJpY3Q6ICdBJyxcclxuXHRcdFx0Y29udHJvbGxlcjogJ1VwbG9hZENvbnRyb2xsZXInLFxyXG5cdFx0XHRjb250cm9sbGVyQXM6ICd1YycsXHJcblx0XHRcdGxpbms6IGxpbmssXHJcblx0XHRcdHNjb3BlOiB7XHJcblx0XHRcdFx0c3BGaWxlQ2hhbmdlOiAnPScsXHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0ZnVuY3Rpb24gbGluayhzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcclxuXHRcdFx0dmFyIG1heEZpbGVTaXplID0gMiAqIDEwMjQgKiAxMDI0O1xyXG5cdFx0XHR2YXIgZmlsZU1vZGVsID0gJHBhcnNlKGF0dHJzLnNwRmlsZUNoYW5nZSk7XHJcblx0XHRcdGVsZW1lbnRbMF0uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZmlsZUhhbmRsZXIsIGZhbHNlKTtcclxuXHJcblx0XHRcdGZ1bmN0aW9uIGZpbGVIYW5kbGVyKGV2ZW50KSB7XHJcblx0XHRcdFx0c2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0dmFyIGZpbGUgPSBlbGVtZW50WzBdLmZpbGVzWzBdO1xyXG5cclxuXHRcdFx0XHRcdGlmIChmaWxlLnNpemUgPD0gbWF4RmlsZVNpemUpIHtcclxuXHRcdFx0XHRcdFx0c2NvcGUudWMudXBsb2FkRmlsZShmaWxlKVxyXG5cdFx0XHRcdFx0XHRcdC50aGVuKGZ1bmN0aW9uKGZpbGVQYXRoKSB7IHNjb3BlLnNwRmlsZUNoYW5nZSA9IGZpbGVQYXRoOyB9KTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdGFsZXJ0KFwiRmlsZSBtdXN0IGJlIGxlc3MgdGhhbiBcIiArIChtYXhGaWxlU2l6ZSAvIDEwMjQgLyAxMDI0KSArIFwiTUIuXCIpOy8vIGpzaGludCBpZ25vcmU6bGluZVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59KSgpO1xuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5mYWN0b3J5KCd1cGxvYWRTZXJ2aWNlJywgdXBsb2FkU2VydmljZSk7XHJcblxyXG5cdHVwbG9hZFNlcnZpY2UuJGluamVjdCA9IFsnJGh0dHAnLCAnJGxvZyddO1xyXG5cdGZ1bmN0aW9uIHVwbG9hZFNlcnZpY2UoJGh0dHAsICRsb2cpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHVwbG9hZEZpbGU6IHVwbG9hZEZpbGVcclxuXHRcdH07XHJcblxyXG5cdFx0ZnVuY3Rpb24gdXBsb2FkRmlsZShmaWxlKSB7XHJcblx0XHRcdHZhciBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xyXG5cdFx0XHRmb3JtRGF0YS5hcHBlbmQoJ2ZpbGUnLCBmaWxlKTtcclxuXHJcblx0XHRcdHJldHVybiAkaHR0cC5wb3N0KCdhcGkvdXBsb2FkL3VwbG9hZE1hbmFnZXIucGhwJywgZm9ybURhdGEsIHtcclxuXHRcdFx0XHR0cmFuc2Zvcm1SZXF1ZXN0OiBhbmd1bGFyLmlkZW50aXR5LFxyXG5cdFx0XHRcdGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6IHVuZGVmaW5lZCB9XHJcblx0XHRcdH0pXHJcblx0XHRcdFx0LnRoZW4oZnVuY3Rpb24ocmVzKSB7XHJcblx0XHRcdFx0XHRpZiAocmVzLmRhdGEuc3VjY2Vzcykge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzLmRhdGEuZGF0YTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdCRsb2cuZXJyb3IocmVzLnRpdGxlKTtcclxuXHRcdFx0XHRcdHJldHVybiAnJztcclxuXHRcdFx0XHR9KVxyXG5cdFx0XHRcdC5jYXRjaChmdW5jdGlvbihyZXMpIHtcclxuXHRcdFx0XHRcdCRsb2cuZXJyb3IocmVzKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmNvbnRyb2xsZXIoJ0xvZ2luQ29udHJvbGxlcicsIExvZ2luQ29udHJvbGxlcik7XHJcblxyXG5cdExvZ2luQ29udHJvbGxlci4kaW5qZWN0ID0gWydsb2dpblNlcnZpY2UnXTtcclxuXHRmdW5jdGlvbiBMb2dpbkNvbnRyb2xsZXIobG9naW5TZXJ2aWNlKSB7XHJcblx0XHR2YXIgdm0gPSB0aGlzO1xyXG5cdFx0dm0ubG9hZGluZyA9IGZhbHNlO1xyXG5cdFx0dm0uZXJyb3IgPSAnJztcclxuXHJcblx0XHR2bS5sb2dpbiA9IGxvZ2luO1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0KiBMb2dpblNlcnZpY2Ugd2lsbCByZWRpcmVjdCBpZiB0aGVyZSBpcyBubyBlcnJvci4gVGh1cywgdGhlcmUncyBvbmx5IGFcclxuXHRcdCogbmVlZCB0byByZXR1cm4gYSBwcm9taXNlIGlmIHRoZXJlJ3MgYW4gZXJyb3IuXHJcblx0XHQqL1xyXG5cdFx0ZnVuY3Rpb24gbG9naW4oKSB7XHJcblx0XHRcdHZtLmxvYWRpbmcgPSB0cnVlO1xyXG5cdFx0XHRsb2dpblNlcnZpY2UubG9naW4odm0udXNlcilcclxuXHRcdFx0XHQudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xyXG5cdFx0XHRcdFx0dm0ubG9hZGluZyA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0dm0uZXJyb3IgPSByZXNwb25zZTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmZhY3RvcnkoJ2xvZ2luU2VydmljZScsIGxvZ2luU2VydmljZSk7XHJcblxyXG5cdGxvZ2luU2VydmljZS4kaW5qZWN0ID0gWyckaHR0cCcsICckbG9jYXRpb24nLCAnJGxvZycsICdjYWNoZVNlcnZpY2UnXTtcclxuXHRmdW5jdGlvbiBsb2dpblNlcnZpY2UoJGh0dHAsICRsb2NhdGlvbiwgJGxvZywgY2FjaGVTZXJ2aWNlKSB7XHJcblx0XHR2YXIgdm0gPSB0aGlzOyAgLy8ganNoaW50IGlnbm9yZTpsaW5lXHJcblxyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0bG9naW46IGxvZ2luXHJcblx0XHR9O1xyXG5cclxuXHRcdGZ1bmN0aW9uIGxvZ2luKHVzZXIpIHtcclxuXHRcdFx0dXNlci5uYW1lID0gdXNlci5uYW1lLnRvTG93ZXJDYXNlKCkudHJpbSgpO1xyXG5cclxuXHRcdFx0cmV0dXJuICRodHRwLnBvc3QoJ2FwaS91c2VyL2xvZ2luTWFuYWdlci5waHAnLCB1c2VyKVxyXG5cdFx0XHRcdC50aGVuKGxvZ2luQ29tcGxldGUpXHJcblx0XHRcdFx0LmNhdGNoKGxvZ2luRmFpbGVkKTtcclxuXHJcblx0XHRcdGZ1bmN0aW9uIGxvZ2luQ29tcGxldGUocmVzcG9uc2UpIHtcclxuXHRcdFx0XHRpZiAocmVzcG9uc2UuZGF0YS5zdWNjZXNzID09PSBmYWxzZSkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHJlc3BvbnNlLmRhdGEudGl0bGU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGNhY2hlU2VydmljZS5jYWNoZUFsbCgpO1xyXG5cdFx0XHRcdCRsb2NhdGlvbi5wYXRoKCcvZGFzaGJvYXJkJyk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGZ1bmN0aW9uIGxvZ2luRmFpbGVkKGVycm9yKSB7XHJcblx0XHRcdFx0JGxvZy5lcnJvcihlcnJvcik7XHJcblx0XHRcdFx0cmV0dXJuICdTb21ldGhpbmcgd2VudCB3cm9uZy4gUGxlYXNlIHRyeSBhZ2Fpbi4nO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59KSgpO1xyXG5cbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuY29udHJvbGxlcignUmVnaXN0ZXJDb250cm9sbGVyJywgUmVnaXN0ZXJDb250cm9sbGVyKTtcclxuXHJcblx0UmVnaXN0ZXJDb250cm9sbGVyLiRpbmplY3QgPSBbJ3JlZ2lzdGVyU2VydmljZSddO1xyXG5cdGZ1bmN0aW9uIFJlZ2lzdGVyQ29udHJvbGxlcihyZWdpc3RlclNlcnZpY2UpIHtcclxuXHRcdHZhciB2bSA9IHRoaXM7XHJcblx0XHR2bS5lcnJvciA9ICcnO1xyXG5cdFx0dm0ubG9hZGluZyA9IGZhbHNlO1xyXG5cdFx0dm0ucmVnaXN0ZXIgPSByZWdpc3RlcjtcclxuXHJcblx0XHRmdW5jdGlvbiByZWdpc3RlcigpIHtcclxuXHRcdFx0dm0ubG9hZGluZyA9IHRydWU7XHJcblx0XHRcdHJlZ2lzdGVyU2VydmljZS5yZWdpc3Rlcih2bS51c2VyKVxyXG5cdFx0XHRcdC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcblx0XHRcdFx0XHR2bS5sb2FkaW5nID0gZmFsc2U7XHJcblx0XHRcdFx0XHR2bS5lcnJvciA9IHJlc3BvbnNlO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdH1cclxufSkoKTtcbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuZmFjdG9yeSgncmVnaXN0ZXJTZXJ2aWNlJywgcmVnaXN0ZXJTZXJ2aWNlKTtcclxuXHJcblx0cmVnaXN0ZXJTZXJ2aWNlLiRpbmplY3QgPSBbJyRsb2NhdGlvbicsICckbG9nJywgJ2NydWRTZXJ2aWNlJ107XHJcblx0ZnVuY3Rpb24gcmVnaXN0ZXJTZXJ2aWNlKCRsb2NhdGlvbiwgJGxvZywgY3J1ZFNlcnZpY2UpIHtcclxuXHRcdHZhciB2bSA9IHRoaXM7ICAvLyBqc2hpbnQgaWdub3JlOmxpbmVcclxuXHRcdHZtLmNydWQgPSBuZXcgY3J1ZFNlcnZpY2UoJ3VzZXInKTtcclxuXHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRyZWdpc3RlcjogcmVnaXN0ZXJcclxuXHRcdH07XHJcblxyXG5cdFx0ZnVuY3Rpb24gcmVnaXN0ZXIodXNlcikge1xyXG5cdFx0XHR1c2VyLm5hbWUgPSB1c2VyLm5hbWUudG9Mb3dlckNhc2UoKS50cmltKCk7XHJcblxyXG5cdFx0XHRyZXR1cm4gdm0uY3J1ZC5jcmVhdGUodXNlcilcclxuXHRcdFx0XHQudGhlbihyZWdpc3RyYXRpb25Db21wbGV0ZSk7XHJcblxyXG5cdFx0XHRmdW5jdGlvbiByZWdpc3RyYXRpb25Db21wbGV0ZShyZXNwb25zZSkge1xyXG5cdFx0XHRcdGlmIChyZXNwb25zZS5zdWNjZXNzID09PSAnZmFsc2UnKSB7XHJcblx0XHRcdFx0XHQkbG9nLmVycm9yKHJlc3BvbnNlLnRpdGxlKTtcclxuXHRcdFx0XHRcdHJldHVybiByZXNwb25zZS50aXRsZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0JGxvY2F0aW9uLnVybCgnL2xvZ2luJyk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmNvbnRyb2xsZXIoJ0xhYmVsUGFnZUNvbnRyb2xsZXInLCBMYWJlbFBhZ2VDb250cm9sbGVyKTtcclxuXHJcblx0TGFiZWxQYWdlQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc3RhdGVQYXJhbXMnXTtcclxuXHRmdW5jdGlvbiBMYWJlbFBhZ2VDb250cm9sbGVyKCRzdGF0ZVBhcmFtcykge1xyXG5cdFx0dGhpcy5sYWJlbElkID0gJHN0YXRlUGFyYW1zLmxhYmVsSWQ7XHJcblx0fVxyXG59KSgpO1xuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5mYWN0b3J5KCdhY2Nlc3NTZXJ2aWNlJywgYWNjZXNzU2VydmljZSk7XHJcblxyXG5cdGFjY2Vzc1NlcnZpY2UuJGluamVjdCA9IFsnJGxvY2F0aW9uJywgJyRxJywgJ3Nlc3Npb25TZXJ2aWNlJywgJ3N0YXR1c1NlcnZpY2UnXTtcclxuXHRmdW5jdGlvbiBhY2Nlc3NTZXJ2aWNlKCRsb2NhdGlvbiwgJHEsIHNlc3Npb25TZXJ2aWNlLCBzdGF0dXNTZXJ2aWNlKSB7XHJcblx0XHR2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xyXG5cclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGlzQXV0aGVudGljYXRlZDogaXNBdXRoZW50aWNhdGVkLFxyXG5cdFx0XHRpc0FkbWluOiBpc0FkbWluXHJcblx0XHR9O1xyXG5cclxuXHRcdGZ1bmN0aW9uIGlzQXV0aGVudGljYXRlZCgpIHtcclxuXHRcdFx0cmV0dXJuIHNlc3Npb25TZXJ2aWNlLmdldFZhcignbmFtZScpXHJcblx0XHRcdFx0LnRoZW4oaXNBdXRoZW50aWNhdGVkQ29tcGxldGUpO1xyXG5cclxuXHRcdFx0ZnVuY3Rpb24gaXNBdXRoZW50aWNhdGVkQ29tcGxldGUocmVzcG9uc2UpIHtcclxuXHRcdFx0XHRpZiAocmVzcG9uc2UuZGF0YS5zdWNjZXNzICE9PSBmYWxzZSkge1xyXG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZShzdGF0dXNTZXJ2aWNlLk9LKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0KHN0YXR1c1NlcnZpY2UuVU5BVVRIT1JJWkVEKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gaXNBZG1pbigpIHtcclxuXHJcblx0XHR9XHJcblx0fVxyXG59KSgpO1xyXG5cbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdC8qKlxyXG5cdCogU3RhdHVzIGNvZGVzIHVzZWQgd2hlbiBhY2Nlc3NpbmcgdmFyaW91cyBwYWdlcyBpbiB0aGUgYXBwLlxyXG5cdCovXHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuc2VydmljZSgnc3RhdHVzU2VydmljZScsIHN0YXR1c1NlcnZpY2UpO1xyXG5cclxuXHRmdW5jdGlvbiBzdGF0dXNTZXJ2aWNlKCkge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0T0s6IDIwMCxcclxuXHRcdFx0VU5BVVRIT1JJWkVEOiA0MDEsXHJcblx0XHRcdEZPUkJJRERFTjogNDAzXHJcblx0XHR9O1xyXG5cdH1cclxufSkoKTtcclxuXG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmZhY3RvcnkoJ2NhbGVuZGFyU2VydmljZScsIGNhbGVuZGFyU2VydmljZSk7XHJcblxyXG5cdGNhbGVuZGFyU2VydmljZS4kaW5qZWN0ID0gWydjcnVkU2VydmljZScsICdjYWNoZVNlcnZpY2UnXTtcclxuXHRmdW5jdGlvbiBjYWxlbmRhclNlcnZpY2UoY3J1ZFNlcnZpY2UsIGNhY2hlU2VydmljZSkge1xyXG5cdFx0dmFyIHZtID0gdGhpczsgIC8vIGpzaGludCBpZ25vcmU6bGluZVxyXG5cdFx0dm0uY2FsZW5kYXIgPSBuZXcgY3J1ZFNlcnZpY2UoJ2NhbGVuZGFyJyk7XHJcblxyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0Y3JlYXRlQ2FsZW5kYXI6IGNyZWF0ZUNhbGVuZGFyLFxyXG5cdFx0XHRkZWxldGVDYWxlbmRhcjogZGVsZXRlQ2FsZW5kYXIsXHJcblx0XHRcdGdldENhbGVuZGFyczogZ2V0Q2FsZW5kYXJzLFxyXG5cdFx0XHR1cGRhdGVDYWxlbmRhcjogdXBkYXRlQ2FsZW5kYXJcclxuXHRcdH07XHJcblxyXG5cdFx0ZnVuY3Rpb24gY3JlYXRlQ2FsZW5kYXIoY2FsZW5kYXIpIHtcclxuXHRcdFx0cmV0dXJuIHZtLmNhbGVuZGFyLmNyZWF0ZShjYWxlbmRhcikudGhlbihwcm9taXNlQ29tcGxldGUpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGRlbGV0ZUNhbGVuZGFyKGlkKSB7XHJcblx0XHRcdHJldHVybiB2bS5jYWxlbmRhci5yZW1vdmUoaWQpLnRoZW4ocHJvbWlzZUNvbXBsZXRlKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBnZXRDYWxlbmRhcnMoKSB7XHJcblx0XHRcdHJldHVybiBjYWNoZVNlcnZpY2UuZ2V0Q2FsZW5kYXJzKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gdXBkYXRlQ2FsZW5kYXIoaWQsIGNhbGVuZGFyKSB7XHJcblx0XHRcdHJldHVybiB2bS5jYWxlbmRhci51cGRhdGUoaWQsIGNhbGVuZGFyKS50aGVuKHByb21pc2VDb21wbGV0ZSk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gcHJvbWlzZUNvbXBsZXRlKHJlc3BvbnNlKSB7XHJcblx0XHRcdHZhciByZXN1bHQgPSByZXNwb25zZS5kYXRhO1xyXG5cdFx0XHRpZiAocmVzdWx0LnN1Y2Nlc3MpIHtcclxuXHRcdFx0XHRjYWNoZVNlcnZpY2UuY2FjaGVDYWxlbmRhcnMoKTtcclxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0LmRhdGE7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJlc3VsdC50aXRsZTtcclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XHJcblxuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5mYWN0b3J5KCdldmVudE1vZGFsU2VydmljZScsIGV2ZW50TW9kYWxTZXJ2aWNlKTtcclxuXHJcblx0ZXZlbnRNb2RhbFNlcnZpY2UuJGluamVjdCA9IFsnJHVpYk1vZGFsJywgJ2NhbGVuZGFyU2VydmljZScsICdldmVudHNTZXJ2aWNlJ107XHJcblx0ZnVuY3Rpb24gZXZlbnRNb2RhbFNlcnZpY2UoJHVpYk1vZGFsLCBjYWxlbmRhclNlcnZpY2UsIGV2ZW50c1NlcnZpY2UpIHtcclxuXHRcdHZhciB2bSA9IHRoaXM7ICAvLyBqc2hpbnQgaWdub3JlOmxpbmVcclxuXHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRvcGVuRXZlbnRNb2RhbDogb3BlbkV2ZW50TW9kYWxcclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQqIFdpdGhvdXQgY2xvbmluZyB0aGUgZXZlbnQsIGFueSBjaGFuZ2VzIG1hZGUgaW4gdGhlIG1vZGFsIHdpbGwgYmUgcmVmbGVjdGVkXHJcblx0XHQqIGluIHRoZSBtYWluIHdpbmRvdyByZWdhcmRsZXNzIG9mIGlmIHRoZSBjaGFuZ2VzIHdlcmUgc2F2ZWQgb3Igbm90LCB3aGljaFxyXG5cdFx0KiBtZWFucyBhIHVzZXIgd291bGQgbm90IGJlIGFibGUgdG8gY2FuY2VsIHRoZWlyIGNoYW5nZXMgdW5sZXNzIHRoZXkgcmVmcmVzaC5cclxuXHRcdCovXHJcblx0XHRmdW5jdGlvbiBvcGVuRXZlbnRNb2RhbChldmVudCwgY2FsZW5kYXJzKSB7XHJcblx0XHRcdHZhciBjbG9uZWRFdmVudCA9IHt9O1xyXG5cdFx0XHRhbmd1bGFyLmV4dGVuZChjbG9uZWRFdmVudCwgZXZlbnQpO1xyXG5cclxuXHRcdFx0cmV0dXJuICR1aWJNb2RhbC5vcGVuKHtcclxuXHRcdFx0XHRjb250cm9sbGVyOiAnTW9kYWxDb250cm9sbGVyJyxcclxuXHRcdFx0XHRjb250cm9sbGVyQXM6ICd2bScsXHJcblx0XHRcdFx0dGVtcGxhdGVVcmw6ICdtb2R1bGVzL2V2ZW50cy9tb2RhbC9ldmVudC5tb2RhbC5odG1sJyxcclxuXHRcdFx0XHRyZXNvbHZlOiB7XHJcblx0XHRcdFx0XHRncm91cHM6IGZ1bmN0aW9uKCkgeyByZXR1cm4gY2FsZW5kYXJzOyB9LFxyXG5cdFx0XHRcdFx0aXRlbTogY2xvbmVkRXZlbnRcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pLnJlc3VsdFxyXG5cdFx0XHRcdC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gZXZlbnRzU2VydmljZS5jcmVhdGVPclVwZGF0ZUV2ZW50KHJlc3BvbnNlKVxyXG5cdFx0XHRcdFx0XHQudGhlbihldmVudHNTZXJ2aWNlLmdldEV2ZW50cyk7XHJcblx0XHRcdFx0fSwgZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuXHRcdFx0XHRcdGlmIChOdW1iZXIocmVzcG9uc2UpKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiBldmVudHNTZXJ2aWNlLmRlbGV0ZUV2ZW50KHJlc3BvbnNlKVxyXG5cdFx0XHRcdFx0XHRcdC50aGVuKGV2ZW50c1NlcnZpY2UuZ2V0RXZlbnRzKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XHJcblxuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5mYWN0b3J5KCdjYWxlbmRhcldpZGdldFNlcnZpY2UnLCBjYWxlbmRhcldpZGdldFNlcnZpY2UpO1xyXG5cclxuXHRjYWxlbmRhcldpZGdldFNlcnZpY2UuJGluamVjdCA9IFsnbW9tZW50J107XHJcblx0ZnVuY3Rpb24gY2FsZW5kYXJXaWRnZXRTZXJ2aWNlKG1vbWVudCkge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0Z2V0RW5kT2ZEYXk6IGdldEVuZE9mRGF5LFxyXG5cdFx0XHRnZXRNb250aDogZ2V0TW9udGgsXHJcblx0XHRcdGdldFRvZGF5OiBnZXRUb2RheSxcclxuXHRcdFx0Z2V0V2VlazogZ2V0V2VlayxcclxuXHRcdFx0aXNTYW1lRGF5OiBpc1NhbWVEYXksXHJcblx0XHRcdGxhc3RNb250aDogbGFzdE1vbnRoLFxyXG5cdFx0XHRuZXh0TW9udGg6IG5leHRNb250aFxyXG5cdFx0fTtcclxuXHJcblx0XHRmdW5jdGlvbiBnZXRFbmRPZkRheShkYXkpIHtcclxuXHRcdFx0cmV0dXJuIGRheS5jbG9uZSgpLmFkZCgxLCAnZGF5Jykuc3VidHJhY3QoMSwgJ21zJyk7XHJcblx0XHR9XHJcblxyXG5cdFx0LyoqXHJcblx0XHQqIEBwYXJhbSB7TW9tZW50IE9iamVjdH0gYURheSBEYXkgdG8gYnVpbGQgbW9udGggYXJvdW5kLlxyXG5cdFx0KiBAcmV0dXJuIHtNb21lbnQgT2JqZWN0W11bXX1cclxuXHRcdCovXHJcblx0XHRmdW5jdGlvbiBnZXRNb250aChhRGF5KSB7XHJcblx0XHRcdHZhciBtb250aCA9IFtdO1xyXG5cdFx0XHR2YXIgZGF5ID0gYURheS5jbG9uZSgpLmRhdGUoMSkuc3RhcnRPZignd2VlaycpO1xyXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDY7IGkrKykge1xyXG5cdFx0XHRcdG1vbnRoLnB1c2goZ2V0V2VlayhkYXksIGFEYXkubW9udGgoKSkpO1xyXG5cdFx0XHRcdGRheSA9IGRheS5hZGQoMSwgJ3dlZWtzJyk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIG1vbnRoO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGdldFRvZGF5KCkge1xyXG5cdFx0XHRyZXR1cm4gbW9tZW50KCk7XHJcblx0XHR9XHJcblxyXG5cdFx0LyoqXHJcblx0XHQqIEBwYXJhbSB7TW9tZW50IE9iamVjdH1cdHN0YXJ0RGF5XHRTdGFydGluZyBkYXkgb2YgYSB3ZWVrLlxyXG5cdFx0KiBAcGFyYW0ge2ludH1cdFx0XHRcdHRhcmdldE1vbnRoXHRNb250aCBudW1iZXIgYmVpbmcgYnVpbHQuXHJcblx0XHQqXHJcblx0XHQqIEByZXR1cm4ge01vbWVudCBPYmplY3RbXX1cclxuXHRcdCovXHJcblx0XHRmdW5jdGlvbiBnZXRXZWVrKHN0YXJ0RGF5LCB0YXJnZXRNb250aCkge1xyXG5cdFx0XHR2YXIgd2VlayA9IFtdO1xyXG5cclxuXHRcdFx0dmFyIGRheSA9IHN0YXJ0RGF5LmNsb25lKCk7XHJcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgNzsgaSsrKSB7XHJcblx0XHRcdFx0d2Vlay5wdXNoKHtcclxuXHRcdFx0XHRcdG51bWJlcjogZGF5LmRhdGUoKSxcclxuXHRcdFx0XHRcdGlzVGFyZ2V0TW9udGg6IChkYXkubW9udGgoKSA9PT0gdGFyZ2V0TW9udGgpLFxyXG5cdFx0XHRcdFx0aXNUb2RheTogZGF5LmlzU2FtZShtb21lbnQoKSwgJ2RheScpLFxyXG5cdFx0XHRcdFx0ZnVsbERhdGU6IGRheVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdGRheSA9IGRheS5jbG9uZSgpLmFkZCgxLCAnZGF5cycpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gd2VlaztcclxuXHRcdH1cclxuXHJcblx0XHQvKipcclxuXHRcdCogQHBhcmFtIHtNb21lbnQgT2JqZWN0fVx0ZGF5MVxyXG5cdFx0KiBAcGFyYW0ge01vbWVudCBPYmplY3R9XHRkYXkyXHJcblx0XHQqXHJcblx0XHQqIEByZXR1cm4ge2Jvb2x9XHJcblx0XHQqL1xyXG5cdFx0ZnVuY3Rpb24gaXNTYW1lRGF5KGRheTEsIGRheTIpIHtcclxuXHRcdFx0cmV0dXJuIGRheTEuaXNTYW1lKGRheTIsICdkYXknKTtcclxuXHRcdH1cclxuXHJcblx0XHQvKipcclxuXHRcdCogU2luY2Ugc3JjTW9udGggaXMgYW4gYXJyYXkgb2YgZGF5cyBieSB3ZWVrcywgaXQgY29udGFpbnMgZGF5cyBub3QgaW4gdGhlXHJcblx0XHQqIHNvdXJjZSBtb250aC4gVGhlIGZpcnN0IGRheSBvZiB0aGUgdGhpcmQgd2VlayBvZiB0aGUgZ2l2ZW4gbW9udGggaXNcclxuXHRcdCogZ3VhcmFudGVlZCB0byBiZSBhIGRheSB3aXRoaW4gdGhlIHNvdXJjZSBtb250aC5cclxuXHRcdCpcclxuXHRcdCogQHBhcmFtIHtNb21lbnQgT2JqZWN0fVx0c3JjTW9udGhcclxuXHRcdCogQHJldHVybiB7TW9tZW50IE9iamVjdFtdfVxyXG5cdFx0Ki9cclxuXHRcdGZ1bmN0aW9uIGxhc3RNb250aChzcmNNb250aCkge1xyXG5cdFx0XHRyZXR1cm4gZ2V0TW9udGgoc3JjTW9udGhbM11bMF0uZnVsbERhdGUuY2xvbmUoKS5zdWJ0cmFjdCgxLCAnbW9udGhzJykpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8qKlxyXG5cdFx0KiBAc2VlIGxhc3RNb250aCgpXHJcblx0XHQqL1xyXG5cdFx0ZnVuY3Rpb24gbmV4dE1vbnRoKHNyY01vbnRoKSB7XHJcblx0XHRcdHJldHVybiBnZXRNb250aChzcmNNb250aFszXVswXS5mdWxsRGF0ZS5jbG9uZSgpLmFkZCgxLCAnbW9udGhzJykpO1xyXG5cdFx0fVxyXG5cdH1cclxufSkoKTtcclxuXG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmZhY3RvcnkoJ3JlY3VycmVuY2VNb2RhbFNlcnZpY2UnLCByZWN1cnJlbmNlTW9kYWxTZXJ2aWNlKTtcclxuXHJcblx0cmVjdXJyZW5jZU1vZGFsU2VydmljZS4kaW5qZWN0ID0gWyckdWliTW9kYWwnLCAncmVjdXJyZW5jZVNlcnZpY2UnXTtcclxuXHRmdW5jdGlvbiByZWN1cnJlbmNlTW9kYWxTZXJ2aWNlKCR1aWJNb2RhbCwgcmVjdXJyZW5jZVNlcnZpY2UpIHtcclxuXHRcdHZhciByYyA9IHRoaXM7IC8vIGpzaGludCBpZ25vcmU6IGxpbmVcclxuXHRcdHZhciByZWN1cnJlbmNlSW5mbyA9IHtcclxuXHRcdFx0ZnJlcTogWydob3VybHknLCAnZGFpbHknLCAnd2Vla2x5JywgJ21vbnRobHknLCAneWVhcmx5J10sXHJcblx0XHRcdGRheXM6IFsnbW8nLCAndHUnLCAnd2UnLCAndGgnLCAnZnInLCAnc2EnLCAnc3UnXVxyXG5cdFx0fTtcclxuXHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRvcGVuUmVjdXJyZW5jZU1vZGFsOiBvcGVuUmVjdXJyZW5jZU1vZGFsXHJcblx0XHR9O1xyXG5cclxuXHRcdGZ1bmN0aW9uIG9wZW5SZWN1cnJlbmNlTW9kYWwoaXRlbSkge1xyXG5cdFx0XHRyZXR1cm4gJHVpYk1vZGFsLm9wZW4oe1xyXG5cdFx0XHRcdGNvbnRyb2xsZXI6ICdNb2RhbENvbnRyb2xsZXInLFxyXG5cdFx0XHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcclxuXHRcdFx0XHR0ZW1wbGF0ZVVybDogJ21vZHVsZXMvcmVjdXJyZW5jZS9tb2RhbC9yZWN1cnJlbmNlLm1vZGFsLmh0bWwnLFxyXG5cdFx0XHRcdHJlc29sdmU6IHtcclxuXHRcdFx0XHRcdGdyb3VwczogZnVuY3Rpb24oKSB7IHJldHVybiByZWN1cnJlbmNlSW5mbzsgfSxcclxuXHRcdFx0XHRcdGl0ZW06IGl0ZW1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pLnJlc3VsdFxyXG5cdFx0XHRcdC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcblx0XHRcdFx0XHRyZWN1cnJlbmNlU2VydmljZS5jb25zdHJ1Y3RSZWN1cnJlbmNlKGl0ZW0pO1xyXG5cdFx0XHRcdH0sIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcblx0XHRcdFx0XHRyZWN1cnJlbmNlU2VydmljZS5jbGVhclJlY3VycmVuY2UoaXRlbSk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fVxyXG59KSgpO1xyXG5cbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuZmFjdG9yeSgnbGFiZWxTZXJ2aWNlJywgbGFiZWxTZXJ2aWNlKTtcclxuXHJcblx0bGFiZWxTZXJ2aWNlLiRpbmplY3QgPSBbJ2NydWRTZXJ2aWNlJywgJ2NhY2hlU2VydmljZSddO1xyXG5cdGZ1bmN0aW9uIGxhYmVsU2VydmljZShjcnVkU2VydmljZSwgY2FjaGVTZXJ2aWNlKSB7XHJcblx0XHR2YXIgdm0gPSB0aGlzOyAgLy8ganNoaW50IGlnbm9yZTpsaW5lXHJcblx0XHR2bS5sYWJlbCA9IG5ldyBjcnVkU2VydmljZSgnbGFiZWwnKTtcclxuXHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRjcmVhdGVMYWJlbDogY3JlYXRlTGFiZWwsXHJcblx0XHRcdGRlbGV0ZUxhYmVsOiBkZWxldGVMYWJlbCxcclxuXHRcdFx0Z2V0TGFiZWxzOiBnZXRMYWJlbHMsXHJcblx0XHRcdHVwZGF0ZUxhYmVsOiB1cGRhdGVMYWJlbFxyXG5cdFx0fTtcclxuXHJcblx0XHRmdW5jdGlvbiBjcmVhdGVMYWJlbChsYWJlbCkge1xyXG5cdFx0XHRyZXR1cm4gdm0ubGFiZWwuY3JlYXRlKGxhYmVsKS50aGVuKHByb21pc2VDb21wbGV0ZSk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gZGVsZXRlTGFiZWwoaWQpIHtcclxuXHRcdFx0cmV0dXJuIHZtLmxhYmVsLnJlbW92ZShpZCkudGhlbihwcm9taXNlQ29tcGxldGUpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGdldExhYmVscygpIHtcclxuXHRcdFx0cmV0dXJuIGNhY2hlU2VydmljZS5nZXRMYWJlbHMoKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiB1cGRhdGVMYWJlbChpZCwgbGFiZWwpIHtcclxuXHRcdFx0cmV0dXJuIHZtLmxhYmVsLnVwZGF0ZShpZCwgbGFiZWwpLnRoZW4ocHJvbWlzZUNvbXBsZXRlKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBwcm9taXNlQ29tcGxldGUocmVzcG9uc2UpIHtcclxuXHRcdFx0dmFyIHJlcyA9IHJlc3BvbnNlLmRhdGE7XHJcblx0XHRcdGlmIChyZXMuc3VjY2Vzcykge1xyXG5cdFx0XHRcdGNhY2hlU2VydmljZS5jYWNoZUxhYmVscygpO1xyXG5cdFx0XHRcdHJldHVybiByZXMuZGF0YTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmVzLnRpdGxlO1xyXG5cdFx0fVxyXG5cdH1cclxufSkoKTtcclxuXG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmZhY3RvcnkoJ3N1YnRhc2tNb2RhbFNlcnZpY2UnLCBzdWJ0YXNrTW9kYWxTZXJ2aWNlKTtcclxuXHJcblx0c3VidGFza01vZGFsU2VydmljZS4kaW5qZWN0ID0gWyckdWliTW9kYWwnLCAnbGFiZWxTZXJ2aWNlJywgJ3N1YnRhc2tzU2VydmljZSddO1xyXG5cdGZ1bmN0aW9uIHN1YnRhc2tNb2RhbFNlcnZpY2UoJHVpYk1vZGFsLCBsYWJlbFNlcnZpY2UsIHN1YnRhc2tzU2VydmljZSkge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0b3BlblN1YnRhc2tNb2RhbDogb3BlblN1YnRhc2tNb2RhbFxyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCogV2l0aG91dCBjbG9uaW5nIHRoZSBzdWJ0YXNrLCBhbnkgY2hhbmdlcyBtYWRlIGluIHRoZSBtb2RhbCB3aWxsIGJlIHJlZmxlY3RlZFxyXG5cdFx0KiBpbiB0aGUgbWFpbiB3aW5kb3cgcmVnYXJkbGVzcyBvZiBpZiB0aGUgY2hhbmdlcyB3ZXJlIHNhdmVkIG9yIG5vdCwgd2hpY2hcclxuXHRcdCogbWVhbnMgYSB1c2VyIHdvdWxkIG5vdCBiZSBhYmxlIHRvIGNhbmNlbCB0aGVpciBjaGFuZ2VzIHVubGVzcyB0aGV5IHJlZnJlc2guXHJcblx0XHQqL1xyXG5cdFx0ZnVuY3Rpb24gb3BlblN1YnRhc2tNb2RhbChzdWJ0YXNrLCB0YXNrKSB7XHJcblx0XHRcdHZhciBjbG9uZWRTdWJ0YXNrID0ge307XHJcblx0XHRcdGFuZ3VsYXIuZXh0ZW5kKGNsb25lZFN1YnRhc2ssIHN1YnRhc2spO1xyXG5cclxuXHRcdFx0JHVpYk1vZGFsLm9wZW4oe1xyXG5cdFx0XHRcdGNvbnRyb2xsZXI6ICdNb2RhbENvbnRyb2xsZXInLFxyXG5cdFx0XHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcclxuXHRcdFx0XHR0ZW1wbGF0ZVVybDogJ21vZHVsZXMvdGFza3MvbW9kYWwvc3VidGFzay5tb2RhbC5odG1sJyxcclxuXHRcdFx0XHRyZXNvbHZlOiB7XHJcblx0XHRcdFx0XHRncm91cHM6IHRhc2ssXHJcblx0XHRcdFx0XHRpdGVtOiBjbG9uZWRTdWJ0YXNrXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KS5yZXN1bHRcclxuXHRcdFx0XHQudGhlbihmdW5jdGlvbihyZXMpIHtcclxuXHRcdFx0XHRcdHN1YnRhc2tzU2VydmljZS5jcmVhdGVPclVwZGF0ZVN1YnRhc2socmVzLnN1YnRhc2ssIHJlcy50YXNrKTtcclxuXHRcdFx0XHR9LCBmdW5jdGlvbihyZXMpIHtcclxuXHRcdFx0XHRcdGlmICh0eXBlb2YgcmVzICE9PSAnc3RyaW5nJykge1xyXG5cdFx0XHRcdFx0XHRzdWJ0YXNrc1NlcnZpY2UuZGVsZXRlU3VidGFzayhyZXMuc3VidGFzaywgcmVzLnRhc2spO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdH1cclxufSkoKTtcclxuXG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmZhY3RvcnkoJ3Rhc2tNb2RhbFNlcnZpY2UnLCB0YXNrTW9kYWxTZXJ2aWNlKTtcclxuXHJcblx0dGFza01vZGFsU2VydmljZS4kaW5qZWN0ID0gWyckdWliTW9kYWwnLCAnbGFiZWxTZXJ2aWNlJywgJ3Rhc2tzU2VydmljZSddO1xyXG5cdGZ1bmN0aW9uIHRhc2tNb2RhbFNlcnZpY2UoJHVpYk1vZGFsLCBsYWJlbFNlcnZpY2UsIHRhc2tzU2VydmljZSkge1xyXG5cdFx0dmFyIHZtID0gdGhpczsgLy8ganNoaW50IGlnbm9yZTogbGluZVxyXG5cclxuXHRcdHJldHVybiB7XHJcblx0XHRcdG9wZW5UYXNrTW9kYWw6IG9wZW5UYXNrTW9kYWxcclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQqIFdpdGhvdXQgY2xvbmluZyB0aGUgdGFzaywgYW55IGNoYW5nZXMgbWFkZSBpbiB0aGUgbW9kYWwgd2lsbCBiZSByZWZsZWN0ZWRcclxuXHRcdCogaW4gdGhlIG1haW4gd2luZG93IHJlZ2FyZGxlc3Mgb2YgaWYgdGhlIGNoYW5nZXMgd2VyZSBzYXZlZCBvciBub3QsIHdoaWNoXHJcblx0XHQqIG1lYW5zIGEgdXNlciB3b3VsZCBub3QgYmUgYWJsZSB0byBjYW5jZWwgdGhlaXIgY2hhbmdlcyB1bmxlc3MgdGhleSByZWZyZXNoLlxyXG5cdFx0Ki9cclxuXHRcdGZ1bmN0aW9uIG9wZW5UYXNrTW9kYWwodGFzaywgbGFiZWxzKSB7XHJcblx0XHRcdHZhciBjbG9uZWRUYXNrID0ge307XHJcblx0XHRcdGFuZ3VsYXIuZXh0ZW5kKGNsb25lZFRhc2ssIHRhc2spO1xyXG5cclxuXHRcdFx0cmV0dXJuICR1aWJNb2RhbC5vcGVuKHtcclxuXHRcdFx0XHRjb250cm9sbGVyOiAnTW9kYWxDb250cm9sbGVyJyxcclxuXHRcdFx0XHRjb250cm9sbGVyQXM6ICd2bScsXHJcblx0XHRcdFx0dGVtcGxhdGVVcmw6ICdtb2R1bGVzL3Rhc2tzL21vZGFsL3Rhc2subW9kYWwuaHRtbCcsXHJcblx0XHRcdFx0cmVzb2x2ZToge1xyXG5cdFx0XHRcdFx0Z3JvdXBzOiBmdW5jdGlvbigpIHsgcmV0dXJuIGxhYmVsczsgfSxcclxuXHRcdFx0XHRcdGl0ZW06IGNsb25lZFRhc2tcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pLnJlc3VsdFxyXG5cdFx0XHRcdC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdGFza3NTZXJ2aWNlLmNyZWF0ZU9yVXBkYXRlVGFzayhyZXNwb25zZSlcclxuXHRcdFx0XHRcdFx0LnRoZW4odGFza3NTZXJ2aWNlLmdldFRhc2tzKTtcclxuXHRcdFx0XHR9LCBmdW5jdGlvbihyZXNwb25zZSkge1xyXG5cdFx0XHRcdFx0aWYgKE51bWJlcihyZXNwb25zZSkpIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHRhc2tzU2VydmljZS5kZWxldGVUYXNrKHJlc3BvbnNlKVxyXG5cdFx0XHRcdFx0XHRcdC50aGVuKHRhc2tzU2VydmljZS5nZXRUYXNrcyk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fVxyXG59KSgpO1xyXG5cbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuY29udHJvbGxlcignU3VidGFza3NDb250cm9sbGVyJywgU3VidGFza3NDb250cm9sbGVyKTtcclxuXHJcblx0U3VidGFza3NDb250cm9sbGVyLiRpbmplY3QgPSBbJ3N1YnRhc2tzU2VydmljZScsICdzdWJ0YXNrTW9kYWxTZXJ2aWNlJ107XHJcblx0ZnVuY3Rpb24gU3VidGFza3NDb250cm9sbGVyKHN1YnRhc2tzU2VydmljZSwgc3VidGFza01vZGFsU2VydmljZSkge1xyXG5cdFx0dmFyIHN0ID0gdGhpcztcclxuXHRcdHN0LnNob3dTdWJ0YXNrTW9kYWwgPSBzaG93U3VidGFza01vZGFsO1xyXG5cdFx0c3QudG9nZ2xlQ29tcGxldGVkID0gdG9nZ2xlQ29tcGxldGVkO1xyXG5cclxuXHRcdGZ1bmN0aW9uIHNob3dTdWJ0YXNrTW9kYWwoc3VidGFzaykge1xyXG5cdFx0XHRzdWJ0YXNrTW9kYWxTZXJ2aWNlLm9wZW5TdWJ0YXNrTW9kYWwoc3VidGFzaywgc3QudGFzayk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gdG9nZ2xlQ29tcGxldGVkKHN1YnRhc2spIHtcclxuXHRcdFx0c3VidGFza3NTZXJ2aWNlLnRvZ2dsZUNvbXBsZXRlZChzdWJ0YXNrKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiB1cGRhdGVTdWJ0YXNrcyhyZXNwb25zZSkge1xyXG5cdFx0XHRpZiAocmVzcG9uc2UpIHtcclxuXHRcdFx0XHRzdC5zdWJ0YXNrcyA9IHJlc3BvbnNlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59KSgpO1xuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5kaXJlY3RpdmUoJ3NwU3VidGFza3MnLCBzdWJ0YXNrc0RpcmVjdGl2ZSk7XHJcblxyXG5cdGZ1bmN0aW9uIHN1YnRhc2tzRGlyZWN0aXZlKCkge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0dGVtcGxhdGVVcmw6ICdtb2R1bGVzL3Rhc2tzL3N1YnRhc2tzL3N1YnRhc2tzLmh0bWwnLFxyXG5cdFx0XHRjb250cm9sbGVyOiAnU3VidGFza3NDb250cm9sbGVyJyxcclxuXHRcdFx0Y29udHJvbGxlckFzOiAnc3QnLFxyXG5cdFx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlLFxyXG5cdFx0XHRzY29wZToge1xyXG5cdFx0XHRcdHRhc2s6ICc9J1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdH1cclxufSkoKTtcbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuZmFjdG9yeSgnc3VidGFza3NTZXJ2aWNlJywgc3VidGFza3NTZXJ2aWNlKTtcclxuXHJcblx0c3VidGFza3NTZXJ2aWNlLiRpbmplY3QgPSBbJyRodHRwJywgJyRsb2cnXTtcclxuXHRmdW5jdGlvbiBzdWJ0YXNrc1NlcnZpY2UoJGh0dHAsICRsb2cpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGNyZWF0ZU9yVXBkYXRlU3VidGFzazogY3JlYXRlT3JVcGRhdGVTdWJ0YXNrLFxyXG5cdFx0XHRkZWxldGVTdWJ0YXNrOiBkZWxldGVTdWJ0YXNrLFxyXG5cdFx0XHR0b2dnbGVDb21wbGV0ZWQ6IHRvZ2dsZUNvbXBsZXRlZFxyXG5cdFx0fTtcclxuXHJcblx0XHRmdW5jdGlvbiBjcmVhdGVPclVwZGF0ZVN1YnRhc2soc3VidGFzaywgdGFzaykge1xyXG5cdFx0XHRpZiAoIXRhc2suc3VidGFza3MpIHtcclxuXHRcdFx0XHR0YXNrLnN1YnRhc2tzID0ge1xyXG5cdFx0XHRcdFx0Y3VycmVudElkOiAxLFxyXG5cdFx0XHRcdFx0bGlzdDogW11cclxuXHRcdFx0XHR9O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoc3VidGFzay5pZCA9PT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdFx0c3VidGFzay5pZCA9IHRhc2suc3VidGFza3MuY3VycmVudElkKys7XHJcblx0XHRcdFx0c3VidGFzay5jb21wbGV0ZWQgPSBmYWxzZTtcclxuXHRcdFx0XHR0YXNrLnN1YnRhc2tzLmxpc3QucHVzaChzdWJ0YXNrKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGRlbGV0ZVN1YnRhc2soc3VidGFzaywgdGFzaykge1xyXG5cdFx0XHR0YXNrLnN1YnRhc2tzLmxpc3Quc3BsaWNlKHRhc2suc3VidGFza3MubGlzdC5pbmRleE9mKHN1YnRhc2spLCAxKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiB0b2dnbGVDb21wbGV0ZWQoc3VidGFzaykge1xyXG5cdFx0XHRzdWJ0YXNrLmNvbXBsZXRlZCA9ICFzdWJ0YXNrLmNvbXBsZXRlZDtcclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XHJcblxuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5jb250cm9sbGVyKCdIZWFkZXJDb250cm9sbGVyJywgSGVhZGVyQ29udHJvbGxlcik7XHJcblxyXG5cdEhlYWRlckNvbnRyb2xsZXIuJGluamVjdCA9IFsndXNlciddO1xyXG5cdGZ1bmN0aW9uIEhlYWRlckNvbnRyb2xsZXIodXNlcikge1xyXG5cdFx0dGhpcy51c2VyID0gdXNlcjtcclxuXHR9XHJcbn0pKCk7XG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmZhY3RvcnkoJ2hlYWRlclNlcnZpY2UnLCBoZWFkZXJTZXJ2aWNlKTtcclxuXHJcblx0aGVhZGVyU2VydmljZS4kaW5qZWN0ID0gWyckaHR0cCcsICckbG9nJywgJ3Nlc3Npb25TZXJ2aWNlJ107XHJcblx0ZnVuY3Rpb24gaGVhZGVyU2VydmljZSgkaHR0cCwgJGxvZywgc2Vzc2lvblNlcnZpY2UpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGdldFVzZXI6IGdldFVzZXJcclxuXHRcdH07XHJcblxyXG5cdFx0ZnVuY3Rpb24gZ2V0VXNlcigpIHtcclxuXHRcdFx0cmV0dXJuIHNlc3Npb25TZXJ2aWNlLmdldFZhcignbmFtZScpXHJcblx0XHRcdFx0LnRoZW4oZ2V0TmFtZUNvbXBsZXRlKTtcclxuXHJcblx0XHRcdGZ1bmN0aW9uIGdldE5hbWVDb21wbGV0ZShyZXNwb25zZSkge1xyXG5cdFx0XHRcdHZhciByZXMgPSByZXNwb25zZS5kYXRhO1xyXG5cclxuXHRcdFx0XHRpZiAocmVzLnN1Y2Nlc3MgPT09IGZhbHNlKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4ge25hbWU6IGZhbHNlLCB1cmw6ICcjL2xvZ2luJ307XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiB7bmFtZTogcmVzLmRhdGEsIHVybDogJyMvZGFzaGJvYXJkJ307XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XHJcblxuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5jb250cm9sbGVyKCdTaWRlYmFyQ29udHJvbGxlcicsIFNpZGViYXJDb250cm9sbGVyKTtcclxuXHJcblx0U2lkZWJhckNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHJvb3RTY29wZScsICdsYWJlbFNlcnZpY2UnLCAnY2FsZW5kYXJTZXJ2aWNlJ107XHJcblx0ZnVuY3Rpb24gU2lkZWJhckNvbnRyb2xsZXIoJHJvb3RTY29wZSwgbGFiZWxTZXJ2aWNlLCBjYWxlbmRhclNlcnZpY2UpIHtcclxuXHRcdHZhciB2bSA9IHRoaXM7XHJcblx0XHR2bS5jb2xsYXBzZWQgPSB0cnVlO1xyXG5cdFx0dm0ubGFiZWxzID0gW107XHJcblx0XHR2bS5jYWxlbmRhcnMgPSBbXTtcclxuXHJcblx0XHRhY3RpdmF0ZSgpO1xyXG5cclxuXHRcdGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xyXG5cdFx0XHR1cGRhdGVDYWxlbmRhcnMoKTtcclxuXHRcdFx0dXBkYXRlTGFiZWxzKCk7XHJcblxyXG5cdFx0XHQkcm9vdFNjb3BlLiRvbigndXBkYXRlQ2FsZW5kYXJzJywgdXBkYXRlQ2FsZW5kYXJzKTtcclxuXHRcdFx0JHJvb3RTY29wZS4kb24oJ3VwZGF0ZUxhYmVscycsIHVwZGF0ZUxhYmVscyk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gdXBkYXRlQ2FsZW5kYXJzKCkge1xyXG5cdFx0XHR2bS5jYWxlbmRhcnMgPSBjYWxlbmRhclNlcnZpY2UuZ2V0Q2FsZW5kYXJzKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gdXBkYXRlTGFiZWxzKCkge1xyXG5cdFx0XHR2bS5sYWJlbHMgPSBsYWJlbFNlcnZpY2UuZ2V0TGFiZWxzKCk7XHJcblx0XHR9XHJcblx0fVxyXG59KSgpOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
