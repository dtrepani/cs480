!function(){"use strict";function e(e,t,r){function n(){console.log("changed route"),r.isAuthenticated()}e.$on("$locationChangeStart",n)}angular.module("app",["ngRoute"]).controller("AppController",e),e.$inject=["$rootScope","$location","appService"]}(),function(){"use strict";function e(e){e.when("/login",{templateUrl:"modules/login/login.html",controller:"LoginController",controllerAs:"vm"}).when("/logout",{templateUrl:"modules/logout/logout.html",controller:"LogoutController",controllerAs:"vm"}).when("/register",{templateUrl:"pages/register/register.html",controller:"RegisterController",controllerAs:"vm"}).when("/dashboard",{templateUrl:"pages/dashboard/dashboard.html",controller:"DashboardController",controllerAs:"vm"}).otherwise({redirectTo:"/dashboard"})}angular.module("app").config(e),e.$inject=["$routeProvider"]}(),function(){"use strict";function e(e,t){function r(){function r(t){"false"===t.data&&e.url("/login"),console.log("authenticated!!")}t.getVar("name").then(r)}return{isAuthenticated:r}}angular.module("app").factory("appService",e),e.$inject=["$location","sessionService"]}(),function(){"use strict";function e(e,t){function r(e){this.base="api/"+e+"/"+e+"Manager.php"}function n(t){return e.get(this.base+"?id="+t).then(l)["catch"](c)}function o(t){return e.post(this.base,t).then(l)["catch"](c)}function a(t,r){return e.put(this.base+"?id="+t,r).then(l)["catch"](c)}function i(t){return e["delete"](this.base+"?id="+t).then(l)["catch"](c)}function l(e){return e.data}function c(e){return t.error(e),!1}var u=r;return u.prototype={get:n,create:o,update:a,remove:i},u}angular.module("app").factory("crudService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(e,t){function r(t){return e.get(i.base+t).then(o)["catch"](a)}function n(t,r){return e.post(i.base+t,r).then(o)["catch"](a)}function o(e){return e.data}function a(e){return t.error(e),!1}var i=this;return i.base="api/session/sessionVarManager.php?var=",{getVar:r,setVar:n}}angular.module("app").factory("sessionService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(){function e(e,t,r,n){function o(){l()}function a(t){return t===e.otherModel.$viewValue}function i(e,t){n.$validate()}var l=e.$watch("otherModel",i);n.$validators.spCompareTo=a,t.on("$destroy",o)}var t={require:"ngModel",scope:{otherModel:"=spCompareTo"},link:e};return t}angular.module("app").directive("spCompareTo",e)}(),function(){"use strict";function e(e){function t(){function t(e){r.loading=!1,r.error=e}r.loading=!0,e.login(r.user).then(t)}var r=this;r.loading=!1,r.error="",r.login=t}angular.module("app").controller("LoginController",e),e.$inject=["loginService"]}(),function(){"use strict";function e(e,t,r){function n(n){function o(e){return"true"===e.data&&t.url("/dashboard"),"Username or password was incorrect."}function a(e){return r.error(e),"Something went wrong. Please try again."}return e.post("api/managers/loginManager.php",n).then(o)["catch"](a)}return{login:n}}angular.module("app").factory("loginService",e),e.$inject=["$http","$location","$log"]}(),function(){"use strict";function e(){}angular.module("app").controller("DashboardController",e)}(),function(){"use strict";function e(e){function t(){function t(e){r.loading=!1,r.error=e}r.loading=!0,e.register(r.user).then(t)}var r=this;r.loading=!1,r.error="",r.register=t}angular.module("app").controller("RegisterController",e),e.$inject=["registerService"]}(),function(){"use strict";function e(e,t){function r(t){function r(t){return"1"===t&&e.url("/login"),"Username taken."}return n.crud.create(t).then(r)}var n=this;return n.crud=new t("user"),{register:r}}angular.module("app").factory("registerService",e),e.$inject=["$location","crudService"]}(),function(){"use strict";function e(e){function t(e){r.name=e.name===!1?"Login":e.name,r.url=e.url}var r=this;r.name="",r.url="",e.getUser().then(t)}angular.module("app").controller("HeaderController",e),e.$inject=["headerService"]}(),function(){"use strict";function e(){function e(e,t,r){}return{link:e,templateUrl:"pages/layout/header/header.html",controller:"HeaderController",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("spHeader",e)}(),function(){"use strict";function e(e){function t(){function t(e){return"false"===e.data?{name:!1,url:"/login"}:{name:e,url:"/dashboard"}}e.getVar("name").then(t)}return{getUser:t}}angular.module("app").factory("headerService",e),e.$inject=["sessionService"]}(),function(){"use strict";function e(){var e=this;e.collapsed=!0,e.toggleSidebar=function(){e.collapsed=!e.collapsed}}angular.module("app").controller("SidebarController",e)}(),function(){"use strict";function e(){function e(e,t,r){function n(e){e?t.removeClass("collapsed"):t.addClass("collapsed")}e.$watch(r.sidebarDirective,n)}return{link:e,templateUrl:"pages/layout/sidebar/sidebar.html",controller:"SidebarController",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("spSidebar",e)}();
//# sourceMappingURL=data:application/json;base64,
