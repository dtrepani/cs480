!function(){"use strict";function e(e,t){function n(e){return e.cacheAll()}function r(e){return e.getUser()}function a(e){return e.isAuthenticated()}e.state("root",{url:"",templateUrl:"index.html","abstract":!0,resolve:{cache:["cacheService",n],user:["headerService",r]},views:{header:{templateUrl:"pages/layout/header/header.html",controller:"HeaderController",controllerAs:"hc"},sidebar:{templateUrl:"pages/layout/sidebar/sidebar.html",controller:"SidebarController",controllerAs:"sc"}}}).state("login",{url:"/login",parent:"root",views:{"content@":{templateUrl:"pages/login/login.html",controller:"LoginController",controllerAs:"vm"}}}).state("logout",{url:"/logout",parent:"root",views:{"content@":{controller:"LogoutController",controllerAs:"vm"}}}).state("register",{url:"/register",parent:"root",views:{"content@":{templateUrl:"pages/register/register.html",controller:"RegisterController",controllerAs:"vm"}}}).state("dashboard",{url:"/dashboard",parent:"root",views:{"content@":{templateUrl:"pages/dashboard/dashboard.html",resolve:{isAuthenticated:["accessService",a]}}}}).state("labels",{url:"/labels",parent:"root"}).state("labels.label",{url:"/:labelId",views:{"content@":{templateUrl:"pages/tasks/label.html",controller:"LabelPageController",controllerAs:"vm"}}}).state("inbox",{url:"/inbox",parent:"root",views:{"content@":{templateUrl:"pages/tasks/inbox.html",resolve:{isAuthenticated:["accessService",a]}}}}).state("today",{url:"/today",parent:"root",views:{"content@":{templateUrl:"pages/tasks/today.html",resolve:{isAuthenticated:["accessService",a]}}}}).state("week",{url:"/week",parent:"root",views:{"content@":{templateUrl:"pages/tasks/week.html",resolve:{isAuthenticated:["accessService",a]}}}}).state("calendar",{url:"/calendar",parent:"root",views:{"content@":{templateUrl:"pages/calendar/calendar.html",resolve:{isAuthenticated:["accessService",a]}}}}),t.otherwise("/dashboard")}angular.module("app",["ui.router","ui.bootstrap","angularMoment"]).config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function e(e){e.init()}angular.module("app").run(e),e.$inject=["appService"]}(),function(){"use strict";function e(e,t,n){function r(){e.$on("$stateChangeError",a)}function a(e,r,a,o,c,u){u===n.UNAUTHORIZED&&(e.preventDefault(),t.go("login"))}return{init:r}}angular.module("app").factory("appService",e),e.$inject=["$rootScope","$state","statusService"]}(),function(){"use strict";function e(){return function(e,t){if(!t)return e;for(var n=[],r=0;r<e.length;r++)(e[r].label_id===t||e[r].calendar_id===t)&&n.push(e[r]);return n}}angular.module("app").filter("inGroups",e),e.$inject=[]}(),function(){"use strict";function e(e){return function(t,n){for(var r=[],a=0;a<t.length;a++){var o=n.isSame(e(t[a].dt_start),"day");o||(o=n.isSame(e(t[a].dt_end),"day")),o&&r.push(t[a])}return r}}angular.module("app").filter("sameDayAs",e),e.$inject=["moment"]}(),function(){"use strict";function e(e){return function(t,n){if(!n)return t;for(var r=[],a=0;a<t.length;a++){(!t[a].due||t[a].due&&e(t[a].due).isBefore(e().add(n,"days")))&&r.push(t[a])}return r}}angular.module("app").filter("withinDays",e),e.$inject=["moment"]}(),function(){"use strict";function e(e,t){function n(){r(),a(),o(),c()}function r(){b.calendar=new t("calendar"),b.calendar.getByUser().then(function(e){b.calendars=s(e),v()})}function a(){b.event=new t("event"),b.event.getByUser().then(function(e){b.events=s(e),h()})}function o(){b.label=new t("label"),b.label.getByUser().then(function(e){b.labels=s(e),g()})}function c(){b.task=new t("task"),b.task.getByUser().then(function(e){b.tasks=s(e),m()})}function u(){b.calendars=[],b.events=[],b.labels=[],b.tasks=[],v(),h(),g(),m()}function s(e){var t=e.data;return t.success?t.data:t.title}function l(){return{calendars:i(),events:d(),labels:f(),tasks:p()}}function i(){return b.calendars}function d(){return b.events}function f(){return b.labels}function p(){return b.tasks}function v(){e.$broadcast("updateCalendars")}function h(){e.$broadcast("updateEvents")}function g(){e.$broadcast("updateLabels")}function m(){e.$broadcast("updateTasks")}var b=this;return b.calendars=[],b.events=[],b.labels=[],b.tasks=[],{cacheAll:n,cacheCalendars:r,cacheEvents:a,cacheLabels:o,cacheTasks:c,clearCache:u,getAll:l,getCalendars:i,getEvents:d,getLabels:f,getTasks:p}}angular.module("app").service("cacheService",e),e.$inject=["$rootScope","crudService"]}(),function(){"use strict";function e(e,t){function n(e){switch(this.type=e,this.base="api/",e){case"event":case"calendar":this.base+="activity/calendar/";break;case"label":case"task":this.base+="activity/task/";break;default:this.base+=e+"/"}this.base+=e+"Manager.php"}function r(t){return e.get(this.base+"?id="+t).then(l)["catch"](i)}function a(){return e.get(this.base+"?byuser=true").then(l)["catch"](i)}function o(t){return t=this.removeUnecessaryKeys(t),e.post(this.base,t).then(l)["catch"](i)}function c(t,n){return n=this.removeUnecessaryKeys(n),e.put(this.base+"?id="+t,n).then(l)["catch"](i)}function u(t){return e["delete"](this.base+"?id="+t).then(l)["catch"](i)}function s(t){return e["delete"](this.base+"?usewhere=true&where="+escape(t)).then(l)["catch"](i)}function l(e){return e}function i(e){return t.error(e),{success:"false",title:"Error when querying server.",message:e}}function d(e){for(var t=["id","person_id",this.type+"_id","activity_info_id","parent_name"],n=0;n<t.length;n++)delete e[t[n]];return e}var f=n;return f.prototype={get:r,getByUser:a,create:o,update:c,remove:u,removeWhere:s,removeUnecessaryKeys:d},f}angular.module("app").factory("crudService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(e,t){function n(t){return e.get(c.base+t).then(a)["catch"](o)}function r(t,n){return e.post(c.base+t,n).then(a)["catch"](o)}function a(e){return e}function o(e){return t.error(e),{success:"false",title:"Error when accessing variable.",message:e}}var c=this;return c.base="api/session/sessionVarManager.php?var=",{getVar:n,setVar:r}}angular.module("app").factory("sessionService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(e,t,n,r,a,o){function c(){p(),v(),e.$on("updateCalendars",p),e.$on("updateEvents",v),h.today=n.getToday(),h.selectedDay=h.today,h.month=n.getMonth(h.today)}function u(e){return n.getEndOfDay(e)}function s(e){return n.isSameDay(e,h.selectedDay)}function l(e){h.selectedDay=e.fullDate}function i(e,t){e.stopPropagation(),o.openEventModal(t,h.calendars)}function d(){h.month=n.lastMonth(h.month)}function f(){h.month=n.nextMonth(h.month)}function p(){h.calendars=r.getCalendars()}function v(){h.events=a.getEvents()}var h=this;h.events=[],h.calendar=[],h.today=null,h.selectedDay=null,h.month=null,h.isSameDayAsSelected=s,h.getEndOfDay=u,h.selectDay=l,h.showEventModal=i,h.lastMonth=d,h.nextMonth=f,c()}angular.module("app").controller("EventsController",e),e.$inject=["$rootScope","moment","calendarWidgetService","calendarService","eventsService","eventModalService"]}(),function(){"use strict";function e(){return{templateUrl:"modules/events/events.html",controller:"EventsController",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("spEvents",e)}(),function(){"use strict";function e(e,t){function n(e){return s.event.create(e).then(u)}function r(e){return e.event_id?c(e.event_id,e):n(e)}function a(e){return s.event.remove(e).then(u)}function o(){return t.getEvents()}function c(e,t){return s.event.update(e,t).then(u)}function u(e){var n=e.data;return n.success?(t.cacheEvents(),n.data):n.title}var s=this;return s.event=new e("event"),{createEvent:n,createOrUpdateEvent:r,deleteEvent:a,getEvents:o,updateEvent:c}}angular.module("app").factory("eventsService",e),e.$inject=["crudService","cacheService"]}(),function(){"use strict";function e(){function e(e,t,n,r){t[0].focus()}return{restrict:"A",link:e}}angular.module("app").directive("spAutoFocus",e)}(),function(){"use strict";function e(){function e(e,t,n,r){function a(){u()}function o(t){return t===e.otherModel.$viewValue}function c(e,t){r.$validate()}var u=e.$watch("otherModel",c);r.$validators.spCompareTo=o,t.on("$destroy",a)}return{require:"ngModel",scope:{otherModel:"=spCompareTo"},link:e}}angular.module("app").directive("spCompareTo",e)}(),function(){"use strict";function e(e){function t(){e.logout()}t()}angular.module("app").controller("LogoutController",e),e.$inject=["logoutService"]}(),function(){"use strict";function e(e,t,n,r,a){function o(){function o(t){a.clearCache(),e.$broadcast("updateUser"),n.go("login")}function c(e){r.error(e)}return t.post("api/user/logoutManager.php").then(o)["catch"](c)}return{logout:o}}angular.module("app").factory("logoutService",e),e.$inject=["$rootScope","$http","$state","$log","cacheService"]}(),function(){"use strict";function e(e,t,n){function r(){e.dismiss("cancel")}function a(){e.close()}function o(t){e.close(t)}function c(t){e.dismiss(t)}var u=this;u.groups=t,u.item=n,u.cancel=r,u.close=a,u.confirm=o,u.remove=c}angular.module("app").controller("ModalController",e),e.$inject=["$uibModalInstance","groups","item"]}(),function(){"use strict";function e(e){function t(){n.item.recurrence&&e.openRecurrenceModal(n.item)}var n=this;n.showRecurrenceModal=t}angular.module("app").controller("RecurrenceController",e),e.$inject=["recurrenceModalService"]}(),function(){"use strict";function e(){return{templateUrl:"modules/recurrence/recurrence.html",controller:"RecurrenceController",controllerAs:"rc",bindToController:!0,scope:{item:"="}}}angular.module("app").directive("spRepeat",e)}(),function(){"use strict";function e(){function e(e){e.recurrence=!1}function t(e){}return{clearRecurrence:e,constructRecurrence:t}}angular.module("app").factory("recurrenceService",e)}(),function(){"use strict";function e(e,t,n,r){function a(){u(),s(),e.$on("updateLabels",u),e.$on("updateTasks",s)}function o(e){r.openTaskModal(e,l.labels)}function c(e){t.toggleCompleted(e)}function u(){l.labels=n.getLabels()}function s(){l.tasks=t.getTasks()}var l=this;l.labels=[],l.tasks=[],l.showTaskModal=o,l.toggleCompleted=c,a()}angular.module("app").controller("TasksController",e),e.$inject=["$rootScope","tasksService","labelService","taskModalService"]}(),function(){"use strict";function e(){return{templateUrl:"modules/tasks/tasks.html",controller:"TasksController",controllerAs:"vm",bindToController:!0,scope:{order:"=",days:"=withinDays",inLabels:"=inGroups"}}}angular.module("app").directive("spTasks",e)}(),function(){"use strict";function e(e,t){function n(e){return l.task.create(e).then(s)}function r(e){return e.task_id?u(e.task_id,e):n(e)}function a(e){return l.task.remove(e).then(s)}function o(){return t.getTasks()}function c(e){return e.completed=!parseInt(e.completed),u(e.task_id,e).then(o)}function u(e,t){return l.task.update(e,t).then(s)}function s(e){var n=e.data;return n.success?(t.cacheTasks(),n.data):n.title}var l=this;return l.task=new e("task"),{createTask:n,createOrUpdateTask:r,deleteTask:a,getTasks:o,toggleCompleted:c,updateTask:u}}angular.module("app").factory("tasksService",e),e.$inject=["crudService","cacheService"]}(),function(){"use strict";function e(e,t,n){function r(e,t){return n.uploadFile(e).then(function(e){return e})}var a=this;a.uploadFile=r}angular.module("app").controller("UploadController",e),e.$inject=["$scope","$http","uploadService"]}(),function(){"use strict";function e(e){function t(t,n,r){function a(e){t.$apply(function(){var e=n[0].files[0];e.size<=o?t.uc.uploadFile(e).then(function(e){t.spFileChange=e}):alert("File must be less than "+o/1024/1024+"MB.")})}var o=2097152;e(r.spFileChange);n[0].addEventListener("change",a,!1)}return{restrict:"A",controller:"UploadController",controllerAs:"uc",link:t,scope:{spFileChange:"="}}}angular.module("app").directive("spFileChange",e),e.$inject=["$parse"]}(),function(){"use strict";function e(e,t){function n(n){var r=new FormData;return r.append("file",n),e.post("api/upload/uploadManager.php",r,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).then(function(e){return e.data.success?e.data.data:(t.error(e.title),"")})["catch"](function(e){t.error(e)})}return{uploadFile:n}}angular.module("app").factory("uploadService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(e){function t(){n.loading=!0,e.login(n.user).then(function(e){n.loading=!1,n.error=e})}var n=this;n.loading=!1,n.error="",n.login=t}angular.module("app").controller("LoginController",e),e.$inject=["loginService"]}(),function(){"use strict";function e(e,t,n,r,a){function o(o){function c(t){return t.data.success===!1?t.data.title:(a.cacheAll(),e.$broadcast("updateUser"),void n.go("dashboard"))}function u(e){return r.error(e),"Something went wrong. Please try again."}return o.name=o.name.toLowerCase().trim(),t.post("api/user/loginManager.php",o).then(c)["catch"](u)}return{login:o}}angular.module("app").factory("loginService",e),e.$inject=["$rootScope","$http","$state","$log","cacheService"]}(),function(){"use strict";function e(e){function t(){n.loading=!0,e.register(n.user).then(function(e){n.loading=!1,n.error=e})}var n=this;n.error="",n.loading=!1,n.register=t}angular.module("app").controller("RegisterController",e),e.$inject=["registerService"]}(),function(){"use strict";function e(e,t,n){function r(n){function r(n){return"false"===n.success?(t.error(n.title),n.title):void e.url("/login")}return n.name=n.name.toLowerCase().trim(),a.crud.create(n).then(r)}var a=this;return a.crud=new n("user"),{register:r}}angular.module("app").factory("registerService",e),e.$inject=["$location","$log","crudService"]}(),function(){"use strict";function e(e){this.labelId=e.labelId}angular.module("app").controller("LabelPageController",e),e.$inject=["$stateParams"]}(),function(){"use strict";function e(e,t,n){function r(){function e(e){return e.data.success!==!1?o.resolve(n.OK):o.reject(n.UNAUTHORIZED),o.promise}return t.getVar("name").then(e)}function a(){}var o=e.defer();return{isAuthenticated:r,isAdmin:a}}angular.module("app").factory("accessService",e),e.$inject=["$q","sessionService","statusService"]}(),function(){"use strict";function e(){return{OK:200,UNAUTHORIZED:401,FORBIDDEN:403}}angular.module("app").service("statusService",e)}(),function(){"use strict";function e(e,t){function n(e){return u.calendar.create(e).then(c)}function r(e){return u.calendar.remove(e).then(c)}function a(){return t.getCalendars()}function o(e,t){return u.calendar.update(e,t).then(c)}function c(e){var n=e.data;return n.success?(t.cacheCalendars(),n.data):n.title}var u=this;return u.calendar=new e("calendar"),{createCalendar:n,deleteCalendar:r,getCalendars:a,updateCalendar:o}}angular.module("app").factory("calendarService",e),e.$inject=["crudService","cacheService"]}(),function(){"use strict";function e(e,t,n){function r(t,r){var a={};return angular.extend(a,t),e.open({controller:"ModalController",controllerAs:"vm",templateUrl:"modules/events/modal/event.modal.html",resolve:{groups:function(){return r},item:a}}).result.then(function(e){return n.createOrUpdateEvent(e).then(n.getEvents)},function(e){return Number(e)?n.deleteEvent(e).then(n.getEvents):void 0})}return{openEventModal:r}}angular.module("app").factory("eventModalService",e),e.$inject=["$uibModal","calendarService","eventsService"]}(),function(){"use strict";function e(e){function t(e){return e.clone().add(1,"day").subtract(1,"ms")}function n(e){for(var t=[],n=e.clone().date(1).startOf("week"),r=0;6>r;r++)t.push(a(n,e.month())),n=n.add(1,"weeks");return t}function r(){return e()}function a(t,n){for(var r=[],a=t.clone(),o=0;7>o;o++)r.push({number:a.date(),isTargetMonth:a.month()===n,isToday:a.isSame(e(),"day"),fullDate:a}),a=a.clone().add(1,"days");return r}function o(e,t){return e.isSame(t,"day")}function c(e){return n(e[3][0].fullDate.clone().subtract(1,"months"))}function u(e){return n(e[3][0].fullDate.clone().add(1,"months"))}return{getEndOfDay:t,getMonth:n,getToday:r,getWeek:a,isSameDay:o,lastMonth:c,nextMonth:u}}angular.module("app").factory("calendarWidgetService",e),e.$inject=["moment"]}(),function(){"use strict";function e(e,t){function n(n){return e.open({controller:"ModalController",controllerAs:"vm",templateUrl:"modules/recurrence/modal/recurrence.modal.html",resolve:{groups:function(){return r},item:n}}).result.then(function(e){t.constructRecurrence(n)},function(e){t.clearRecurrence(n)})}var r={freq:["hourly","daily","weekly","monthly","yearly"],days:["mo","tu","we","th","fr","sa","su"]};return{openRecurrenceModal:n}}angular.module("app").factory("recurrenceModalService",e),e.$inject=["$uibModal","recurrenceService"]}(),function(){"use strict";function e(e,t){function n(e){return u.label.create(e).then(c)}function r(e){return u.label.remove(e).then(c)}function a(){return t.getLabels()}function o(e,t){return u.label.update(e,t).then(c)}function c(e){var n=e.data;return n.success?(t.cacheLabels(),n.data):n.title}var u=this;return u.label=new e("label"),{createLabel:n,deleteLabel:r,getLabels:a,updateLabel:o}}angular.module("app").factory("labelService",e),e.$inject=["crudService","cacheService"]}(),function(){"use strict";function e(e,t,n){function r(t,r){var a={};angular.extend(a,t),e.open({controller:"ModalController",controllerAs:"vm",templateUrl:"modules/tasks/modal/subtask.modal.html",resolve:{groups:r,item:a}}).result.then(function(e){n.createOrUpdateSubtask(e.subtask,e.task)},function(e){"string"!=typeof e&&n.deleteSubtask(e.subtask,e.task)})}return{openSubtaskModal:r}}angular.module("app").factory("subtaskModalService",e),e.$inject=["$uibModal","labelService","subtasksService"]}(),function(){"use strict";function e(e,t,n){function r(t,r){var a={};return angular.extend(a,t),e.open({controller:"ModalController",controllerAs:"vm",templateUrl:"modules/tasks/modal/task.modal.html",resolve:{groups:function(){return r},item:a}}).result.then(function(e){return n.createOrUpdateTask(e).then(n.getTasks)},function(e){return Number(e)?n.deleteTask(e).then(n.getTasks):void 0})}return{openTaskModal:r}}angular.module("app").factory("taskModalService",e),e.$inject=["$uibModal","labelService","tasksService"]}(),function(){"use strict";function e(e,t){function n(e){t.openSubtaskModal(e,a.task)}function r(t){e.toggleCompleted(t)}var a=this;a.showSubtaskModal=n,a.toggleCompleted=r}angular.module("app").controller("SubtasksController",e),e.$inject=["subtasksService","subtaskModalService"]}(),function(){"use strict";function e(){return{templateUrl:"modules/tasks/subtasks/subtasks.html",controller:"SubtasksController",controllerAs:"st",bindToController:!0,scope:{task:"="}}}angular.module("app").directive("spSubtasks",e)}(),function(){"use strict";function e(e,t){function n(e,t){t.subtasks||(t.subtasks={currentId:1,list:[]}),void 0===e.id&&(e.id=t.subtasks.currentId++,e.completed=!1,t.subtasks.list.push(e))}function r(e,t){t.subtasks.list.splice(t.subtasks.list.indexOf(e),1)}function a(e){e.completed=!e.completed}return{createOrUpdateSubtask:n,deleteSubtask:r,toggleCompleted:a}}angular.module("app").factory("subtasksService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(e,t,n){function r(){e.$on("updateUser",a)}function a(){n.getUser().then(function(e){o.user=e})}var o=this;o.user=t,r()}angular.module("app").controller("HeaderController",e),e.$inject=["$rootScope","user","headerService"]}(),function(){"use strict";function e(e,t,n){function r(){function e(e){var t=e.data;return t.success===!1?{name:"",avatar:"content/img/user.png"}:t.data}return n.getVar("all").then(e)}return{getUser:r}}angular.module("app").factory("headerService",e),e.$inject=["$http","$log","sessionService"]}(),function(){"use strict";function e(e,t,n){function r(){a(),o(),e.$on("updateCalendars",a),e.$on("updateLabels",o)}function a(){c.calendars=n.getCalendars()}function o(){c.labels=t.getLabels()}var c=this;c.collapsed=!0,c.labels=[],c.calendars=[],r()}angular.module("app").controller("SidebarController",e),e.$inject=["$rootScope","labelService","calendarService"]}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5taW4uanMiXSwibmFtZXMiOlsiYXBwQ29uZmlnIiwiJHN0YXRlUHJvdmlkZXIiLCIkdXJsUm91dGVyUHJvdmlkZXIiLCJjYWNoZUFsbCIsImNhY2hlU2VydmljZSIsImdldFVzZXIiLCJoZWFkZXJTZXJ2aWNlIiwiaXNBdXRoZW50aWNhdGVkIiwiYWNjZXNzU2VydmljZSIsInN0YXRlIiwidXJsIiwidGVtcGxhdGVVcmwiLCJhYnN0cmFjdCIsInJlc29sdmUiLCJjYWNoZSIsInVzZXIiLCJ2aWV3cyIsImhlYWRlciIsImNvbnRyb2xsZXIiLCJjb250cm9sbGVyQXMiLCJzaWRlYmFyIiwicGFyZW50IiwiY29udGVudEAiLCJvdGhlcndpc2UiLCJhbmd1bGFyIiwibW9kdWxlIiwiY29uZmlnIiwiJGluamVjdCIsInJ1bkJsb2NrIiwiYXBwU2VydmljZSIsImluaXQiLCJydW4iLCIkcm9vdFNjb3BlIiwiJHN0YXRlIiwic3RhdHVzU2VydmljZSIsIiRvbiIsInN0YXRlQ2hhbmdlRXJyb3IiLCJldmVudCIsInRvU3RhdGUiLCJ0b1BhcmFtcyIsImZyb21TdGF0ZSIsImZyb21QYXJhbXMiLCJlcnJvciIsIlVOQVVUSE9SSVpFRCIsInByZXZlbnREZWZhdWx0IiwiZ28iLCJmYWN0b3J5IiwiaW5Hcm91cHMiLCJhY3Rpdml0aWVzIiwiZ3JvdXBzIiwiYWN0aXZpdGllc0luR3JvdXBzIiwiaSIsImxlbmd0aCIsImxhYmVsX2lkIiwiY2FsZW5kYXJfaWQiLCJwdXNoIiwiZmlsdGVyIiwic2FtZURheUFzIiwibW9tZW50IiwiZXZlbnRzIiwiZGF5Iiwic2FtZURheUV2ZW50cyIsInJlc3VsdCIsImlzU2FtZSIsImR0X3N0YXJ0IiwiZHRfZW5kIiwid2l0aGluRGF5cyIsInRhc2tzIiwibnVtT2ZEYXlzIiwidGFza3NXaXRoaW5EYXlzIiwiZHVlIiwiaXNCZWZvcmUiLCJhZGQiLCJjcnVkU2VydmljZSIsImNhY2hlQ2FsZW5kYXJzIiwiY2FjaGVFdmVudHMiLCJjYWNoZUxhYmVscyIsImNhY2hlVGFza3MiLCJ2bSIsImNhbGVuZGFyIiwiZ2V0QnlVc2VyIiwidGhlbiIsInJlc3BvbnNlIiwiY2FsZW5kYXJzIiwiZ2V0UmVzdWx0IiwidXBkYXRlQ2FsZW5kYXJzIiwidXBkYXRlRXZlbnRzIiwibGFiZWwiLCJsYWJlbHMiLCJ1cGRhdGVMYWJlbHMiLCJ0YXNrIiwidXBkYXRlVGFza3MiLCJjbGVhckNhY2hlIiwiZGF0YSIsInN1Y2Nlc3MiLCJ0aXRsZSIsImdldEFsbCIsImdldENhbGVuZGFycyIsImdldEV2ZW50cyIsImdldExhYmVscyIsImdldFRhc2tzIiwiJGJyb2FkY2FzdCIsInRoaXMiLCJzZXJ2aWNlIiwiJGh0dHAiLCIkbG9nIiwidHlwZSIsImJhc2UiLCJnZXQiLCJpZCIsInByb21pc2VDb21wbGV0ZSIsInByb21pc2VGYWlsZWQiLCJjcmVhdGUiLCJyZW1vdmVVbmVjZXNzYXJ5S2V5cyIsInBvc3QiLCJ1cGRhdGUiLCJwdXQiLCJyZW1vdmUiLCJyZW1vdmVXaGVyZSIsIndoZXJlIiwiZXNjYXBlIiwibWVzc2FnZSIsInRvRGVsZXRlIiwiY3J1ZCIsInByb3RvdHlwZSIsInNlc3Npb25TZXJ2aWNlIiwiZ2V0VmFyIiwiJG5hbWUiLCJzZXRWYXIiLCIkdmFsdWUiLCJFdmVudHNDb250cm9sbGVyIiwiY2FsZW5kYXJXaWRnZXRTZXJ2aWNlIiwiY2FsZW5kYXJTZXJ2aWNlIiwiZXZlbnRzU2VydmljZSIsImV2ZW50TW9kYWxTZXJ2aWNlIiwiYWN0aXZhdGUiLCJ0b2RheSIsImdldFRvZGF5Iiwic2VsZWN0ZWREYXkiLCJtb250aCIsImdldE1vbnRoIiwiZ2V0RW5kT2ZEYXkiLCJpc1NhbWVEYXlBc1NlbGVjdGVkIiwiaXNTYW1lRGF5Iiwic2VsZWN0RGF5IiwiZnVsbERhdGUiLCJzaG93RXZlbnRNb2RhbCIsImNsaWNrRXZlbnQiLCJzdG9wUHJvcGFnYXRpb24iLCJvcGVuRXZlbnRNb2RhbCIsImxhc3RNb250aCIsIm5leHRNb250aCIsImV2ZW50c0RpcmVjdGl2ZSIsImJpbmRUb0NvbnRyb2xsZXIiLCJkaXJlY3RpdmUiLCJjcmVhdGVFdmVudCIsImNyZWF0ZU9yVXBkYXRlRXZlbnQiLCJldmVudF9pZCIsInVwZGF0ZUV2ZW50IiwiZGVsZXRlRXZlbnQiLCJyZXMiLCJhdXRvRm9jdXNEaXJlY3RpdmUiLCJsaW5rIiwic2NvcGUiLCJlbGVtZW50IiwiYXR0cnMiLCJuZ01vZGVsIiwiZm9jdXMiLCJyZXN0cmljdCIsImNvbXBhcmVUb0RpcmVjdGl2ZSIsImNsZWFuVXAiLCJ1bmJpbmRXYXRjaCIsImNvbXBhcmVWYWx1ZXMiLCJ2aWV3VmFsdWUiLCJvdGhlck1vZGVsIiwiJHZpZXdWYWx1ZSIsInZhbGlkYXRlT25DaGFuZ2UiLCJuZXdWYWx1ZSIsIm9sZFZhbHVlIiwiJHZhbGlkYXRlIiwiJHdhdGNoIiwiJHZhbGlkYXRvcnMiLCJzcENvbXBhcmVUbyIsIm9uIiwicmVxdWlyZSIsIkxvZ291dENvbnRyb2xsZXIiLCJsb2dvdXRTZXJ2aWNlIiwibG9nb3V0IiwibG9nb3V0Q29tcGxldGUiLCJsb2dvdXRGYWlsZWQiLCJNb2RhbENvbnRyb2xsZXIiLCIkdWliTW9kYWxJbnN0YW5jZSIsIml0ZW0iLCJjYW5jZWwiLCJkaXNtaXNzIiwiY2xvc2UiLCJjb25maXJtIiwiUmVjdXJyZW5jZUNvbnRyb2xsZXIiLCJyZWN1cnJlbmNlTW9kYWxTZXJ2aWNlIiwic2hvd1JlY3VycmVuY2VNb2RhbCIsInJjIiwicmVjdXJyZW5jZSIsIm9wZW5SZWN1cnJlbmNlTW9kYWwiLCJyZWN1cnJlbmNlRGlyZWN0aXZlIiwicmVjdXJyZW5jZVNlcnZpY2UiLCJjbGVhclJlY3VycmVuY2UiLCJjb25zdHJ1Y3RSZWN1cnJlbmNlIiwiVGFza3NDb250cm9sbGVyIiwidGFza3NTZXJ2aWNlIiwibGFiZWxTZXJ2aWNlIiwidGFza01vZGFsU2VydmljZSIsInNob3dUYXNrTW9kYWwiLCJvcGVuVGFza01vZGFsIiwidG9nZ2xlQ29tcGxldGVkIiwidGFza3NEaXJlY3RpdmUiLCJvcmRlciIsImRheXMiLCJpbkxhYmVscyIsImNyZWF0ZVRhc2siLCJjcmVhdGVPclVwZGF0ZVRhc2siLCJ0YXNrX2lkIiwidXBkYXRlVGFzayIsImRlbGV0ZVRhc2siLCJjb21wbGV0ZWQiLCJwYXJzZUludCIsIlVwbG9hZENvbnRyb2xsZXIiLCIkc2NvcGUiLCJ1cGxvYWRTZXJ2aWNlIiwidXBsb2FkRmlsZSIsImZpbGUiLCJvbGRGaWxlIiwiZmlsZVBhdGgiLCJ1YyIsInVwbG9hZERpcmVjdGl2ZSIsIiRwYXJzZSIsImZpbGVIYW5kbGVyIiwiJGFwcGx5IiwiZmlsZXMiLCJzaXplIiwibWF4RmlsZVNpemUiLCJzcEZpbGVDaGFuZ2UiLCJhbGVydCIsImFkZEV2ZW50TGlzdGVuZXIiLCJmb3JtRGF0YSIsIkZvcm1EYXRhIiwiYXBwZW5kIiwidHJhbnNmb3JtUmVxdWVzdCIsImlkZW50aXR5IiwiaGVhZGVycyIsIkNvbnRlbnQtVHlwZSIsInVuZGVmaW5lZCIsIkxvZ2luQ29udHJvbGxlciIsImxvZ2luU2VydmljZSIsImxvZ2luIiwibG9hZGluZyIsImxvZ2luQ29tcGxldGUiLCJsb2dpbkZhaWxlZCIsIm5hbWUiLCJ0b0xvd2VyQ2FzZSIsInRyaW0iLCJSZWdpc3RlckNvbnRyb2xsZXIiLCJyZWdpc3RlclNlcnZpY2UiLCJyZWdpc3RlciIsIiRsb2NhdGlvbiIsInJlZ2lzdHJhdGlvbkNvbXBsZXRlIiwiTGFiZWxQYWdlQ29udHJvbGxlciIsIiRzdGF0ZVBhcmFtcyIsImxhYmVsSWQiLCIkcSIsImlzQXV0aGVudGljYXRlZENvbXBsZXRlIiwiZGVmZXJyZWQiLCJPSyIsInJlamVjdCIsInByb21pc2UiLCJpc0FkbWluIiwiZGVmZXIiLCJGT1JCSURERU4iLCJjcmVhdGVDYWxlbmRhciIsImRlbGV0ZUNhbGVuZGFyIiwidXBkYXRlQ2FsZW5kYXIiLCIkdWliTW9kYWwiLCJjbG9uZWRFdmVudCIsImV4dGVuZCIsIm9wZW4iLCJOdW1iZXIiLCJjbG9uZSIsInN1YnRyYWN0IiwiYURheSIsImRhdGUiLCJzdGFydE9mIiwiZ2V0V2VlayIsInN0YXJ0RGF5IiwidGFyZ2V0TW9udGgiLCJ3ZWVrIiwibnVtYmVyIiwiaXNUYXJnZXRNb250aCIsImlzVG9kYXkiLCJkYXkxIiwiZGF5MiIsInNyY01vbnRoIiwicmVjdXJyZW5jZUluZm8iLCJmcmVxIiwiY3JlYXRlTGFiZWwiLCJkZWxldGVMYWJlbCIsInVwZGF0ZUxhYmVsIiwic3VidGFza01vZGFsU2VydmljZSIsInN1YnRhc2tzU2VydmljZSIsIm9wZW5TdWJ0YXNrTW9kYWwiLCJzdWJ0YXNrIiwiY2xvbmVkU3VidGFzayIsImNyZWF0ZU9yVXBkYXRlU3VidGFzayIsImRlbGV0ZVN1YnRhc2siLCJjbG9uZWRUYXNrIiwiU3VidGFza3NDb250cm9sbGVyIiwic2hvd1N1YnRhc2tNb2RhbCIsInN0Iiwic3VidGFza3NEaXJlY3RpdmUiLCJzdWJ0YXNrcyIsImN1cnJlbnRJZCIsImxpc3QiLCJzcGxpY2UiLCJpbmRleE9mIiwiSGVhZGVyQ29udHJvbGxlciIsInVwZGF0ZVVzZXIiLCJnZXROYW1lQ29tcGxldGUiLCJhdmF0YXIiLCJTaWRlYmFyQ29udHJvbGxlciIsImNvbGxhcHNlZCJdLCJtYXBwaW5ncyI6IkNBQUEsV0FDQyxZQU9BLFNBQVNBLEdBQVVDLEVBQWdCQyxHQXFJbEMsUUFBU0MsR0FBU0MsR0FDakIsTUFBT0EsR0FBYUQsV0FHckIsUUFBU0UsR0FBUUMsR0FDaEIsTUFBT0EsR0FBY0QsVUFHdEIsUUFBU0UsR0FBZ0JDLEdBQ3hCLE1BQU9BLEdBQWNELGtCQTVJdEJOLEVBQ0VRLE1BQU0sUUFDTkMsSUFBSyxHQUNMQyxZQUFhLGFBQ2JDLFlBQVUsRUFDVkMsU0FDQ0MsT0FBUSxlQUFnQlgsR0FDeEJZLE1BQU8sZ0JBQWlCVixJQUV6QlcsT0FDQ0MsUUFDQ04sWUFBYSxrQ0FDYk8sV0FBWSxtQkFDWkMsYUFBYyxNQUVmQyxTQUNDVCxZQUFhLG9DQUNiTyxXQUFZLG9CQUNaQyxhQUFjLFNBSWhCVixNQUFNLFNBQ05DLElBQUssU0FDTFcsT0FBUSxPQUNSTCxPQUNDTSxZ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QUNFQyxPQUFPLE9BQ1BQLFdBQVcsbUJBQW9CZ1QsR0FFakNBLEVBQWlCdlMsU0FBVyxhQUFjLE9BQVEsb0JBa0JuRCxXQUNDLFlBT0EsU0FBU3JCLEdBQWNrRyxFQUFPQyxFQUFNb0IsR0FLbkMsUUFBU3hILEtBSVIsUUFBUytULEdBQWdCbFAsR0FDeEIsR0FBSXBCLEdBQVNvQixFQUFTVyxJQUV0QixPQUFJL0IsR0FBT2dDLFdBQVksR0FDYm1LLEtBQU0sR0FBSW9FLE9BQVEsd0JBR3JCdlEsRUFBTytCLEtBVmYsTUFBT2dDLEdBQWVDLE9BQU8sT0FDM0I3QyxLQUFLbVAsR0FOUixPQUNDL1QsUUFBU0EsR0FQWG1CLFFBQ0VDLE9BQU8sT0FDUHFCLFFBQVEsZ0JBQWlCeEMsR0FFM0JBLEVBQWNxQixTQUFXLFFBQVMsT0FBUSxxQkF1QjNDLFdBQ0MsWUFPQSxTQUFTMlMsR0FBa0J0UyxFQUFZaUwsRUFBYzdFLEdBUXBELFFBQVNHLEtBQ1JsRCxJQUNBSSxJQUVBekQsRUFBV0csSUFBSSxrQkFBbUJrRCxHQUNsQ3JELEVBQVdHLElBQUksZUFBZ0JzRCxHQUdoQyxRQUFTSixLQUNSUCxFQUFHSyxVQUFZaUQsRUFBZ0JuQyxlQUdoQyxRQUFTUixLQUNSWCxFQUFHVSxPQUFTeUgsRUFBYTlHLFlBcEIxQixHQUFJckIsR0FBS3dCLElBQ1R4QixHQUFHeVAsV0FBWSxFQUNmelAsRUFBR1UsVUFDSFYsRUFBR0ssYUFFSG9ELElBWEQvRyxRQUNFQyxPQUFPLE9BQ1BQLFdBQVcsb0JBQXFCb1QsR0FFbENBLEVBQWtCM1MsU0FBVyxhQUFjLGVBQWdCIiwiZmlsZSI6ImFwcC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnLCBbJ3VpLnJvdXRlcicsICd1aS5ib290c3RyYXAnLCAnYW5ndWxhck1vbWVudCddKVxyXG5cdFx0LmNvbmZpZyhhcHBDb25maWcpO1xyXG5cclxuXHRhcHBDb25maWcuJGluamVjdCA9IFsnJHN0YXRlUHJvdmlkZXInLCAnJHVybFJvdXRlclByb3ZpZGVyJ107XHJcblx0ZnVuY3Rpb24gYXBwQ29uZmlnKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIpIHtcclxuXHJcblx0XHQkc3RhdGVQcm92aWRlclxyXG5cdFx0XHQuc3RhdGUoJ3Jvb3QnLCB7XHJcblx0XHRcdFx0dXJsOiAnJyxcclxuXHRcdFx0XHR0ZW1wbGF0ZVVybDogJ2luZGV4Lmh0bWwnLFxyXG5cdFx0XHRcdGFic3RyYWN0OiB0cnVlLFxyXG5cdFx0XHRcdHJlc29sdmU6IHtcclxuXHRcdFx0XHRcdGNhY2hlOiBbJ2NhY2hlU2VydmljZScsIGNhY2hlQWxsXSxcclxuXHRcdFx0XHRcdHVzZXI6IFsnaGVhZGVyU2VydmljZScsIGdldFVzZXJdXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR2aWV3czoge1xyXG5cdFx0XHRcdFx0J2hlYWRlcic6IHtcclxuXHRcdFx0XHRcdFx0dGVtcGxhdGVVcmw6ICdwYWdlcy9sYXlvdXQvaGVhZGVyL2hlYWRlci5odG1sJyxcclxuXHRcdFx0XHRcdFx0Y29udHJvbGxlcjogJ0hlYWRlckNvbnRyb2xsZXInLFxyXG5cdFx0XHRcdFx0XHRjb250cm9sbGVyQXM6ICdoYydcclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHQnc2lkZWJhcic6IHtcclxuXHRcdFx0XHRcdFx0dGVtcGxhdGVVcmw6ICdwYWdlcy9sYXlvdXQvc2lkZWJhci9zaWRlYmFyLmh0bWwnLFxyXG5cdFx0XHRcdFx0XHRjb250cm9sbGVyOiAnU2lkZWJhckNvbnRyb2xsZXInLFxyXG5cdFx0XHRcdFx0XHRjb250cm9sbGVyQXM6ICdzYydcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pXHJcblx0XHRcdC5zdGF0ZSgnbG9naW4nLCB7XHJcblx0XHRcdFx0dXJsOiAnL2xvZ2luJyxcclxuXHRcdFx0XHRwYXJlbnQ6ICdyb290JyxcclxuXHRcdFx0XHR2aWV3czoge1xyXG5cdFx0XHRcdFx0J2NvbnRlbnRAJzoge1xyXG5cdFx0XHRcdFx0XHR0ZW1wbGF0ZVVybDogJ3BhZ2VzL2xvZ2luL2xvZ2luLmh0bWwnLFxyXG5cdFx0XHRcdFx0XHRjb250cm9sbGVyOiAnTG9naW5Db250cm9sbGVyJyxcclxuXHRcdFx0XHRcdFx0Y29udHJvbGxlckFzOiAndm0nXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KVxyXG5cdFx0XHQuc3RhdGUoJ2xvZ291dCcsIHtcclxuXHRcdFx0XHR1cmw6ICcvbG9nb3V0JyxcclxuXHRcdFx0XHRwYXJlbnQ6ICdyb290JyxcclxuXHRcdFx0XHR2aWV3czoge1xyXG5cdFx0XHRcdFx0J2NvbnRlbnRAJzoge1xyXG5cdFx0XHRcdFx0XHRjb250cm9sbGVyOiAnTG9nb3V0Q29udHJvbGxlcicsXHJcblx0XHRcdFx0XHRcdGNvbnRyb2xsZXJBczogJ3ZtJ1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSlcclxuXHRcdFx0LnN0YXRlKCdyZWdpc3RlcicsIHtcclxuXHRcdFx0XHR1cmw6ICcvcmVnaXN0ZXInLFxyXG5cdFx0XHRcdHBhcmVudDogJ3Jvb3QnLFxyXG5cdFx0XHRcdHZpZXdzOiB7XHJcblx0XHRcdFx0XHQnY29udGVudEAnOiB7XHJcblx0XHRcdFx0XHRcdHRlbXBsYXRlVXJsOiAncGFnZXMvcmVnaXN0ZXIvcmVnaXN0ZXIuaHRtbCcsXHJcblx0XHRcdFx0XHRcdGNvbnRyb2xsZXI6ICdSZWdpc3RlckNvbnRyb2xsZXInLFxyXG5cdFx0XHRcdFx0XHRjb250cm9sbGVyQXM6ICd2bSdcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pXHJcblx0XHRcdC5zdGF0ZSgnZGFzaGJvYXJkJywge1xyXG5cdFx0XHRcdHVybDogJy9kYXNoYm9hcmQnLFxyXG5cdFx0XHRcdHBhcmVudDogJ3Jvb3QnLFxyXG5cdFx0XHRcdHZpZXdzOiB7XHJcblx0XHRcdFx0XHQnY29udGVudEAnOiB7XHJcblx0XHRcdFx0XHRcdHRlbXBsYXRlVXJsOiAncGFnZXMvZGFzaGJvYXJkL2Rhc2hib2FyZC5odG1sJyxcclxuXHRcdFx0XHRcdFx0cmVzb2x2ZToge1xyXG5cdFx0XHRcdFx0XHRcdGlzQXV0aGVudGljYXRlZDogWydhY2Nlc3NTZXJ2aWNlJywgaXNBdXRoZW50aWNhdGVkXVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KVxyXG5cdFx0XHQuc3RhdGUoJ2xhYmVscycsIHtcclxuXHRcdFx0XHR1cmw6ICcvbGFiZWxzJyxcclxuXHRcdFx0XHRwYXJlbnQ6ICdyb290J1xyXG5cdFx0XHR9KVxyXG5cdFx0XHQuc3RhdGUoJ2xhYmVscy5sYWJlbCcsIHtcclxuXHRcdFx0XHR1cmw6ICcvOmxhYmVsSWQnLFxyXG5cdFx0XHRcdHZpZXdzOiB7XHJcblx0XHRcdFx0XHQnY29udGVudEAnOiB7XHJcblx0XHRcdFx0XHRcdHRlbXBsYXRlVXJsOiBcInBhZ2VzL3Rhc2tzL2xhYmVsLmh0bWxcIixcclxuXHRcdFx0XHRcdFx0Y29udHJvbGxlcjogJ0xhYmVsUGFnZUNvbnRyb2xsZXInLFxyXG5cdFx0XHRcdFx0XHRjb250cm9sbGVyQXM6ICd2bSdcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pXHJcblx0XHRcdC5zdGF0ZSgnaW5ib3gnLCB7XHJcblx0XHRcdFx0dXJsOiAnL2luYm94JyxcclxuXHRcdFx0XHRwYXJlbnQ6ICdyb290JyxcclxuXHRcdFx0XHR2aWV3czoge1xyXG5cdFx0XHRcdFx0J2NvbnRlbnRAJzoge1xyXG5cdFx0XHRcdFx0XHR0ZW1wbGF0ZVVybDogJ3BhZ2VzL3Rhc2tzL2luYm94Lmh0bWwnLFxyXG5cdFx0XHRcdFx0XHRyZXNvbHZlOiB7XHJcblx0XHRcdFx0XHRcdFx0aXNBdXRoZW50aWNhdGVkOiBbJ2FjY2Vzc1NlcnZpY2UnLCBpc0F1dGhlbnRpY2F0ZWRdXHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pXHJcblx0XHRcdC5zdGF0ZSgndG9kYXknLCB7XHJcblx0XHRcdFx0dXJsOiAnL3RvZGF5JyxcclxuXHRcdFx0XHRwYXJlbnQ6ICdyb290JyxcclxuXHRcdFx0XHR2aWV3czoge1xyXG5cdFx0XHRcdFx0J2NvbnRlbnRAJzoge1xyXG5cdFx0XHRcdFx0XHR0ZW1wbGF0ZVVybDogJ3BhZ2VzL3Rhc2tzL3RvZGF5Lmh0bWwnLFxyXG5cdFx0XHRcdFx0XHRyZXNvbHZlOiB7XHJcblx0XHRcdFx0XHRcdFx0aXNBdXRoZW50aWNhdGVkOiBbJ2FjY2Vzc1NlcnZpY2UnLCBpc0F1dGhlbnRpY2F0ZWRdXHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pXHJcblx0XHRcdC5zdGF0ZSgnd2VlaycsIHtcclxuXHRcdFx0XHR1cmw6ICcvd2VlaycsXHJcblx0XHRcdFx0cGFyZW50OiAncm9vdCcsXHJcblx0XHRcdFx0dmlld3M6IHtcclxuXHRcdFx0XHRcdCdjb250ZW50QCc6IHtcclxuXHRcdFx0XHRcdFx0dGVtcGxhdGVVcmw6ICdwYWdlcy90YXNrcy93ZWVrLmh0bWwnLFxyXG5cdFx0XHRcdFx0XHRyZXNvbHZlOiB7XHJcblx0XHRcdFx0XHRcdFx0aXNBdXRoZW50aWNhdGVkOiBbJ2FjY2Vzc1NlcnZpY2UnLCBpc0F1dGhlbnRpY2F0ZWRdXHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pXHJcblx0XHRcdC5zdGF0ZSgnY2FsZW5kYXInLCB7XHJcblx0XHRcdFx0dXJsOiAnL2NhbGVuZGFyJyxcclxuXHRcdFx0XHRwYXJlbnQ6ICdyb290JyxcclxuXHRcdFx0XHR2aWV3czoge1xyXG5cdFx0XHRcdFx0J2NvbnRlbnRAJzoge1xyXG5cdFx0XHRcdFx0XHR0ZW1wbGF0ZVVybDogJ3BhZ2VzL2NhbGVuZGFyL2NhbGVuZGFyLmh0bWwnLFxyXG5cdFx0XHRcdFx0XHRyZXNvbHZlOiB7XHJcblx0XHRcdFx0XHRcdFx0aXNBdXRoZW50aWNhdGVkOiBbJ2FjY2Vzc1NlcnZpY2UnLCBpc0F1dGhlbnRpY2F0ZWRdXHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdCR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy9kYXNoYm9hcmQnKTtcclxuXHJcblx0XHRmdW5jdGlvbiBjYWNoZUFsbChjYWNoZVNlcnZpY2UpIHtcclxuXHRcdFx0cmV0dXJuIGNhY2hlU2VydmljZS5jYWNoZUFsbCgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGdldFVzZXIoaGVhZGVyU2VydmljZSkge1xyXG5cdFx0XHRyZXR1cm4gaGVhZGVyU2VydmljZS5nZXRVc2VyKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gaXNBdXRoZW50aWNhdGVkKGFjY2Vzc1NlcnZpY2UpIHtcclxuXHRcdFx0cmV0dXJuIGFjY2Vzc1NlcnZpY2UuaXNBdXRoZW50aWNhdGVkKCk7XHJcblx0XHR9XHJcblx0fVxyXG59KSgpO1xuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5ydW4ocnVuQmxvY2spO1xyXG5cclxuXHRydW5CbG9jay4kaW5qZWN0ID0gWydhcHBTZXJ2aWNlJ107XHJcblx0ZnVuY3Rpb24gcnVuQmxvY2soYXBwU2VydmljZSkge1xyXG5cdFx0YXBwU2VydmljZS5pbml0KCk7XHJcblx0fVxyXG59KSgpO1xuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5mYWN0b3J5KCdhcHBTZXJ2aWNlJywgYXBwU2VydmljZSk7XHJcblxyXG5cdGFwcFNlcnZpY2UuJGluamVjdCA9IFsnJHJvb3RTY29wZScsICckc3RhdGUnLCAnc3RhdHVzU2VydmljZSddO1xyXG5cdGZ1bmN0aW9uIGFwcFNlcnZpY2UoJHJvb3RTY29wZSwgJHN0YXRlLCBzdGF0dXNTZXJ2aWNlKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRpbml0OiBpbml0XHJcblx0XHR9O1xyXG5cclxuXHRcdGZ1bmN0aW9uIGluaXQoKSB7XHJcblx0XHRcdCRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VFcnJvcicsIHN0YXRlQ2hhbmdlRXJyb3IpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIHN0YXRlQ2hhbmdlRXJyb3IoZXZlbnQsIHRvU3RhdGUsIHRvUGFyYW1zLCBmcm9tU3RhdGUsIGZyb21QYXJhbXMsIGVycm9yKSB7XHJcblx0XHRcdGlmIChlcnJvciA9PT0gc3RhdHVzU2VydmljZS5VTkFVVEhPUklaRUQpIHtcclxuXHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0XHRcdCRzdGF0ZS5nbygnbG9naW4nKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxufSkoKTtcclxuXG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmZpbHRlcignaW5Hcm91cHMnLCBpbkdyb3Vwcyk7XHJcblxyXG5cdGluR3JvdXBzLiRpbmplY3QgPSBbXTtcclxuXHRmdW5jdGlvbiBpbkdyb3VwcygpIHtcclxuXHRcdHJldHVybiBmdW5jdGlvbihhY3Rpdml0aWVzLCBncm91cHMpIHtcclxuXHRcdFx0aWYgKCFncm91cHMpIHtcclxuXHRcdFx0XHRyZXR1cm4gYWN0aXZpdGllcztcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dmFyIGFjdGl2aXRpZXNJbkdyb3VwcyA9IFtdO1xyXG5cclxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhY3Rpdml0aWVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0aWYgKGFjdGl2aXRpZXNbaV0ubGFiZWxfaWQgPT09IGdyb3VwcyB8fFxyXG5cdFx0XHRcdFx0YWN0aXZpdGllc1tpXS5jYWxlbmRhcl9pZCA9PT0gZ3JvdXBzXHJcblx0XHRcdFx0KSB7XHJcblx0XHRcdFx0XHRhY3Rpdml0aWVzSW5Hcm91cHMucHVzaChhY3Rpdml0aWVzW2ldKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBhY3Rpdml0aWVzSW5Hcm91cHM7XHJcblx0XHR9O1xyXG5cdH1cclxufSkoKTtcbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuZmlsdGVyKCdzYW1lRGF5QXMnLCBzYW1lRGF5QXMpO1xyXG5cclxuXHRzYW1lRGF5QXMuJGluamVjdCA9IFsnbW9tZW50J107XHJcblx0ZnVuY3Rpb24gc2FtZURheUFzKG1vbWVudCkge1xyXG5cdFx0cmV0dXJuIGZ1bmN0aW9uKGV2ZW50cywgZGF5KSB7XHJcblx0XHRcdHZhciBzYW1lRGF5RXZlbnRzID0gW107XHJcblxyXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRcdHZhciByZXN1bHQgPSBkYXkuaXNTYW1lKG1vbWVudChldmVudHNbaV0uZHRfc3RhcnQpLCAnZGF5Jyk7XHJcblxyXG5cdFx0XHRcdGlmICghcmVzdWx0KSB7XHJcblx0XHRcdFx0XHRyZXN1bHQgPSBkYXkuaXNTYW1lKG1vbWVudChldmVudHNbaV0uZHRfZW5kKSwgJ2RheScpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYocmVzdWx0KSB7XHJcblx0XHRcdFx0XHRzYW1lRGF5RXZlbnRzLnB1c2goZXZlbnRzW2ldKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBzYW1lRGF5RXZlbnRzO1xyXG5cdFx0fTtcclxuXHR9XHJcbn0pKCk7XG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmZpbHRlcignd2l0aGluRGF5cycsIHdpdGhpbkRheXMpO1xyXG5cclxuXHR3aXRoaW5EYXlzLiRpbmplY3QgPSBbJ21vbWVudCddO1xyXG5cdGZ1bmN0aW9uIHdpdGhpbkRheXMobW9tZW50KSB7XHJcblx0XHRyZXR1cm4gZnVuY3Rpb24odGFza3MsIG51bU9mRGF5cykge1xyXG5cdFx0XHRpZiAoIW51bU9mRGF5cykge1xyXG5cdFx0XHRcdHJldHVybiB0YXNrcztcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dmFyIHRhc2tzV2l0aGluRGF5cyA9IFtdO1xyXG5cclxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0YXNrcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRcdHZhciByZXN1bHQ7XHJcblxyXG5cdFx0XHRcdGlmICghdGFza3NbaV0uZHVlIHx8ICh0YXNrc1tpXS5kdWUgJiZcclxuXHRcdFx0XHRcdG1vbWVudCh0YXNrc1tpXS5kdWUpLmlzQmVmb3JlKG1vbWVudCgpLmFkZChudW1PZkRheXMsICdkYXlzJykpKVxyXG5cdFx0XHRcdCkge1xyXG5cdFx0XHRcdFx0dGFza3NXaXRoaW5EYXlzLnB1c2godGFza3NbaV0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIHRhc2tzV2l0aGluRGF5cztcclxuXHRcdH07XHJcblx0fVxyXG59KSgpO1xuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5zZXJ2aWNlKCdjYWNoZVNlcnZpY2UnLCBjYWNoZVNlcnZpY2UpO1xyXG5cclxuXHRjYWNoZVNlcnZpY2UuJGluamVjdCA9IFsnJHJvb3RTY29wZScsICdjcnVkU2VydmljZSddO1xyXG5cdGZ1bmN0aW9uIGNhY2hlU2VydmljZSgkcm9vdFNjb3BlLCBjcnVkU2VydmljZSkge1xyXG5cdFx0dmFyIHZtID0gdGhpczsgLy8ganNoaW50IGlnbm9yZTogbGluZVxyXG5cdFx0dm0uY2FsZW5kYXJzID0gW107XHJcblx0XHR2bS5ldmVudHMgPSBbXTtcclxuXHRcdHZtLmxhYmVscyA9IFtdO1xyXG5cdFx0dm0udGFza3MgPSBbXTtcclxuXHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRjYWNoZUFsbDogY2FjaGVBbGwsXHJcblx0XHRcdGNhY2hlQ2FsZW5kYXJzOiBjYWNoZUNhbGVuZGFycyxcclxuXHRcdFx0Y2FjaGVFdmVudHM6IGNhY2hlRXZlbnRzLFxyXG5cdFx0XHRjYWNoZUxhYmVsczogY2FjaGVMYWJlbHMsXHJcblx0XHRcdGNhY2hlVGFza3M6IGNhY2hlVGFza3MsXHJcblx0XHRcdGNsZWFyQ2FjaGU6IGNsZWFyQ2FjaGUsXHJcblxyXG5cdFx0XHRnZXRBbGw6IGdldEFsbCxcclxuXHRcdFx0Z2V0Q2FsZW5kYXJzOiBnZXRDYWxlbmRhcnMsXHJcblx0XHRcdGdldEV2ZW50czogZ2V0RXZlbnRzLFxyXG5cdFx0XHRnZXRMYWJlbHM6IGdldExhYmVscyxcclxuXHRcdFx0Z2V0VGFza3M6IGdldFRhc2tzXHJcblx0XHR9O1xyXG5cclxuXHRcdC8vIFRPRE86IElkZWFsbHkgb25lIEFQSSBjYWxsLlxyXG5cdFx0ZnVuY3Rpb24gY2FjaGVBbGwoKSB7XHJcblx0XHRcdGNhY2hlQ2FsZW5kYXJzKCk7XHJcblx0XHRcdGNhY2hlRXZlbnRzKCk7XHJcblx0XHRcdGNhY2hlTGFiZWxzKCk7XHJcblx0XHRcdGNhY2hlVGFza3MoKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBjYWNoZUNhbGVuZGFycygpIHtcclxuXHRcdFx0dm0uY2FsZW5kYXIgPSBuZXcgY3J1ZFNlcnZpY2UoJ2NhbGVuZGFyJyk7XHJcblx0XHRcdHZtLmNhbGVuZGFyLmdldEJ5VXNlcigpXHJcblx0XHRcdFx0LnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuXHRcdFx0XHRcdHZtLmNhbGVuZGFycyA9IGdldFJlc3VsdChyZXNwb25zZSk7XHJcblx0XHRcdFx0XHR1cGRhdGVDYWxlbmRhcnMoKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBjYWNoZUV2ZW50cygpIHtcclxuXHRcdFx0dm0uZXZlbnQgPSBuZXcgY3J1ZFNlcnZpY2UoJ2V2ZW50Jyk7XHJcblx0XHRcdHZtLmV2ZW50LmdldEJ5VXNlcigpXHJcblx0XHRcdFx0LnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuXHRcdFx0XHRcdHZtLmV2ZW50cyA9IGdldFJlc3VsdChyZXNwb25zZSk7XHJcblx0XHRcdFx0XHR1cGRhdGVFdmVudHMoKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBjYWNoZUxhYmVscygpIHtcclxuXHRcdFx0dm0ubGFiZWwgPSBuZXcgY3J1ZFNlcnZpY2UoJ2xhYmVsJyk7XHJcblx0XHRcdHZtLmxhYmVsLmdldEJ5VXNlcigpXHJcblx0XHRcdFx0LnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuXHRcdFx0XHRcdHZtLmxhYmVscyA9IGdldFJlc3VsdChyZXNwb25zZSk7XHJcblx0XHRcdFx0XHR1cGRhdGVMYWJlbHMoKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBjYWNoZVRhc2tzKCkge1xyXG5cdFx0XHR2bS50YXNrID0gbmV3IGNydWRTZXJ2aWNlKCd0YXNrJyk7XHJcblx0XHRcdHZtLnRhc2suZ2V0QnlVc2VyKClcclxuXHRcdFx0XHQudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xyXG5cdFx0XHRcdFx0dm0udGFza3MgPSBnZXRSZXN1bHQocmVzcG9uc2UpO1xyXG5cdFx0XHRcdFx0dXBkYXRlVGFza3MoKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBjbGVhckNhY2hlKCkge1xyXG5cdFx0XHR2bS5jYWxlbmRhcnMgPSBbXTtcclxuXHRcdFx0dm0uZXZlbnRzID0gW107XHJcblx0XHRcdHZtLmxhYmVscyA9IFtdO1xyXG5cdFx0XHR2bS50YXNrcyA9IFtdO1xyXG5cclxuXHRcdFx0dXBkYXRlQ2FsZW5kYXJzKCk7XHJcblx0XHRcdHVwZGF0ZUV2ZW50cygpO1xyXG5cdFx0XHR1cGRhdGVMYWJlbHMoKTtcclxuXHRcdFx0dXBkYXRlVGFza3MoKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBnZXRSZXN1bHQocmVzcG9uc2UpIHtcclxuXHRcdFx0dmFyIHJlc3VsdCA9IHJlc3BvbnNlLmRhdGE7XHJcblx0XHRcdHJldHVybiByZXN1bHQuc3VjY2VzcyA/IHJlc3VsdC5kYXRhIDogcmVzdWx0LnRpdGxlO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGdldEFsbCgpIHtcclxuXHRcdFx0cmV0dXJuIHtcclxuXHRcdFx0XHRjYWxlbmRhcnM6IGdldENhbGVuZGFycygpLFxyXG5cdFx0XHRcdGV2ZW50czogZ2V0RXZlbnRzKCksXHJcblx0XHRcdFx0bGFiZWxzOiBnZXRMYWJlbHMoKSxcclxuXHRcdFx0XHR0YXNrczogZ2V0VGFza3MoKVxyXG5cdFx0XHR9O1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGdldENhbGVuZGFycygpIHtcclxuXHRcdFx0cmV0dXJuIHZtLmNhbGVuZGFycztcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBnZXRFdmVudHMoKSB7XHJcblx0XHRcdHJldHVybiB2bS5ldmVudHM7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gZ2V0TGFiZWxzKCkge1xyXG5cdFx0XHRyZXR1cm4gdm0ubGFiZWxzO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGdldFRhc2tzKCkge1xyXG5cdFx0XHRyZXR1cm4gdm0udGFza3M7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gdXBkYXRlQ2FsZW5kYXJzKCkge1xyXG5cdFx0XHQkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3VwZGF0ZUNhbGVuZGFycycpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIHVwZGF0ZUV2ZW50cygpIHtcclxuXHRcdFx0JHJvb3RTY29wZS4kYnJvYWRjYXN0KCd1cGRhdGVFdmVudHMnKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiB1cGRhdGVMYWJlbHMoKSB7XHJcblx0XHRcdCRyb290U2NvcGUuJGJyb2FkY2FzdCgndXBkYXRlTGFiZWxzJyk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gdXBkYXRlVGFza3MoKSB7XHJcblx0XHRcdCRyb290U2NvcGUuJGJyb2FkY2FzdCgndXBkYXRlVGFza3MnKTtcclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XHJcblxuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0LyoqXHJcblx0KiBVc2VkIHRvIGFjY2VzcyB0aGUgYXBpIG9mIHRoZSB2YXJpb3VzIGl0ZW0gdHlwZXMuXHJcblx0KiBBbiBpbnN0YW5jZSBvZiBjcnVkIG11c3QgYmUgY3JlYXRlZCBpbiBvcmRlciB0byB1c2UgdGhlIHNlcnZpY2UuXHJcblx0KlxyXG5cdCogQWxsIHByb21pc2VzIHJldHVybiAnc3VjY2VzcycgYW5kIGVpdGhlciAnZGF0YScgb24gc3VjY2VzcyBvciwgb24gZXJyb3IsICd0aXRsZSdcclxuXHQqIHdpdGggYSBnZW5lcmFsIGVycm9yIGFuZCAnZGV0YWlscycgd2l0aCBtb3JlIGRldGFpbHMuXHJcblx0Ki9cclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5mYWN0b3J5KCdjcnVkU2VydmljZScsIGNydWRTZXJ2aWNlKTtcclxuXHJcblx0Y3J1ZFNlcnZpY2UuJGluamVjdCA9IFsnJGh0dHAnLCAnJGxvZyddO1xyXG5cdGZ1bmN0aW9uIGNydWRTZXJ2aWNlKCRodHRwLCAkbG9nKSB7XHJcblx0XHR2YXIgY3J1ZCA9IGluaXQ7XHJcblx0XHRjcnVkLnByb3RvdHlwZSA9IHtcclxuXHRcdFx0Z2V0OiBnZXQsXHJcblx0XHRcdGdldEJ5VXNlcjogZ2V0QnlVc2VyLFxyXG5cdFx0XHRjcmVhdGU6IGNyZWF0ZSxcclxuXHRcdFx0dXBkYXRlOiB1cGRhdGUsXHJcblx0XHRcdHJlbW92ZTogcmVtb3ZlLFxyXG5cdFx0XHRyZW1vdmVXaGVyZTogcmVtb3ZlV2hlcmUsXHJcblx0XHRcdHJlbW92ZVVuZWNlc3NhcnlLZXlzOiByZW1vdmVVbmVjZXNzYXJ5S2V5c1xyXG5cdFx0fTtcclxuXHJcblx0XHRyZXR1cm4gY3J1ZDtcclxuXHJcblx0XHQvKipcclxuXHRcdCogSW5pdGlhbGl6ZSB0aGUgYmFzZSB1cmwgdXNpbmcgdGhlIHR5cGUgb2YgaXRlbSB0byBiZSBjYWxsZWQgb24uXHJcblx0XHQqIEFjdGl2aXRpZXMgYW5kIHRoZWlyIHBhcmVudHMgaGF2ZSBhIHNwZWNpZmljIHN1YmZvbGRlciB0byBiZSBwb2ludGVkIHRvLFxyXG5cdFx0KiB3aGlsZSBvdGhlcnMgZG8gbm90LlxyXG5cdFx0KlxyXG5cdFx0KiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUeXBlIG9mIGl0ZW0uXHJcblx0XHQqL1xyXG5cdFx0ZnVuY3Rpb24gaW5pdCh0eXBlKSB7XHJcblx0XHRcdC8qIGpzaGludCBpZ25vcmU6c3RhcnQgKi9cclxuXHRcdFx0dGhpcy50eXBlID0gdHlwZTtcclxuXHRcdFx0dGhpcy5iYXNlID0gJ2FwaS8nO1xyXG5cdFx0XHRzd2l0Y2ggKHR5cGUpIHtcclxuXHRcdFx0XHRjYXNlICdldmVudCc6XHJcblx0XHRcdFx0Y2FzZSAnY2FsZW5kYXInOlxyXG5cdFx0XHRcdFx0dGhpcy5iYXNlICs9ICdhY3Rpdml0eS9jYWxlbmRhci8nO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0Y2FzZSAnbGFiZWwnOlxyXG5cdFx0XHRcdGNhc2UgJ3Rhc2snOlxyXG5cdFx0XHRcdFx0dGhpcy5iYXNlICs9ICdhY3Rpdml0eS90YXNrLyc7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRkZWZhdWx0OlxyXG5cdFx0XHRcdFx0dGhpcy5iYXNlICs9IHR5cGUgKyAnLyc7XHJcblx0XHRcdH1cclxuXHRcdFx0dGhpcy5iYXNlICs9IHR5cGUgKyAnTWFuYWdlci5waHAnO1xyXG5cdFx0XHQvKiBqc2hpbnQgaWdub3JlOmVuZCAqL1xyXG5cdFx0fVxyXG5cclxuXHRcdC8qKlxyXG5cdFx0KiBAcGFyYW1cdHtzdHJpbmd9XHRpZFx0XHRJRCBvZiBpdGVtIHR5cGUgdG8gZ2V0LlxyXG5cdFx0KiBAcmV0dXJuXHR7c3RyaW5nW119XHRcdFx0UHJvbWlzZSB3aXRoICdkYXRhJyA9PSBxdWVyeSByZXN1bHRzIG9uIHN1Y2Nlc3MuXHJcblx0XHQqL1xyXG5cdFx0ZnVuY3Rpb24gZ2V0KGlkKSB7XHJcblx0XHRcdHJldHVybiAkaHR0cC5nZXQodGhpcy5iYXNlICsgJz9pZD0nICsgaWQpIC8vIGpzaGludCBpZ25vcmU6bGluZVxyXG5cdFx0XHRcdC50aGVuKHByb21pc2VDb21wbGV0ZSlcclxuXHRcdFx0XHQuY2F0Y2gocHJvbWlzZUZhaWxlZCk7XHJcblx0XHR9XHJcblx0XHQvKipcclxuXHRcdCogQHJldHVyblx0e3N0cmluZ1tdfVx0XHRcdFByb21pc2Ugd2l0aCAnZGF0YScgPT0gcXVlcnkgcmVzdWx0cyBvbiBzdWNjZXNzLlxyXG5cdFx0Ki9cclxuXHRcdGZ1bmN0aW9uIGdldEJ5VXNlcigpIHtcclxuXHRcdFx0cmV0dXJuICRodHRwLmdldCh0aGlzLmJhc2UgKyAnP2J5dXNlcj10cnVlJykgLy8ganNoaW50IGlnbm9yZTpsaW5lXHJcblx0XHRcdFx0LnRoZW4ocHJvbWlzZUNvbXBsZXRlKVxyXG5cdFx0XHRcdC5jYXRjaChwcm9taXNlRmFpbGVkKTtcclxuXHRcdH1cclxuXHJcblx0XHQvKipcclxuXHRcdCogQHBhcmFtXHR7bWl4ZWRbXX1cdGRhdGFcdERhdGEgb2YgaXRlbSB0byBjcmVhdGUuXHJcblx0XHQqIEByZXR1cm5cdHtzdHJpbmdbXX1cdFx0XHRQcm9taXNlIHdpdGggJ2RhdGEnID09PSAxIG9uIHN1Y2Nlc3MuXHJcblx0XHQqL1xyXG5cdFx0ZnVuY3Rpb24gY3JlYXRlKGRhdGEpIHtcclxuXHRcdFx0ZGF0YSA9IHRoaXMucmVtb3ZlVW5lY2Vzc2FyeUtleXMoZGF0YSk7ICAvLyBqc2hpbnQgaWdub3JlOmxpbmVcclxuXHRcdFx0cmV0dXJuICRodHRwLnBvc3QodGhpcy5iYXNlLCBkYXRhKSAvLyBqc2hpbnQgaWdub3JlOmxpbmVcclxuXHRcdFx0XHQudGhlbihwcm9taXNlQ29tcGxldGUpXHJcblx0XHRcdFx0LmNhdGNoKHByb21pc2VGYWlsZWQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8qKlxyXG5cdFx0KiBAcGFyYW1cdHtzdHJpbmd9XHRpZFx0XHRJRCBvZiBpdGVtIHR5cGUgdG8gdXBkYXRlLlxyXG5cdFx0KiBAcGFyYW1cdHttaXhlZFtdfVx0ZGF0YVx0RGF0YSBvZiBpdGVtIHRvIHVwZGF0ZS5cclxuXHRcdCpcclxuXHRcdCogQHJldHVyblx0e3N0cmluZ1tdfVx0XHRcdFByb21pc2Ugd2l0aCAnZGF0YScgPT09ICcxJyBvbiBzdWNjZXNzLlxyXG5cdFx0Ki9cclxuXHRcdGZ1bmN0aW9uIHVwZGF0ZShpZCwgZGF0YSkge1xyXG5cdFx0XHRkYXRhID0gdGhpcy5yZW1vdmVVbmVjZXNzYXJ5S2V5cyhkYXRhKTsgIC8vIGpzaGludCBpZ25vcmU6bGluZVxyXG5cdFx0XHRyZXR1cm4gJGh0dHAucHV0KHRoaXMuYmFzZSArICc/aWQ9JyArIGlkLCBkYXRhKSAvLyBqc2hpbnQgaWdub3JlOmxpbmVcclxuXHRcdFx0XHQudGhlbihwcm9taXNlQ29tcGxldGUpXHJcblx0XHRcdFx0LmNhdGNoKHByb21pc2VGYWlsZWQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8qKlxyXG5cdFx0KiBAcGFyYW1cdHtzdHJpbmd9XHRpZFx0XHRJRCBvZiBpdGVtIHR5cGUgdG8gZGVsZXRlLlxyXG5cdFx0KiBAcmV0dXJuXHR7c3RyaW5nW119XHRcdFx0UHJvbWlzZSB3aXRoICdkYXRhJyA9PT0gMSBvbiBzdWNjZXNzLlxyXG5cdFx0Ki9cclxuXHRcdGZ1bmN0aW9uIHJlbW92ZShpZCkge1xyXG5cdFx0XHRyZXR1cm4gJGh0dHAuZGVsZXRlKHRoaXMuYmFzZSArICc/aWQ9JyArIGlkKSAvLyBqc2hpbnQgaWdub3JlOmxpbmVcclxuXHRcdFx0XHQudGhlbihwcm9taXNlQ29tcGxldGUpXHJcblx0XHRcdFx0LmNhdGNoKHByb21pc2VGYWlsZWQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8qKlxyXG5cdFx0KiBAcGFyYW0gXHR7c3RyaW5nfVx0d2hlcmUgXHRXaGVyZSBjbGF1c2UuXHJcblx0XHQqIEByZXR1cm5cdHtzdHJpbmdbXX1cdFx0XHRQcm9taXNlIHdpdGggJ2RhdGEnID49IDAgb24gc3VjY2Vzcy5cclxuXHRcdCovXHJcblx0XHRmdW5jdGlvbiByZW1vdmVXaGVyZSh3aGVyZSkge1xyXG5cdFx0XHRyZXR1cm4gJGh0dHAuZGVsZXRlKHRoaXMuYmFzZSArICc/dXNld2hlcmU9dHJ1ZSZ3aGVyZT0nICsgZXNjYXBlKHdoZXJlKSkgLy8ganNoaW50IGlnbm9yZTpsaW5lXHJcblx0XHRcdFx0LnRoZW4ocHJvbWlzZUNvbXBsZXRlKVxyXG5cdFx0XHRcdC5jYXRjaChwcm9taXNlRmFpbGVkKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBwcm9taXNlQ29tcGxldGUocmVzcG9uc2UpIHtcclxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIHByb21pc2VGYWlsZWQoZXJyb3IpIHtcclxuXHRcdFx0JGxvZy5lcnJvcihlcnJvcik7XHJcblx0XHRcdHJldHVybiB7XHJcblx0XHRcdFx0c3VjY2VzczogJ2ZhbHNlJyxcclxuXHRcdFx0XHR0aXRsZTogJ0Vycm9yIHdoZW4gcXVlcnlpbmcgc2VydmVyLicsXHJcblx0XHRcdFx0bWVzc2FnZTogZXJyb3JcclxuXHRcdFx0fTtcclxuXHRcdH1cclxuXHJcblx0XHQvKipcclxuXHRcdCogSXRlbSBkYXRhIHBhc3NlZCBpbiBtYXkgc3RpbGwgaGF2ZSB0aGVpciBpZHMgb3IgYWxpYXMgZmllbGRzIChmb3IgYWN0aXZpdGllcylcclxuXHRcdCogZW1iZWRkZWQsIHdoaWNoIHdpbGwgY2FuIGNhdXNlIGVycm9ycyBpbiB0aGUgU1FMLlxyXG5cdFx0KlxyXG5cdFx0KiBAcGFyYW1cdHttaXhlZFtdfSBkYXRhXHJcblx0XHQqIEByZXR1cm5cdHttaXhlZFtdfVxyXG5cdFx0Ki9cclxuXHRcdGZ1bmN0aW9uIHJlbW92ZVVuZWNlc3NhcnlLZXlzKGRhdGEpIHtcclxuXHRcdFx0dmFyIHRvRGVsZXRlID0gWydpZCcsICdwZXJzb25faWQnLCB0aGlzLnR5cGUgKyAnX2lkJywgJ2FjdGl2aXR5X2luZm9faWQnLCAncGFyZW50X25hbWUnXTsgIC8vIGpzaGludCBpZ25vcmU6bGluZVxyXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRvRGVsZXRlLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0ZGVsZXRlIGRhdGFbdG9EZWxldGVbaV1dO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBkYXRhO1xyXG5cdFx0fVxyXG5cdH1cclxufSkoKTtcclxuXG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHQvKipcclxuXHQqIFVzZWQgdG8gYWNjZXNzIHNlc3Npb24gdmFyaWFibGVzLlxyXG5cdCovXHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuZmFjdG9yeSgnc2Vzc2lvblNlcnZpY2UnLCBzZXNzaW9uU2VydmljZSk7XHJcblxyXG5cdHNlc3Npb25TZXJ2aWNlLiRpbmplY3QgPSBbJyRodHRwJywgJyRsb2cnXTtcclxuXHRmdW5jdGlvbiBzZXNzaW9uU2VydmljZSgkaHR0cCwgJGxvZykge1xyXG5cdFx0dmFyIHZtID0gdGhpczsgIC8vIGpzaGludCBpZ25vcmU6bGluZVxyXG5cdFx0dm0uYmFzZSA9ICdhcGkvc2Vzc2lvbi9zZXNzaW9uVmFyTWFuYWdlci5waHA/dmFyPSc7XHJcblxyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0Z2V0VmFyOiBnZXRWYXIsXHJcblx0XHRcdHNldFZhcjogc2V0VmFyXHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0KiBAcGFyYW1cdHtzdHJpbmd9ICRuYW1lXHRWYXJpYWJsZSBuYW1lIHRvIGdldCBmcm9tIHNlc3Npb24uXHJcblx0XHQqIEByZXR1cm5cdHtzdHJpbmd9IFx0XHRQcm9taXNlIG9yIGVycm9yIG9uIGZhaWwuXHJcblx0XHQqL1xyXG5cdFx0ZnVuY3Rpb24gZ2V0VmFyKCRuYW1lKSB7XHJcblx0XHRcdHJldHVybiAkaHR0cC5nZXQodm0uYmFzZSArICRuYW1lKVxyXG5cdFx0XHRcdC50aGVuKHByb21pc2VDb21wbGV0ZSlcclxuXHRcdFx0XHQuY2F0Y2gocHJvbWlzZUZhaWxlZCk7XHJcblx0XHR9XHJcblxyXG5cdFx0LyoqXHJcblx0XHQqIEBwYXJhbVx0e3N0cmluZ30gJG5hbWVcdFZhcmlhYmxlIG5hbWUgdG8gZ2V0IGZyb20gc2Vzc2lvbi5cclxuXHRcdCogQHJldHVyblx0e3N0cmluZ30gXHRcdFByb21pc2Ugb3IgZXJyb3Igb24gZmFpbC5cclxuXHRcdCovXHJcblx0XHRmdW5jdGlvbiBzZXRWYXIoJG5hbWUsICR2YWx1ZSkge1xyXG5cdFx0XHRyZXR1cm4gJGh0dHAucG9zdCh2bS5iYXNlICsgJG5hbWUsICR2YWx1ZSlcclxuXHRcdFx0XHQudGhlbihwcm9taXNlQ29tcGxldGUpXHJcblx0XHRcdFx0LmNhdGNoKHByb21pc2VGYWlsZWQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIHByb21pc2VDb21wbGV0ZShyZXNwb25zZSkge1xyXG5cdFx0XHRyZXR1cm4gcmVzcG9uc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gcHJvbWlzZUZhaWxlZChlcnJvcikge1xyXG5cdFx0XHQkbG9nLmVycm9yKGVycm9yKTtcclxuXHRcdFx0cmV0dXJuIHtcclxuXHRcdFx0XHRzdWNjZXNzOiAnZmFsc2UnLFxyXG5cdFx0XHRcdHRpdGxlOiAnRXJyb3Igd2hlbiBhY2Nlc3NpbmcgdmFyaWFibGUuJyxcclxuXHRcdFx0XHRtZXNzYWdlOiBlcnJvclxyXG5cdFx0XHR9O1xyXG5cdFx0fVxyXG5cdH1cclxufSkoKTtcclxuXG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmNvbnRyb2xsZXIoJ0V2ZW50c0NvbnRyb2xsZXInLCBFdmVudHNDb250cm9sbGVyKTtcclxuXHJcblx0RXZlbnRzQ29udHJvbGxlci4kaW5qZWN0ID0gWyckcm9vdFNjb3BlJywgJ21vbWVudCcsICdjYWxlbmRhcldpZGdldFNlcnZpY2UnLCAnY2FsZW5kYXJTZXJ2aWNlJywgJ2V2ZW50c1NlcnZpY2UnLCAnZXZlbnRNb2RhbFNlcnZpY2UnXTtcclxuXHRmdW5jdGlvbiBFdmVudHNDb250cm9sbGVyKCRyb290U2NvcGUsIG1vbWVudCwgY2FsZW5kYXJXaWRnZXRTZXJ2aWNlLCBjYWxlbmRhclNlcnZpY2UsIGV2ZW50c1NlcnZpY2UsIGV2ZW50TW9kYWxTZXJ2aWNlKSB7XHJcblx0XHR2YXIgdm0gPSB0aGlzO1xyXG5cdFx0dm0uZXZlbnRzID0gW107XHJcblx0XHR2bS5jYWxlbmRhciA9IFtdO1xyXG5cclxuXHRcdHZtLnRvZGF5ID0gbnVsbDtcclxuXHRcdHZtLnNlbGVjdGVkRGF5ID0gbnVsbDtcclxuXHRcdHZtLm1vbnRoID0gbnVsbDtcclxuXHJcblx0XHR2bS5pc1NhbWVEYXlBc1NlbGVjdGVkID0gaXNTYW1lRGF5QXNTZWxlY3RlZDtcclxuXHRcdHZtLmdldEVuZE9mRGF5ID0gZ2V0RW5kT2ZEYXk7XHJcblx0XHR2bS5zZWxlY3REYXkgPSBzZWxlY3REYXk7XHJcblx0XHR2bS5zaG93RXZlbnRNb2RhbCA9IHNob3dFdmVudE1vZGFsO1xyXG5cdFx0dm0ubGFzdE1vbnRoID0gbGFzdE1vbnRoO1xyXG5cdFx0dm0ubmV4dE1vbnRoID0gbmV4dE1vbnRoO1xyXG5cclxuXHRcdGFjdGl2YXRlKCk7XHJcblxyXG5cdFx0ZnVuY3Rpb24gYWN0aXZhdGUoKSB7XHJcblx0XHRcdHVwZGF0ZUNhbGVuZGFycygpO1xyXG5cdFx0XHR1cGRhdGVFdmVudHMoKTtcclxuXHJcblx0XHRcdCRyb290U2NvcGUuJG9uKCd1cGRhdGVDYWxlbmRhcnMnLCB1cGRhdGVDYWxlbmRhcnMpO1xyXG5cdFx0XHQkcm9vdFNjb3BlLiRvbigndXBkYXRlRXZlbnRzJywgdXBkYXRlRXZlbnRzKTtcclxuXHJcblx0XHRcdHZtLnRvZGF5ID0gY2FsZW5kYXJXaWRnZXRTZXJ2aWNlLmdldFRvZGF5KCk7XHJcblx0XHRcdHZtLnNlbGVjdGVkRGF5ID0gdm0udG9kYXk7XHJcblx0XHRcdHZtLm1vbnRoID0gY2FsZW5kYXJXaWRnZXRTZXJ2aWNlLmdldE1vbnRoKHZtLnRvZGF5KTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBnZXRFbmRPZkRheShkYXkpIHtcclxuXHRcdFx0cmV0dXJuIGNhbGVuZGFyV2lkZ2V0U2VydmljZS5nZXRFbmRPZkRheShkYXkpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGlzU2FtZURheUFzU2VsZWN0ZWQoZGF5KSB7XHJcblx0XHRcdHJldHVybiBjYWxlbmRhcldpZGdldFNlcnZpY2UuaXNTYW1lRGF5KGRheSwgdm0uc2VsZWN0ZWREYXkpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIHNlbGVjdERheShkYXkpIHtcclxuXHRcdFx0dm0uc2VsZWN0ZWREYXkgPSBkYXkuZnVsbERhdGU7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gc2hvd0V2ZW50TW9kYWwoY2xpY2tFdmVudCwgZXZlbnQpIHtcclxuXHRcdFx0Y2xpY2tFdmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHRcdFx0ZXZlbnRNb2RhbFNlcnZpY2Uub3BlbkV2ZW50TW9kYWwoZXZlbnQsIHZtLmNhbGVuZGFycyk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gbGFzdE1vbnRoKCkge1xyXG5cdFx0XHR2bS5tb250aCA9IGNhbGVuZGFyV2lkZ2V0U2VydmljZS5sYXN0TW9udGgodm0ubW9udGgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIG5leHRNb250aCgpIHtcclxuXHRcdFx0dm0ubW9udGggPSBjYWxlbmRhcldpZGdldFNlcnZpY2UubmV4dE1vbnRoKHZtLm1vbnRoKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiB1cGRhdGVDYWxlbmRhcnMoKSB7XHJcblx0XHRcdHZtLmNhbGVuZGFycyA9IGNhbGVuZGFyU2VydmljZS5nZXRDYWxlbmRhcnMoKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiB1cGRhdGVFdmVudHMoKSB7XHJcblx0XHRcdHZtLmV2ZW50cyA9IGV2ZW50c1NlcnZpY2UuZ2V0RXZlbnRzKCk7XHJcblx0XHR9XHJcblx0fVxyXG59KSgpO1xuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5kaXJlY3RpdmUoJ3NwRXZlbnRzJywgZXZlbnRzRGlyZWN0aXZlKTtcclxuXHJcblx0ZnVuY3Rpb24gZXZlbnRzRGlyZWN0aXZlKCkge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0dGVtcGxhdGVVcmw6ICdtb2R1bGVzL2V2ZW50cy9ldmVudHMuaHRtbCcsXHJcblx0XHRcdGNvbnRyb2xsZXI6ICdFdmVudHNDb250cm9sbGVyJyxcclxuXHRcdFx0Y29udHJvbGxlckFzOiAndm0nLFxyXG5cdFx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXHJcblx0XHR9O1xyXG5cdH1cclxufSkoKTtcbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuZmFjdG9yeSgnZXZlbnRzU2VydmljZScsIGV2ZW50c1NlcnZpY2UpO1xyXG5cclxuXHRldmVudHNTZXJ2aWNlLiRpbmplY3QgPSBbJ2NydWRTZXJ2aWNlJywgJ2NhY2hlU2VydmljZSddO1xyXG5cdGZ1bmN0aW9uIGV2ZW50c1NlcnZpY2UoY3J1ZFNlcnZpY2UsIGNhY2hlU2VydmljZSkge1xyXG5cdFx0dmFyIHZtID0gdGhpczsgIC8vIGpzaGludCBpZ25vcmU6bGluZVxyXG5cdFx0dm0uZXZlbnQgPSBuZXcgY3J1ZFNlcnZpY2UoJ2V2ZW50Jyk7XHJcblxyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0Y3JlYXRlRXZlbnQ6IGNyZWF0ZUV2ZW50LFxyXG5cdFx0XHRjcmVhdGVPclVwZGF0ZUV2ZW50OiBjcmVhdGVPclVwZGF0ZUV2ZW50LFxyXG5cdFx0XHRkZWxldGVFdmVudDogZGVsZXRlRXZlbnQsXHJcblx0XHRcdGdldEV2ZW50czogZ2V0RXZlbnRzLFxyXG5cdFx0XHR1cGRhdGVFdmVudDogdXBkYXRlRXZlbnRcclxuXHRcdH07XHJcblxyXG5cdFx0ZnVuY3Rpb24gY3JlYXRlRXZlbnQoZXZlbnQpIHtcclxuXHRcdFx0cmV0dXJuIHZtLmV2ZW50LmNyZWF0ZShldmVudCkudGhlbihwcm9taXNlQ29tcGxldGUpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGNyZWF0ZU9yVXBkYXRlRXZlbnQoZXZlbnQpIHtcclxuXHRcdFx0aWYgKCFldmVudC5ldmVudF9pZCkge1xyXG5cdFx0XHRcdHJldHVybiBjcmVhdGVFdmVudChldmVudCk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHVwZGF0ZUV2ZW50KGV2ZW50LmV2ZW50X2lkLCBldmVudCk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gZGVsZXRlRXZlbnQoaWQpIHtcclxuXHRcdFx0cmV0dXJuIHZtLmV2ZW50LnJlbW92ZShpZCkudGhlbihwcm9taXNlQ29tcGxldGUpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGdldEV2ZW50cygpIHtcclxuXHRcdFx0cmV0dXJuIGNhY2hlU2VydmljZS5nZXRFdmVudHMoKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiB1cGRhdGVFdmVudChpZCwgZXZlbnQpIHtcclxuXHRcdFx0cmV0dXJuIHZtLmV2ZW50LnVwZGF0ZShpZCwgZXZlbnQpLnRoZW4ocHJvbWlzZUNvbXBsZXRlKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBwcm9taXNlQ29tcGxldGUocmVzcG9uc2UpIHtcclxuXHRcdFx0dmFyIHJlcyA9IHJlc3BvbnNlLmRhdGE7XHJcblx0XHRcdGlmIChyZXMuc3VjY2Vzcykge1xyXG5cdFx0XHRcdGNhY2hlU2VydmljZS5jYWNoZUV2ZW50cygpO1xyXG5cdFx0XHRcdHJldHVybiByZXMuZGF0YTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmVzLnRpdGxlO1xyXG5cdFx0fVxyXG5cdH1cclxufSkoKTtcclxuXG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHQvKipcclxuXHQqIFRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBhdXRvZm9jdXMgYXR0cmlidXRlIHRvIGF1dG8tZm9jdXNcclxuXHQqIG1vZGFsIGlucHV0cy5cclxuXHQqL1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmRpcmVjdGl2ZSgnc3BBdXRvRm9jdXMnLCBhdXRvRm9jdXNEaXJlY3RpdmUpO1xyXG5cclxuXHRmdW5jdGlvbiBhdXRvRm9jdXNEaXJlY3RpdmUoKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRyZXN0cmljdDogJ0EnLFxyXG5cdFx0XHRsaW5rOiBsaW5rXHJcblx0XHR9O1xyXG5cclxuXHRcdGZ1bmN0aW9uIGxpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBuZ01vZGVsKSB7XHJcblx0XHRcdGVsZW1lbnRbMF0uZm9jdXMoKTtcclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHQvKipcclxuXHQqIENvbXBhcmUgYW4gaW5wdXQgZmllbGQgdG8gYW5vdGhlciBmaWVsZCwgZGV0ZXJtaW5lZCBieSB0aGUgZGV2LlxyXG5cdCovXHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuZGlyZWN0aXZlKCdzcENvbXBhcmVUbycsIGNvbXBhcmVUb0RpcmVjdGl2ZSk7XHJcblxyXG5cdGZ1bmN0aW9uIGNvbXBhcmVUb0RpcmVjdGl2ZSgpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHJlcXVpcmU6ICduZ01vZGVsJyxcclxuXHRcdFx0c2NvcGU6IHtcclxuXHRcdFx0XHRvdGhlck1vZGVsOiAnPXNwQ29tcGFyZVRvJ1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRsaW5rOiBsaW5rXHJcblx0XHR9O1xyXG5cclxuXHRcdGZ1bmN0aW9uIGxpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBuZ01vZGVsKSB7XHJcblx0XHRcdHZhciB1bmJpbmRXYXRjaCA9IHNjb3BlLiR3YXRjaCgnb3RoZXJNb2RlbCcsIHZhbGlkYXRlT25DaGFuZ2UpO1xyXG5cdFx0XHRuZ01vZGVsLiR2YWxpZGF0b3JzLnNwQ29tcGFyZVRvID0gY29tcGFyZVZhbHVlcztcclxuXHRcdFx0ZWxlbWVudC5vbignJGRlc3Ryb3knLCBjbGVhblVwKTtcclxuXHJcblx0XHRcdGZ1bmN0aW9uIGNsZWFuVXAoKSB7XHJcblx0XHRcdFx0dW5iaW5kV2F0Y2goKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZnVuY3Rpb24gY29tcGFyZVZhbHVlcyh2aWV3VmFsdWUpIHtcclxuXHRcdFx0XHRyZXR1cm4gKHZpZXdWYWx1ZSA9PT0gc2NvcGUub3RoZXJNb2RlbC4kdmlld1ZhbHVlKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZnVuY3Rpb24gdmFsaWRhdGVPbkNoYW5nZShuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcclxuXHRcdFx0XHRuZ01vZGVsLiR2YWxpZGF0ZSgpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59KSgpO1xuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5jb250cm9sbGVyKCdMb2dvdXRDb250cm9sbGVyJywgTG9nb3V0Q29udHJvbGxlcik7XHJcblxyXG5cdExvZ291dENvbnRyb2xsZXIuJGluamVjdCA9IFsnbG9nb3V0U2VydmljZSddO1xyXG5cdGZ1bmN0aW9uIExvZ291dENvbnRyb2xsZXIobG9nb3V0U2VydmljZSkge1xyXG5cdFx0YWN0aXZhdGUoKTtcclxuXHJcblx0XHRmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcclxuXHRcdFx0bG9nb3V0U2VydmljZS5sb2dvdXQoKTtcclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmZhY3RvcnkoJ2xvZ291dFNlcnZpY2UnLCBsb2dvdXRTZXJ2aWNlKTtcclxuXHJcblx0bG9nb3V0U2VydmljZS4kaW5qZWN0ID0gWyckcm9vdFNjb3BlJywgJyRodHRwJywgJyRzdGF0ZScsICckbG9nJywgJ2NhY2hlU2VydmljZSddO1xyXG5cdGZ1bmN0aW9uIGxvZ291dFNlcnZpY2UoJHJvb3RTY29wZSwgJGh0dHAsICRzdGF0ZSwgJGxvZywgY2FjaGVTZXJ2aWNlKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRsb2dvdXQ6IGxvZ291dFxyXG5cdFx0fTtcclxuXHJcblx0XHRmdW5jdGlvbiBsb2dvdXQoKSB7XHJcblx0XHRcdHJldHVybiAkaHR0cC5wb3N0KCdhcGkvdXNlci9sb2dvdXRNYW5hZ2VyLnBocCcpXHJcblx0XHRcdFx0LnRoZW4obG9nb3V0Q29tcGxldGUpXHJcblx0XHRcdFx0LmNhdGNoKGxvZ291dEZhaWxlZCk7XHJcblxyXG5cdFx0XHRmdW5jdGlvbiBsb2dvdXRDb21wbGV0ZShyZXNwb25zZSkge1xyXG5cdFx0XHRcdGNhY2hlU2VydmljZS5jbGVhckNhY2hlKCk7XHJcblx0XHRcdFx0JHJvb3RTY29wZS4kYnJvYWRjYXN0KCd1cGRhdGVVc2VyJyk7XHJcblx0XHRcdFx0JHN0YXRlLmdvKCdsb2dpbicpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRmdW5jdGlvbiBsb2dvdXRGYWlsZWQoZXJyb3IpIHtcclxuXHRcdFx0XHQkbG9nLmVycm9yKGVycm9yKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxufSkoKTtcclxuXG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmNvbnRyb2xsZXIoJ01vZGFsQ29udHJvbGxlcicsIE1vZGFsQ29udHJvbGxlcik7XHJcblxyXG5cdE1vZGFsQ29udHJvbGxlci4kaW5qZWN0ID0gWyckdWliTW9kYWxJbnN0YW5jZScsICdncm91cHMnLCAnaXRlbSddO1xyXG5cdGZ1bmN0aW9uIE1vZGFsQ29udHJvbGxlcigkdWliTW9kYWxJbnN0YW5jZSwgZ3JvdXBzLCBpdGVtKSB7XHJcblx0XHR2YXIgdm0gPSB0aGlzO1xyXG5cdFx0dm0uZ3JvdXBzID0gZ3JvdXBzO1xyXG5cdFx0dm0uaXRlbSA9IGl0ZW07XHJcblxyXG5cdFx0dm0uY2FuY2VsID0gY2FuY2VsO1xyXG5cdFx0dm0uY2xvc2UgPSBjbG9zZTtcclxuXHRcdHZtLmNvbmZpcm0gPSBjb25maXJtO1xyXG5cdFx0dm0ucmVtb3ZlID0gcmVtb3ZlO1xyXG5cclxuXHRcdGZ1bmN0aW9uIGNhbmNlbCgpIHtcclxuXHRcdFx0JHVpYk1vZGFsSW5zdGFuY2UuZGlzbWlzcygnY2FuY2VsJyk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gY2xvc2UoKSB7XHJcblx0XHRcdCR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gY29uZmlybShkYXRhKSB7XHJcblx0XHRcdCR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKGRhdGEpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIHJlbW92ZShkYXRhKSB7XHJcblx0XHRcdCR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoZGF0YSk7XHJcblx0XHR9XHJcblx0fVxyXG59KSgpO1xuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5jb250cm9sbGVyKCdSZWN1cnJlbmNlQ29udHJvbGxlcicsIFJlY3VycmVuY2VDb250cm9sbGVyKTtcclxuXHJcblx0UmVjdXJyZW5jZUNvbnRyb2xsZXIuJGluamVjdCA9IFsncmVjdXJyZW5jZU1vZGFsU2VydmljZSddO1xyXG5cdGZ1bmN0aW9uIFJlY3VycmVuY2VDb250cm9sbGVyKHJlY3VycmVuY2VNb2RhbFNlcnZpY2UpIHtcclxuXHRcdHZhciByYyA9IHRoaXM7XHJcblx0XHRyYy5zaG93UmVjdXJyZW5jZU1vZGFsID0gc2hvd1JlY3VycmVuY2VNb2RhbDtcclxuXHJcblx0XHRmdW5jdGlvbiBzaG93UmVjdXJyZW5jZU1vZGFsKCkge1xyXG5cdFx0XHRpZiAocmMuaXRlbS5yZWN1cnJlbmNlKSB7XHJcblx0XHRcdFx0cmVjdXJyZW5jZU1vZGFsU2VydmljZS5vcGVuUmVjdXJyZW5jZU1vZGFsKHJjLml0ZW0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59KSgpO1xuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5kaXJlY3RpdmUoJ3NwUmVwZWF0JywgcmVjdXJyZW5jZURpcmVjdGl2ZSk7XHJcblxyXG5cdGZ1bmN0aW9uIHJlY3VycmVuY2VEaXJlY3RpdmUoKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHR0ZW1wbGF0ZVVybDogJ21vZHVsZXMvcmVjdXJyZW5jZS9yZWN1cnJlbmNlLmh0bWwnLFxyXG5cdFx0XHRjb250cm9sbGVyOiAnUmVjdXJyZW5jZUNvbnRyb2xsZXInLFxyXG5cdFx0XHRjb250cm9sbGVyQXM6ICdyYycsXHJcblx0XHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXHJcblx0XHRcdHNjb3BlOiB7XHJcblx0XHRcdFx0aXRlbTogJz0nXHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0fVxyXG59KSgpO1xuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5mYWN0b3J5KCdyZWN1cnJlbmNlU2VydmljZScsIHJlY3VycmVuY2VTZXJ2aWNlKTtcclxuXHJcblx0ZnVuY3Rpb24gcmVjdXJyZW5jZVNlcnZpY2UoKSB7XHJcblx0XHR2YXIgcmVjdXJyZW5jZUNvbHMgPSB7XHJcblx0XHRcdGZyZXE6IFsnaG91cmx5JywgJ2RhaWx5JywgJ3dlZWtseScsICdtb250aGx5JywgJ3llYXJseSddLFxyXG5cdFx0XHRkYXlzOiBbJ21vJywgJ3R1JywgJ3dlJywgJ3RoJywgJ2ZyJywgJ3NhJywgJ3N1J10sXHJcblx0XHRcdGJ5OiBbJ2J5X2hvdXInLCAnYnlfZGF5JywgJ2J5X21vbnRoX2RheScsICdieV95ZWFyX2RheScsICdieV93ZWVrX25vJywgJ2J5X21vbnRoJ11cclxuXHRcdH07XHJcblxyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0Y2xlYXJSZWN1cnJlbmNlOiBjbGVhclJlY3VycmVuY2UsXHJcblx0XHRcdGNvbnN0cnVjdFJlY3VycmVuY2U6IGNvbnN0cnVjdFJlY3VycmVuY2VcclxuXHRcdH07XHJcblxyXG5cdFx0ZnVuY3Rpb24gY2xlYXJSZWN1cnJlbmNlKGl0ZW0pIHtcclxuXHRcdFx0aXRlbS5yZWN1cnJlbmNlID0gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gY29uc3RydWN0UmVjdXJyZW5jZShpdGVtKSB7XHJcblxyXG5cdFx0fVxyXG5cdH1cclxufSkoKTtcclxuXG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmNvbnRyb2xsZXIoJ1Rhc2tzQ29udHJvbGxlcicsIFRhc2tzQ29udHJvbGxlcik7XHJcblxyXG5cdFRhc2tzQ29udHJvbGxlci4kaW5qZWN0ID0gWyckcm9vdFNjb3BlJywgJ3Rhc2tzU2VydmljZScsICdsYWJlbFNlcnZpY2UnLCAndGFza01vZGFsU2VydmljZSddO1xyXG5cdGZ1bmN0aW9uIFRhc2tzQ29udHJvbGxlcigkcm9vdFNjb3BlLCB0YXNrc1NlcnZpY2UsIGxhYmVsU2VydmljZSwgdGFza01vZGFsU2VydmljZSkge1xyXG5cdFx0dmFyIHZtID0gdGhpcztcclxuXHRcdHZtLmxhYmVscyA9IFtdO1xyXG5cdFx0dm0udGFza3MgPSBbXTtcclxuXHRcdHZtLnNob3dUYXNrTW9kYWwgPSBzaG93VGFza01vZGFsO1xyXG5cdFx0dm0udG9nZ2xlQ29tcGxldGVkID0gdG9nZ2xlQ29tcGxldGVkO1xyXG5cclxuXHRcdGFjdGl2YXRlKCk7XHJcblxyXG5cdFx0ZnVuY3Rpb24gYWN0aXZhdGUoKSB7XHJcblx0XHRcdHVwZGF0ZUxhYmVscygpO1xyXG5cdFx0XHR1cGRhdGVUYXNrcygpO1xyXG5cclxuXHRcdFx0JHJvb3RTY29wZS4kb24oJ3VwZGF0ZUxhYmVscycsIHVwZGF0ZUxhYmVscyk7XHJcblx0XHRcdCRyb290U2NvcGUuJG9uKCd1cGRhdGVUYXNrcycsIHVwZGF0ZVRhc2tzKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBzaG93VGFza01vZGFsKHRhc2spIHtcclxuXHRcdFx0dGFza01vZGFsU2VydmljZS5vcGVuVGFza01vZGFsKHRhc2ssIHZtLmxhYmVscyk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gdG9nZ2xlQ29tcGxldGVkKHRhc2spIHtcclxuXHRcdFx0dGFza3NTZXJ2aWNlLnRvZ2dsZUNvbXBsZXRlZCh0YXNrKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiB1cGRhdGVMYWJlbHMoKSB7XHJcblx0XHRcdHZtLmxhYmVscyA9IGxhYmVsU2VydmljZS5nZXRMYWJlbHMoKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiB1cGRhdGVUYXNrcygpIHtcclxuXHRcdFx0dm0udGFza3MgPSB0YXNrc1NlcnZpY2UuZ2V0VGFza3MoKTtcclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmRpcmVjdGl2ZSgnc3BUYXNrcycsIHRhc2tzRGlyZWN0aXZlKTtcclxuXHJcblx0ZnVuY3Rpb24gdGFza3NEaXJlY3RpdmUoKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHR0ZW1wbGF0ZVVybDogJ21vZHVsZXMvdGFza3MvdGFza3MuaHRtbCcsXHJcblx0XHRcdGNvbnRyb2xsZXI6ICdUYXNrc0NvbnRyb2xsZXInLFxyXG5cdFx0XHRjb250cm9sbGVyQXM6ICd2bScsXHJcblx0XHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXHJcblx0XHRcdHNjb3BlOiB7XHJcblx0XHRcdFx0b3JkZXI6ICc9JyxcclxuXHRcdFx0XHRkYXlzOiAnPXdpdGhpbkRheXMnLFxyXG5cdFx0XHRcdGluTGFiZWxzOiAnPWluR3JvdXBzJ1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdH1cclxufSkoKTtcbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuZmFjdG9yeSgndGFza3NTZXJ2aWNlJywgdGFza3NTZXJ2aWNlKTtcclxuXHJcblx0dGFza3NTZXJ2aWNlLiRpbmplY3QgPSBbJ2NydWRTZXJ2aWNlJywgJ2NhY2hlU2VydmljZSddO1xyXG5cdGZ1bmN0aW9uIHRhc2tzU2VydmljZShjcnVkU2VydmljZSwgY2FjaGVTZXJ2aWNlKSB7XHJcblx0XHR2YXIgdm0gPSB0aGlzOyAgLy8ganNoaW50IGlnbm9yZTpsaW5lXHJcblx0XHR2bS50YXNrID0gbmV3IGNydWRTZXJ2aWNlKCd0YXNrJyk7XHJcblxyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0Y3JlYXRlVGFzazogY3JlYXRlVGFzayxcclxuXHRcdFx0Y3JlYXRlT3JVcGRhdGVUYXNrOiBjcmVhdGVPclVwZGF0ZVRhc2ssXHJcblx0XHRcdGRlbGV0ZVRhc2s6IGRlbGV0ZVRhc2ssXHJcblx0XHRcdGdldFRhc2tzOiBnZXRUYXNrcyxcclxuXHRcdFx0dG9nZ2xlQ29tcGxldGVkOiB0b2dnbGVDb21wbGV0ZWQsXHJcblx0XHRcdHVwZGF0ZVRhc2s6IHVwZGF0ZVRhc2tcclxuXHRcdH07XHJcblxyXG5cdFx0ZnVuY3Rpb24gY3JlYXRlVGFzayh0YXNrKSB7XHJcblx0XHRcdHJldHVybiB2bS50YXNrLmNyZWF0ZSh0YXNrKS50aGVuKHByb21pc2VDb21wbGV0ZSk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gY3JlYXRlT3JVcGRhdGVUYXNrKHRhc2spIHtcclxuXHRcdFx0aWYgKCF0YXNrLnRhc2tfaWQpIHtcclxuXHRcdFx0XHRyZXR1cm4gY3JlYXRlVGFzayh0YXNrKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gdXBkYXRlVGFzayh0YXNrLnRhc2tfaWQsIHRhc2spO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGRlbGV0ZVRhc2soaWQpIHtcclxuXHRcdFx0cmV0dXJuIHZtLnRhc2sucmVtb3ZlKGlkKS50aGVuKHByb21pc2VDb21wbGV0ZSk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gZ2V0VGFza3MoKSB7XHJcblx0XHRcdHJldHVybiBjYWNoZVNlcnZpY2UuZ2V0VGFza3MoKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiB0b2dnbGVDb21wbGV0ZWQodGFzaykge1xyXG5cdFx0XHR0YXNrLmNvbXBsZXRlZCA9ICFwYXJzZUludCh0YXNrLmNvbXBsZXRlZCk7XHJcblx0XHRcdHJldHVybiB1cGRhdGVUYXNrKHRhc2sudGFza19pZCwgdGFzaykudGhlbihnZXRUYXNrcyk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gdXBkYXRlVGFzayhpZCwgdGFzaykge1xyXG5cdFx0XHRyZXR1cm4gdm0udGFzay51cGRhdGUoaWQsIHRhc2spLnRoZW4ocHJvbWlzZUNvbXBsZXRlKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBwcm9taXNlQ29tcGxldGUocmVzcG9uc2UpIHtcclxuXHRcdFx0dmFyIHJlcyA9IHJlc3BvbnNlLmRhdGE7XHJcblx0XHRcdGlmIChyZXMuc3VjY2Vzcykge1xyXG5cdFx0XHRcdGNhY2hlU2VydmljZS5jYWNoZVRhc2tzKCk7XHJcblx0XHRcdFx0cmV0dXJuIHJlcy5kYXRhO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXMudGl0bGU7XHJcblx0XHR9XHJcblx0fVxyXG59KSgpO1xyXG5cbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuY29udHJvbGxlcignVXBsb2FkQ29udHJvbGxlcicsIFVwbG9hZENvbnRyb2xsZXIpO1xyXG5cclxuXHRVcGxvYWRDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckaHR0cCcsICd1cGxvYWRTZXJ2aWNlJ107XHJcblx0ZnVuY3Rpb24gVXBsb2FkQ29udHJvbGxlcigkc2NvcGUsICRodHRwLCB1cGxvYWRTZXJ2aWNlKSB7XHJcblx0XHR2YXIgdWMgPSB0aGlzO1xyXG5cdFx0dWMudXBsb2FkRmlsZSA9IHVwbG9hZEZpbGU7XHJcblxyXG5cdFx0ZnVuY3Rpb24gdXBsb2FkRmlsZShmaWxlLCBvbGRGaWxlKSB7XHJcblx0XHRcdHJldHVybiB1cGxvYWRTZXJ2aWNlLnVwbG9hZEZpbGUoZmlsZSlcclxuXHRcdFx0XHQudGhlbihmdW5jdGlvbihmaWxlUGF0aCkgeyByZXR1cm4gZmlsZVBhdGg7IH0pO1xyXG5cdFx0fVxyXG5cdH1cclxufSkoKTtcbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuZGlyZWN0aXZlKCdzcEZpbGVDaGFuZ2UnLCB1cGxvYWREaXJlY3RpdmUpO1xyXG5cclxuXHR1cGxvYWREaXJlY3RpdmUuJGluamVjdCA9IFsnJHBhcnNlJ107XHJcblx0ZnVuY3Rpb24gdXBsb2FkRGlyZWN0aXZlKCRwYXJzZSkge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0cmVzdHJpY3Q6ICdBJyxcclxuXHRcdFx0Y29udHJvbGxlcjogJ1VwbG9hZENvbnRyb2xsZXInLFxyXG5cdFx0XHRjb250cm9sbGVyQXM6ICd1YycsXHJcblx0XHRcdGxpbms6IGxpbmssXHJcblx0XHRcdHNjb3BlOiB7XHJcblx0XHRcdFx0c3BGaWxlQ2hhbmdlOiAnPScsXHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0ZnVuY3Rpb24gbGluayhzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcclxuXHRcdFx0dmFyIG1heEZpbGVTaXplID0gMiAqIDEwMjQgKiAxMDI0O1xyXG5cdFx0XHR2YXIgZmlsZU1vZGVsID0gJHBhcnNlKGF0dHJzLnNwRmlsZUNoYW5nZSk7XHJcblx0XHRcdGVsZW1lbnRbMF0uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZmlsZUhhbmRsZXIsIGZhbHNlKTtcclxuXHJcblx0XHRcdGZ1bmN0aW9uIGZpbGVIYW5kbGVyKGV2ZW50KSB7XHJcblx0XHRcdFx0c2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0dmFyIGZpbGUgPSBlbGVtZW50WzBdLmZpbGVzWzBdO1xyXG5cclxuXHRcdFx0XHRcdGlmIChmaWxlLnNpemUgPD0gbWF4RmlsZVNpemUpIHtcclxuXHRcdFx0XHRcdFx0c2NvcGUudWMudXBsb2FkRmlsZShmaWxlKVxyXG5cdFx0XHRcdFx0XHRcdC50aGVuKGZ1bmN0aW9uKGZpbGVQYXRoKSB7IHNjb3BlLnNwRmlsZUNoYW5nZSA9IGZpbGVQYXRoOyB9KTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdGFsZXJ0KFwiRmlsZSBtdXN0IGJlIGxlc3MgdGhhbiBcIiArIChtYXhGaWxlU2l6ZSAvIDEwMjQgLyAxMDI0KSArIFwiTUIuXCIpOy8vIGpzaGludCBpZ25vcmU6bGluZVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59KSgpO1xuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5mYWN0b3J5KCd1cGxvYWRTZXJ2aWNlJywgdXBsb2FkU2VydmljZSk7XHJcblxyXG5cdHVwbG9hZFNlcnZpY2UuJGluamVjdCA9IFsnJGh0dHAnLCAnJGxvZyddO1xyXG5cdGZ1bmN0aW9uIHVwbG9hZFNlcnZpY2UoJGh0dHAsICRsb2cpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHVwbG9hZEZpbGU6IHVwbG9hZEZpbGVcclxuXHRcdH07XHJcblxyXG5cdFx0ZnVuY3Rpb24gdXBsb2FkRmlsZShmaWxlKSB7XHJcblx0XHRcdHZhciBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xyXG5cdFx0XHRmb3JtRGF0YS5hcHBlbmQoJ2ZpbGUnLCBmaWxlKTtcclxuXHJcblx0XHRcdHJldHVybiAkaHR0cC5wb3N0KCdhcGkvdXBsb2FkL3VwbG9hZE1hbmFnZXIucGhwJywgZm9ybURhdGEsIHtcclxuXHRcdFx0XHR0cmFuc2Zvcm1SZXF1ZXN0OiBhbmd1bGFyLmlkZW50aXR5LFxyXG5cdFx0XHRcdGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6IHVuZGVmaW5lZCB9XHJcblx0XHRcdH0pXHJcblx0XHRcdFx0LnRoZW4oZnVuY3Rpb24ocmVzKSB7XHJcblx0XHRcdFx0XHRpZiAocmVzLmRhdGEuc3VjY2Vzcykge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzLmRhdGEuZGF0YTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdCRsb2cuZXJyb3IocmVzLnRpdGxlKTtcclxuXHRcdFx0XHRcdHJldHVybiAnJztcclxuXHRcdFx0XHR9KVxyXG5cdFx0XHRcdC5jYXRjaChmdW5jdGlvbihyZXMpIHtcclxuXHRcdFx0XHRcdCRsb2cuZXJyb3IocmVzKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmNvbnRyb2xsZXIoJ0xvZ2luQ29udHJvbGxlcicsIExvZ2luQ29udHJvbGxlcik7XHJcblxyXG5cdExvZ2luQ29udHJvbGxlci4kaW5qZWN0ID0gWydsb2dpblNlcnZpY2UnXTtcclxuXHRmdW5jdGlvbiBMb2dpbkNvbnRyb2xsZXIobG9naW5TZXJ2aWNlKSB7XHJcblx0XHR2YXIgdm0gPSB0aGlzO1xyXG5cdFx0dm0ubG9hZGluZyA9IGZhbHNlO1xyXG5cdFx0dm0uZXJyb3IgPSAnJztcclxuXHJcblx0XHR2bS5sb2dpbiA9IGxvZ2luO1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0KiBMb2dpblNlcnZpY2Ugd2lsbCByZWRpcmVjdCBpZiB0aGVyZSBpcyBubyBlcnJvci4gVGh1cywgdGhlcmUncyBvbmx5IGFcclxuXHRcdCogbmVlZCB0byByZXR1cm4gYSBwcm9taXNlIGlmIHRoZXJlJ3MgYW4gZXJyb3IuXHJcblx0XHQqL1xyXG5cdFx0ZnVuY3Rpb24gbG9naW4oKSB7XHJcblx0XHRcdHZtLmxvYWRpbmcgPSB0cnVlO1xyXG5cdFx0XHRsb2dpblNlcnZpY2UubG9naW4odm0udXNlcilcclxuXHRcdFx0XHQudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xyXG5cdFx0XHRcdFx0dm0ubG9hZGluZyA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0dm0uZXJyb3IgPSByZXNwb25zZTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmZhY3RvcnkoJ2xvZ2luU2VydmljZScsIGxvZ2luU2VydmljZSk7XHJcblxyXG5cdGxvZ2luU2VydmljZS4kaW5qZWN0ID0gWyckcm9vdFNjb3BlJywgJyRodHRwJywgJyRzdGF0ZScsICckbG9nJywgJ2NhY2hlU2VydmljZSddO1xyXG5cdGZ1bmN0aW9uIGxvZ2luU2VydmljZSgkcm9vdFNjb3BlLCAkaHR0cCwgJHN0YXRlLCAkbG9nLCBjYWNoZVNlcnZpY2UpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGxvZ2luOiBsb2dpblxyXG5cdFx0fTtcclxuXHJcblx0XHRmdW5jdGlvbiBsb2dpbih1c2VyKSB7XHJcblx0XHRcdHVzZXIubmFtZSA9IHVzZXIubmFtZS50b0xvd2VyQ2FzZSgpLnRyaW0oKTtcclxuXHJcblx0XHRcdHJldHVybiAkaHR0cC5wb3N0KCdhcGkvdXNlci9sb2dpbk1hbmFnZXIucGhwJywgdXNlcilcclxuXHRcdFx0XHQudGhlbihsb2dpbkNvbXBsZXRlKVxyXG5cdFx0XHRcdC5jYXRjaChsb2dpbkZhaWxlZCk7XHJcblxyXG5cdFx0XHRmdW5jdGlvbiBsb2dpbkNvbXBsZXRlKHJlc3BvbnNlKSB7XHJcblx0XHRcdFx0aWYgKHJlc3BvbnNlLmRhdGEuc3VjY2VzcyA9PT0gZmFsc2UpIHtcclxuXHRcdFx0XHRcdHJldHVybiByZXNwb25zZS5kYXRhLnRpdGxlO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Y2FjaGVTZXJ2aWNlLmNhY2hlQWxsKCk7XHJcblx0XHRcdFx0JHJvb3RTY29wZS4kYnJvYWRjYXN0KCd1cGRhdGVVc2VyJyk7XHJcblx0XHRcdFx0JHN0YXRlLmdvKCdkYXNoYm9hcmQnKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZnVuY3Rpb24gbG9naW5GYWlsZWQoZXJyb3IpIHtcclxuXHRcdFx0XHQkbG9nLmVycm9yKGVycm9yKTtcclxuXHRcdFx0XHRyZXR1cm4gJ1NvbWV0aGluZyB3ZW50IHdyb25nLiBQbGVhc2UgdHJ5IGFnYWluLic7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XHJcblxuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5jb250cm9sbGVyKCdSZWdpc3RlckNvbnRyb2xsZXInLCBSZWdpc3RlckNvbnRyb2xsZXIpO1xyXG5cclxuXHRSZWdpc3RlckNvbnRyb2xsZXIuJGluamVjdCA9IFsncmVnaXN0ZXJTZXJ2aWNlJ107XHJcblx0ZnVuY3Rpb24gUmVnaXN0ZXJDb250cm9sbGVyKHJlZ2lzdGVyU2VydmljZSkge1xyXG5cdFx0dmFyIHZtID0gdGhpcztcclxuXHRcdHZtLmVycm9yID0gJyc7XHJcblx0XHR2bS5sb2FkaW5nID0gZmFsc2U7XHJcblx0XHR2bS5yZWdpc3RlciA9IHJlZ2lzdGVyO1xyXG5cclxuXHRcdGZ1bmN0aW9uIHJlZ2lzdGVyKCkge1xyXG5cdFx0XHR2bS5sb2FkaW5nID0gdHJ1ZTtcclxuXHRcdFx0cmVnaXN0ZXJTZXJ2aWNlLnJlZ2lzdGVyKHZtLnVzZXIpXHJcblx0XHRcdFx0LnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuXHRcdFx0XHRcdHZtLmxvYWRpbmcgPSBmYWxzZTtcclxuXHRcdFx0XHRcdHZtLmVycm9yID0gcmVzcG9uc2U7XHJcblx0XHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fVxyXG59KSgpO1xuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5mYWN0b3J5KCdyZWdpc3RlclNlcnZpY2UnLCByZWdpc3RlclNlcnZpY2UpO1xyXG5cclxuXHRyZWdpc3RlclNlcnZpY2UuJGluamVjdCA9IFsnJGxvY2F0aW9uJywgJyRsb2cnLCAnY3J1ZFNlcnZpY2UnXTtcclxuXHRmdW5jdGlvbiByZWdpc3RlclNlcnZpY2UoJGxvY2F0aW9uLCAkbG9nLCBjcnVkU2VydmljZSkge1xyXG5cdFx0dmFyIHZtID0gdGhpczsgIC8vIGpzaGludCBpZ25vcmU6bGluZVxyXG5cdFx0dm0uY3J1ZCA9IG5ldyBjcnVkU2VydmljZSgndXNlcicpO1xyXG5cclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHJlZ2lzdGVyOiByZWdpc3RlclxyXG5cdFx0fTtcclxuXHJcblx0XHRmdW5jdGlvbiByZWdpc3Rlcih1c2VyKSB7XHJcblx0XHRcdHVzZXIubmFtZSA9IHVzZXIubmFtZS50b0xvd2VyQ2FzZSgpLnRyaW0oKTtcclxuXHJcblx0XHRcdHJldHVybiB2bS5jcnVkLmNyZWF0ZSh1c2VyKVxyXG5cdFx0XHRcdC50aGVuKHJlZ2lzdHJhdGlvbkNvbXBsZXRlKTtcclxuXHJcblx0XHRcdGZ1bmN0aW9uIHJlZ2lzdHJhdGlvbkNvbXBsZXRlKHJlc3BvbnNlKSB7XHJcblx0XHRcdFx0aWYgKHJlc3BvbnNlLnN1Y2Nlc3MgPT09ICdmYWxzZScpIHtcclxuXHRcdFx0XHRcdCRsb2cuZXJyb3IocmVzcG9uc2UudGl0bGUpO1xyXG5cdFx0XHRcdFx0cmV0dXJuIHJlc3BvbnNlLnRpdGxlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHQkbG9jYXRpb24udXJsKCcvbG9naW4nKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxufSkoKTtcbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuY29udHJvbGxlcignTGFiZWxQYWdlQ29udHJvbGxlcicsIExhYmVsUGFnZUNvbnRyb2xsZXIpO1xyXG5cclxuXHRMYWJlbFBhZ2VDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzdGF0ZVBhcmFtcyddO1xyXG5cdGZ1bmN0aW9uIExhYmVsUGFnZUNvbnRyb2xsZXIoJHN0YXRlUGFyYW1zKSB7XHJcblx0XHR0aGlzLmxhYmVsSWQgPSAkc3RhdGVQYXJhbXMubGFiZWxJZDtcclxuXHR9XHJcbn0pKCk7XG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmZhY3RvcnkoJ2FjY2Vzc1NlcnZpY2UnLCBhY2Nlc3NTZXJ2aWNlKTtcclxuXHJcblx0YWNjZXNzU2VydmljZS4kaW5qZWN0ID0gWyckcScsICdzZXNzaW9uU2VydmljZScsICdzdGF0dXNTZXJ2aWNlJ107XHJcblx0ZnVuY3Rpb24gYWNjZXNzU2VydmljZSgkcSwgc2Vzc2lvblNlcnZpY2UsIHN0YXR1c1NlcnZpY2UpIHtcclxuXHRcdHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XHJcblxyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0aXNBdXRoZW50aWNhdGVkOiBpc0F1dGhlbnRpY2F0ZWQsXHJcblx0XHRcdGlzQWRtaW46IGlzQWRtaW5cclxuXHRcdH07XHJcblxyXG5cdFx0ZnVuY3Rpb24gaXNBdXRoZW50aWNhdGVkKCkge1xyXG5cdFx0XHRyZXR1cm4gc2Vzc2lvblNlcnZpY2UuZ2V0VmFyKCduYW1lJylcclxuXHRcdFx0XHQudGhlbihpc0F1dGhlbnRpY2F0ZWRDb21wbGV0ZSk7XHJcblxyXG5cdFx0XHRmdW5jdGlvbiBpc0F1dGhlbnRpY2F0ZWRDb21wbGV0ZShyZXNwb25zZSkge1xyXG5cdFx0XHRcdGlmIChyZXNwb25zZS5kYXRhLnN1Y2Nlc3MgIT09IGZhbHNlKSB7XHJcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlKHN0YXR1c1NlcnZpY2UuT0spO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3Qoc3RhdHVzU2VydmljZS5VTkFVVEhPUklaRUQpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cmV0dXJuIGRlZmVycmVkLnByb21pc2U7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBpc0FkbWluKCkge1xyXG5cclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XHJcblxuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0LyoqXHJcblx0KiBTdGF0dXMgY29kZXMgdXNlZCB3aGVuIGFjY2Vzc2luZyB2YXJpb3VzIHBhZ2VzIGluIHRoZSBhcHAuXHJcblx0Ki9cclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5zZXJ2aWNlKCdzdGF0dXNTZXJ2aWNlJywgc3RhdHVzU2VydmljZSk7XHJcblxyXG5cdGZ1bmN0aW9uIHN0YXR1c1NlcnZpY2UoKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRPSzogMjAwLFxyXG5cdFx0XHRVTkFVVEhPUklaRUQ6IDQwMSxcclxuXHRcdFx0Rk9SQklEREVOOiA0MDNcclxuXHRcdH07XHJcblx0fVxyXG59KSgpO1xyXG5cbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuZmFjdG9yeSgnY2FsZW5kYXJTZXJ2aWNlJywgY2FsZW5kYXJTZXJ2aWNlKTtcclxuXHJcblx0Y2FsZW5kYXJTZXJ2aWNlLiRpbmplY3QgPSBbJ2NydWRTZXJ2aWNlJywgJ2NhY2hlU2VydmljZSddO1xyXG5cdGZ1bmN0aW9uIGNhbGVuZGFyU2VydmljZShjcnVkU2VydmljZSwgY2FjaGVTZXJ2aWNlKSB7XHJcblx0XHR2YXIgdm0gPSB0aGlzOyAgLy8ganNoaW50IGlnbm9yZTpsaW5lXHJcblx0XHR2bS5jYWxlbmRhciA9IG5ldyBjcnVkU2VydmljZSgnY2FsZW5kYXInKTtcclxuXHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRjcmVhdGVDYWxlbmRhcjogY3JlYXRlQ2FsZW5kYXIsXHJcblx0XHRcdGRlbGV0ZUNhbGVuZGFyOiBkZWxldGVDYWxlbmRhcixcclxuXHRcdFx0Z2V0Q2FsZW5kYXJzOiBnZXRDYWxlbmRhcnMsXHJcblx0XHRcdHVwZGF0ZUNhbGVuZGFyOiB1cGRhdGVDYWxlbmRhclxyXG5cdFx0fTtcclxuXHJcblx0XHRmdW5jdGlvbiBjcmVhdGVDYWxlbmRhcihjYWxlbmRhcikge1xyXG5cdFx0XHRyZXR1cm4gdm0uY2FsZW5kYXIuY3JlYXRlKGNhbGVuZGFyKS50aGVuKHByb21pc2VDb21wbGV0ZSk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gZGVsZXRlQ2FsZW5kYXIoaWQpIHtcclxuXHRcdFx0cmV0dXJuIHZtLmNhbGVuZGFyLnJlbW92ZShpZCkudGhlbihwcm9taXNlQ29tcGxldGUpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGdldENhbGVuZGFycygpIHtcclxuXHRcdFx0cmV0dXJuIGNhY2hlU2VydmljZS5nZXRDYWxlbmRhcnMoKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiB1cGRhdGVDYWxlbmRhcihpZCwgY2FsZW5kYXIpIHtcclxuXHRcdFx0cmV0dXJuIHZtLmNhbGVuZGFyLnVwZGF0ZShpZCwgY2FsZW5kYXIpLnRoZW4ocHJvbWlzZUNvbXBsZXRlKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBwcm9taXNlQ29tcGxldGUocmVzcG9uc2UpIHtcclxuXHRcdFx0dmFyIHJlc3VsdCA9IHJlc3BvbnNlLmRhdGE7XHJcblx0XHRcdGlmIChyZXN1bHQuc3VjY2Vzcykge1xyXG5cdFx0XHRcdGNhY2hlU2VydmljZS5jYWNoZUNhbGVuZGFycygpO1xyXG5cdFx0XHRcdHJldHVybiByZXN1bHQuZGF0YTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmVzdWx0LnRpdGxlO1xyXG5cdFx0fVxyXG5cdH1cclxufSkoKTtcclxuXG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmZhY3RvcnkoJ2V2ZW50TW9kYWxTZXJ2aWNlJywgZXZlbnRNb2RhbFNlcnZpY2UpO1xyXG5cclxuXHRldmVudE1vZGFsU2VydmljZS4kaW5qZWN0ID0gWyckdWliTW9kYWwnLCAnY2FsZW5kYXJTZXJ2aWNlJywgJ2V2ZW50c1NlcnZpY2UnXTtcclxuXHRmdW5jdGlvbiBldmVudE1vZGFsU2VydmljZSgkdWliTW9kYWwsIGNhbGVuZGFyU2VydmljZSwgZXZlbnRzU2VydmljZSkge1xyXG5cdFx0dmFyIHZtID0gdGhpczsgIC8vIGpzaGludCBpZ25vcmU6bGluZVxyXG5cclxuXHRcdHJldHVybiB7XHJcblx0XHRcdG9wZW5FdmVudE1vZGFsOiBvcGVuRXZlbnRNb2RhbFxyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCogV2l0aG91dCBjbG9uaW5nIHRoZSBldmVudCwgYW55IGNoYW5nZXMgbWFkZSBpbiB0aGUgbW9kYWwgd2lsbCBiZSByZWZsZWN0ZWRcclxuXHRcdCogaW4gdGhlIG1haW4gd2luZG93IHJlZ2FyZGxlc3Mgb2YgaWYgdGhlIGNoYW5nZXMgd2VyZSBzYXZlZCBvciBub3QsIHdoaWNoXHJcblx0XHQqIG1lYW5zIGEgdXNlciB3b3VsZCBub3QgYmUgYWJsZSB0byBjYW5jZWwgdGhlaXIgY2hhbmdlcyB1bmxlc3MgdGhleSByZWZyZXNoLlxyXG5cdFx0Ki9cclxuXHRcdGZ1bmN0aW9uIG9wZW5FdmVudE1vZGFsKGV2ZW50LCBjYWxlbmRhcnMpIHtcclxuXHRcdFx0dmFyIGNsb25lZEV2ZW50ID0ge307XHJcblx0XHRcdGFuZ3VsYXIuZXh0ZW5kKGNsb25lZEV2ZW50LCBldmVudCk7XHJcblxyXG5cdFx0XHRyZXR1cm4gJHVpYk1vZGFsLm9wZW4oe1xyXG5cdFx0XHRcdGNvbnRyb2xsZXI6ICdNb2RhbENvbnRyb2xsZXInLFxyXG5cdFx0XHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcclxuXHRcdFx0XHR0ZW1wbGF0ZVVybDogJ21vZHVsZXMvZXZlbnRzL21vZGFsL2V2ZW50Lm1vZGFsLmh0bWwnLFxyXG5cdFx0XHRcdHJlc29sdmU6IHtcclxuXHRcdFx0XHRcdGdyb3VwczogZnVuY3Rpb24oKSB7IHJldHVybiBjYWxlbmRhcnM7IH0sXHJcblx0XHRcdFx0XHRpdGVtOiBjbG9uZWRFdmVudFxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSkucmVzdWx0XHJcblx0XHRcdFx0LnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuXHRcdFx0XHRcdHJldHVybiBldmVudHNTZXJ2aWNlLmNyZWF0ZU9yVXBkYXRlRXZlbnQocmVzcG9uc2UpXHJcblx0XHRcdFx0XHRcdC50aGVuKGV2ZW50c1NlcnZpY2UuZ2V0RXZlbnRzKTtcclxuXHRcdFx0XHR9LCBmdW5jdGlvbihyZXNwb25zZSkge1xyXG5cdFx0XHRcdFx0aWYgKE51bWJlcihyZXNwb25zZSkpIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIGV2ZW50c1NlcnZpY2UuZGVsZXRlRXZlbnQocmVzcG9uc2UpXHJcblx0XHRcdFx0XHRcdFx0LnRoZW4oZXZlbnRzU2VydmljZS5nZXRFdmVudHMpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdH1cclxufSkoKTtcclxuXG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmZhY3RvcnkoJ2NhbGVuZGFyV2lkZ2V0U2VydmljZScsIGNhbGVuZGFyV2lkZ2V0U2VydmljZSk7XHJcblxyXG5cdGNhbGVuZGFyV2lkZ2V0U2VydmljZS4kaW5qZWN0ID0gWydtb21lbnQnXTtcclxuXHRmdW5jdGlvbiBjYWxlbmRhcldpZGdldFNlcnZpY2UobW9tZW50KSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRnZXRFbmRPZkRheTogZ2V0RW5kT2ZEYXksXHJcblx0XHRcdGdldE1vbnRoOiBnZXRNb250aCxcclxuXHRcdFx0Z2V0VG9kYXk6IGdldFRvZGF5LFxyXG5cdFx0XHRnZXRXZWVrOiBnZXRXZWVrLFxyXG5cdFx0XHRpc1NhbWVEYXk6IGlzU2FtZURheSxcclxuXHRcdFx0bGFzdE1vbnRoOiBsYXN0TW9udGgsXHJcblx0XHRcdG5leHRNb250aDogbmV4dE1vbnRoXHJcblx0XHR9O1xyXG5cclxuXHRcdGZ1bmN0aW9uIGdldEVuZE9mRGF5KGRheSkge1xyXG5cdFx0XHRyZXR1cm4gZGF5LmNsb25lKCkuYWRkKDEsICdkYXknKS5zdWJ0cmFjdCgxLCAnbXMnKTtcclxuXHRcdH1cclxuXHJcblx0XHQvKipcclxuXHRcdCogQHBhcmFtIHtNb21lbnQgT2JqZWN0fSBhRGF5IERheSB0byBidWlsZCBtb250aCBhcm91bmQuXHJcblx0XHQqIEByZXR1cm4ge01vbWVudCBPYmplY3RbXVtdfVxyXG5cdFx0Ki9cclxuXHRcdGZ1bmN0aW9uIGdldE1vbnRoKGFEYXkpIHtcclxuXHRcdFx0dmFyIG1vbnRoID0gW107XHJcblx0XHRcdHZhciBkYXkgPSBhRGF5LmNsb25lKCkuZGF0ZSgxKS5zdGFydE9mKCd3ZWVrJyk7XHJcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgNjsgaSsrKSB7XHJcblx0XHRcdFx0bW9udGgucHVzaChnZXRXZWVrKGRheSwgYURheS5tb250aCgpKSk7XHJcblx0XHRcdFx0ZGF5ID0gZGF5LmFkZCgxLCAnd2Vla3MnKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gbW9udGg7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gZ2V0VG9kYXkoKSB7XHJcblx0XHRcdHJldHVybiBtb21lbnQoKTtcclxuXHRcdH1cclxuXHJcblx0XHQvKipcclxuXHRcdCogQHBhcmFtIHtNb21lbnQgT2JqZWN0fVx0c3RhcnREYXlcdFN0YXJ0aW5nIGRheSBvZiBhIHdlZWsuXHJcblx0XHQqIEBwYXJhbSB7aW50fVx0XHRcdFx0dGFyZ2V0TW9udGhcdE1vbnRoIG51bWJlciBiZWluZyBidWlsdC5cclxuXHRcdCpcclxuXHRcdCogQHJldHVybiB7TW9tZW50IE9iamVjdFtdfVxyXG5cdFx0Ki9cclxuXHRcdGZ1bmN0aW9uIGdldFdlZWsoc3RhcnREYXksIHRhcmdldE1vbnRoKSB7XHJcblx0XHRcdHZhciB3ZWVrID0gW107XHJcblxyXG5cdFx0XHR2YXIgZGF5ID0gc3RhcnREYXkuY2xvbmUoKTtcclxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCA3OyBpKyspIHtcclxuXHRcdFx0XHR3ZWVrLnB1c2goe1xyXG5cdFx0XHRcdFx0bnVtYmVyOiBkYXkuZGF0ZSgpLFxyXG5cdFx0XHRcdFx0aXNUYXJnZXRNb250aDogKGRheS5tb250aCgpID09PSB0YXJnZXRNb250aCksXHJcblx0XHRcdFx0XHRpc1RvZGF5OiBkYXkuaXNTYW1lKG1vbWVudCgpLCAnZGF5JyksXHJcblx0XHRcdFx0XHRmdWxsRGF0ZTogZGF5XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0ZGF5ID0gZGF5LmNsb25lKCkuYWRkKDEsICdkYXlzJyk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiB3ZWVrO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8qKlxyXG5cdFx0KiBAcGFyYW0ge01vbWVudCBPYmplY3R9XHRkYXkxXHJcblx0XHQqIEBwYXJhbSB7TW9tZW50IE9iamVjdH1cdGRheTJcclxuXHRcdCpcclxuXHRcdCogQHJldHVybiB7Ym9vbH1cclxuXHRcdCovXHJcblx0XHRmdW5jdGlvbiBpc1NhbWVEYXkoZGF5MSwgZGF5Mikge1xyXG5cdFx0XHRyZXR1cm4gZGF5MS5pc1NhbWUoZGF5MiwgJ2RheScpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8qKlxyXG5cdFx0KiBTaW5jZSBzcmNNb250aCBpcyBhbiBhcnJheSBvZiBkYXlzIGJ5IHdlZWtzLCBpdCBjb250YWlucyBkYXlzIG5vdCBpbiB0aGVcclxuXHRcdCogc291cmNlIG1vbnRoLiBUaGUgZmlyc3QgZGF5IG9mIHRoZSB0aGlyZCB3ZWVrIG9mIHRoZSBnaXZlbiBtb250aCBpc1xyXG5cdFx0KiBndWFyYW50ZWVkIHRvIGJlIGEgZGF5IHdpdGhpbiB0aGUgc291cmNlIG1vbnRoLlxyXG5cdFx0KlxyXG5cdFx0KiBAcGFyYW0ge01vbWVudCBPYmplY3R9XHRzcmNNb250aFxyXG5cdFx0KiBAcmV0dXJuIHtNb21lbnQgT2JqZWN0W119XHJcblx0XHQqL1xyXG5cdFx0ZnVuY3Rpb24gbGFzdE1vbnRoKHNyY01vbnRoKSB7XHJcblx0XHRcdHJldHVybiBnZXRNb250aChzcmNNb250aFszXVswXS5mdWxsRGF0ZS5jbG9uZSgpLnN1YnRyYWN0KDEsICdtb250aHMnKSk7XHJcblx0XHR9XHJcblxyXG5cdFx0LyoqXHJcblx0XHQqIEBzZWUgbGFzdE1vbnRoKClcclxuXHRcdCovXHJcblx0XHRmdW5jdGlvbiBuZXh0TW9udGgoc3JjTW9udGgpIHtcclxuXHRcdFx0cmV0dXJuIGdldE1vbnRoKHNyY01vbnRoWzNdWzBdLmZ1bGxEYXRlLmNsb25lKCkuYWRkKDEsICdtb250aHMnKSk7XHJcblx0XHR9XHJcblx0fVxyXG59KSgpO1xyXG5cbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuZmFjdG9yeSgncmVjdXJyZW5jZU1vZGFsU2VydmljZScsIHJlY3VycmVuY2VNb2RhbFNlcnZpY2UpO1xyXG5cclxuXHRyZWN1cnJlbmNlTW9kYWxTZXJ2aWNlLiRpbmplY3QgPSBbJyR1aWJNb2RhbCcsICdyZWN1cnJlbmNlU2VydmljZSddO1xyXG5cdGZ1bmN0aW9uIHJlY3VycmVuY2VNb2RhbFNlcnZpY2UoJHVpYk1vZGFsLCByZWN1cnJlbmNlU2VydmljZSkge1xyXG5cdFx0dmFyIHJjID0gdGhpczsgLy8ganNoaW50IGlnbm9yZTogbGluZVxyXG5cdFx0dmFyIHJlY3VycmVuY2VJbmZvID0ge1xyXG5cdFx0XHRmcmVxOiBbJ2hvdXJseScsICdkYWlseScsICd3ZWVrbHknLCAnbW9udGhseScsICd5ZWFybHknXSxcclxuXHRcdFx0ZGF5czogWydtbycsICd0dScsICd3ZScsICd0aCcsICdmcicsICdzYScsICdzdSddXHJcblx0XHR9O1xyXG5cclxuXHRcdHJldHVybiB7XHJcblx0XHRcdG9wZW5SZWN1cnJlbmNlTW9kYWw6IG9wZW5SZWN1cnJlbmNlTW9kYWxcclxuXHRcdH07XHJcblxyXG5cdFx0ZnVuY3Rpb24gb3BlblJlY3VycmVuY2VNb2RhbChpdGVtKSB7XHJcblx0XHRcdHJldHVybiAkdWliTW9kYWwub3Blbih7XHJcblx0XHRcdFx0Y29udHJvbGxlcjogJ01vZGFsQ29udHJvbGxlcicsXHJcblx0XHRcdFx0Y29udHJvbGxlckFzOiAndm0nLFxyXG5cdFx0XHRcdHRlbXBsYXRlVXJsOiAnbW9kdWxlcy9yZWN1cnJlbmNlL21vZGFsL3JlY3VycmVuY2UubW9kYWwuaHRtbCcsXHJcblx0XHRcdFx0cmVzb2x2ZToge1xyXG5cdFx0XHRcdFx0Z3JvdXBzOiBmdW5jdGlvbigpIHsgcmV0dXJuIHJlY3VycmVuY2VJbmZvOyB9LFxyXG5cdFx0XHRcdFx0aXRlbTogaXRlbVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSkucmVzdWx0XHJcblx0XHRcdFx0LnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuXHRcdFx0XHRcdHJlY3VycmVuY2VTZXJ2aWNlLmNvbnN0cnVjdFJlY3VycmVuY2UoaXRlbSk7XHJcblx0XHRcdFx0fSwgZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuXHRcdFx0XHRcdHJlY3VycmVuY2VTZXJ2aWNlLmNsZWFyUmVjdXJyZW5jZShpdGVtKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XHJcblxuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5mYWN0b3J5KCdsYWJlbFNlcnZpY2UnLCBsYWJlbFNlcnZpY2UpO1xyXG5cclxuXHRsYWJlbFNlcnZpY2UuJGluamVjdCA9IFsnY3J1ZFNlcnZpY2UnLCAnY2FjaGVTZXJ2aWNlJ107XHJcblx0ZnVuY3Rpb24gbGFiZWxTZXJ2aWNlKGNydWRTZXJ2aWNlLCBjYWNoZVNlcnZpY2UpIHtcclxuXHRcdHZhciB2bSA9IHRoaXM7ICAvLyBqc2hpbnQgaWdub3JlOmxpbmVcclxuXHRcdHZtLmxhYmVsID0gbmV3IGNydWRTZXJ2aWNlKCdsYWJlbCcpO1xyXG5cclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGNyZWF0ZUxhYmVsOiBjcmVhdGVMYWJlbCxcclxuXHRcdFx0ZGVsZXRlTGFiZWw6IGRlbGV0ZUxhYmVsLFxyXG5cdFx0XHRnZXRMYWJlbHM6IGdldExhYmVscyxcclxuXHRcdFx0dXBkYXRlTGFiZWw6IHVwZGF0ZUxhYmVsXHJcblx0XHR9O1xyXG5cclxuXHRcdGZ1bmN0aW9uIGNyZWF0ZUxhYmVsKGxhYmVsKSB7XHJcblx0XHRcdHJldHVybiB2bS5sYWJlbC5jcmVhdGUobGFiZWwpLnRoZW4ocHJvbWlzZUNvbXBsZXRlKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBkZWxldGVMYWJlbChpZCkge1xyXG5cdFx0XHRyZXR1cm4gdm0ubGFiZWwucmVtb3ZlKGlkKS50aGVuKHByb21pc2VDb21wbGV0ZSk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gZ2V0TGFiZWxzKCkge1xyXG5cdFx0XHRyZXR1cm4gY2FjaGVTZXJ2aWNlLmdldExhYmVscygpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIHVwZGF0ZUxhYmVsKGlkLCBsYWJlbCkge1xyXG5cdFx0XHRyZXR1cm4gdm0ubGFiZWwudXBkYXRlKGlkLCBsYWJlbCkudGhlbihwcm9taXNlQ29tcGxldGUpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIHByb21pc2VDb21wbGV0ZShyZXNwb25zZSkge1xyXG5cdFx0XHR2YXIgcmVzID0gcmVzcG9uc2UuZGF0YTtcclxuXHRcdFx0aWYgKHJlcy5zdWNjZXNzKSB7XHJcblx0XHRcdFx0Y2FjaGVTZXJ2aWNlLmNhY2hlTGFiZWxzKCk7XHJcblx0XHRcdFx0cmV0dXJuIHJlcy5kYXRhO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXMudGl0bGU7XHJcblx0XHR9XHJcblx0fVxyXG59KSgpO1xyXG5cbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuZmFjdG9yeSgnc3VidGFza01vZGFsU2VydmljZScsIHN1YnRhc2tNb2RhbFNlcnZpY2UpO1xyXG5cclxuXHRzdWJ0YXNrTW9kYWxTZXJ2aWNlLiRpbmplY3QgPSBbJyR1aWJNb2RhbCcsICdsYWJlbFNlcnZpY2UnLCAnc3VidGFza3NTZXJ2aWNlJ107XHJcblx0ZnVuY3Rpb24gc3VidGFza01vZGFsU2VydmljZSgkdWliTW9kYWwsIGxhYmVsU2VydmljZSwgc3VidGFza3NTZXJ2aWNlKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRvcGVuU3VidGFza01vZGFsOiBvcGVuU3VidGFza01vZGFsXHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0KiBXaXRob3V0IGNsb25pbmcgdGhlIHN1YnRhc2ssIGFueSBjaGFuZ2VzIG1hZGUgaW4gdGhlIG1vZGFsIHdpbGwgYmUgcmVmbGVjdGVkXHJcblx0XHQqIGluIHRoZSBtYWluIHdpbmRvdyByZWdhcmRsZXNzIG9mIGlmIHRoZSBjaGFuZ2VzIHdlcmUgc2F2ZWQgb3Igbm90LCB3aGljaFxyXG5cdFx0KiBtZWFucyBhIHVzZXIgd291bGQgbm90IGJlIGFibGUgdG8gY2FuY2VsIHRoZWlyIGNoYW5nZXMgdW5sZXNzIHRoZXkgcmVmcmVzaC5cclxuXHRcdCovXHJcblx0XHRmdW5jdGlvbiBvcGVuU3VidGFza01vZGFsKHN1YnRhc2ssIHRhc2spIHtcclxuXHRcdFx0dmFyIGNsb25lZFN1YnRhc2sgPSB7fTtcclxuXHRcdFx0YW5ndWxhci5leHRlbmQoY2xvbmVkU3VidGFzaywgc3VidGFzayk7XHJcblxyXG5cdFx0XHQkdWliTW9kYWwub3Blbih7XHJcblx0XHRcdFx0Y29udHJvbGxlcjogJ01vZGFsQ29udHJvbGxlcicsXHJcblx0XHRcdFx0Y29udHJvbGxlckFzOiAndm0nLFxyXG5cdFx0XHRcdHRlbXBsYXRlVXJsOiAnbW9kdWxlcy90YXNrcy9tb2RhbC9zdWJ0YXNrLm1vZGFsLmh0bWwnLFxyXG5cdFx0XHRcdHJlc29sdmU6IHtcclxuXHRcdFx0XHRcdGdyb3VwczogdGFzayxcclxuXHRcdFx0XHRcdGl0ZW06IGNsb25lZFN1YnRhc2tcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pLnJlc3VsdFxyXG5cdFx0XHRcdC50aGVuKGZ1bmN0aW9uKHJlcykge1xyXG5cdFx0XHRcdFx0c3VidGFza3NTZXJ2aWNlLmNyZWF0ZU9yVXBkYXRlU3VidGFzayhyZXMuc3VidGFzaywgcmVzLnRhc2spO1xyXG5cdFx0XHRcdH0sIGZ1bmN0aW9uKHJlcykge1xyXG5cdFx0XHRcdFx0aWYgKHR5cGVvZiByZXMgIT09ICdzdHJpbmcnKSB7XHJcblx0XHRcdFx0XHRcdHN1YnRhc2tzU2VydmljZS5kZWxldGVTdWJ0YXNrKHJlcy5zdWJ0YXNrLCByZXMudGFzayk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fVxyXG59KSgpO1xyXG5cbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuZmFjdG9yeSgndGFza01vZGFsU2VydmljZScsIHRhc2tNb2RhbFNlcnZpY2UpO1xyXG5cclxuXHR0YXNrTW9kYWxTZXJ2aWNlLiRpbmplY3QgPSBbJyR1aWJNb2RhbCcsICdsYWJlbFNlcnZpY2UnLCAndGFza3NTZXJ2aWNlJ107XHJcblx0ZnVuY3Rpb24gdGFza01vZGFsU2VydmljZSgkdWliTW9kYWwsIGxhYmVsU2VydmljZSwgdGFza3NTZXJ2aWNlKSB7XHJcblx0XHR2YXIgdm0gPSB0aGlzOyAvLyBqc2hpbnQgaWdub3JlOiBsaW5lXHJcblxyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0b3BlblRhc2tNb2RhbDogb3BlblRhc2tNb2RhbFxyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCogV2l0aG91dCBjbG9uaW5nIHRoZSB0YXNrLCBhbnkgY2hhbmdlcyBtYWRlIGluIHRoZSBtb2RhbCB3aWxsIGJlIHJlZmxlY3RlZFxyXG5cdFx0KiBpbiB0aGUgbWFpbiB3aW5kb3cgcmVnYXJkbGVzcyBvZiBpZiB0aGUgY2hhbmdlcyB3ZXJlIHNhdmVkIG9yIG5vdCwgd2hpY2hcclxuXHRcdCogbWVhbnMgYSB1c2VyIHdvdWxkIG5vdCBiZSBhYmxlIHRvIGNhbmNlbCB0aGVpciBjaGFuZ2VzIHVubGVzcyB0aGV5IHJlZnJlc2guXHJcblx0XHQqL1xyXG5cdFx0ZnVuY3Rpb24gb3BlblRhc2tNb2RhbCh0YXNrLCBsYWJlbHMpIHtcclxuXHRcdFx0dmFyIGNsb25lZFRhc2sgPSB7fTtcclxuXHRcdFx0YW5ndWxhci5leHRlbmQoY2xvbmVkVGFzaywgdGFzayk7XHJcblxyXG5cdFx0XHRyZXR1cm4gJHVpYk1vZGFsLm9wZW4oe1xyXG5cdFx0XHRcdGNvbnRyb2xsZXI6ICdNb2RhbENvbnRyb2xsZXInLFxyXG5cdFx0XHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcclxuXHRcdFx0XHR0ZW1wbGF0ZVVybDogJ21vZHVsZXMvdGFza3MvbW9kYWwvdGFzay5tb2RhbC5odG1sJyxcclxuXHRcdFx0XHRyZXNvbHZlOiB7XHJcblx0XHRcdFx0XHRncm91cHM6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbGFiZWxzOyB9LFxyXG5cdFx0XHRcdFx0aXRlbTogY2xvbmVkVGFza1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSkucmVzdWx0XHJcblx0XHRcdFx0LnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuXHRcdFx0XHRcdHJldHVybiB0YXNrc1NlcnZpY2UuY3JlYXRlT3JVcGRhdGVUYXNrKHJlc3BvbnNlKVxyXG5cdFx0XHRcdFx0XHQudGhlbih0YXNrc1NlcnZpY2UuZ2V0VGFza3MpO1xyXG5cdFx0XHRcdH0sIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcblx0XHRcdFx0XHRpZiAoTnVtYmVyKHJlc3BvbnNlKSkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gdGFza3NTZXJ2aWNlLmRlbGV0ZVRhc2socmVzcG9uc2UpXHJcblx0XHRcdFx0XHRcdFx0LnRoZW4odGFza3NTZXJ2aWNlLmdldFRhc2tzKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XHJcblxuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5jb250cm9sbGVyKCdTdWJ0YXNrc0NvbnRyb2xsZXInLCBTdWJ0YXNrc0NvbnRyb2xsZXIpO1xyXG5cclxuXHRTdWJ0YXNrc0NvbnRyb2xsZXIuJGluamVjdCA9IFsnc3VidGFza3NTZXJ2aWNlJywgJ3N1YnRhc2tNb2RhbFNlcnZpY2UnXTtcclxuXHRmdW5jdGlvbiBTdWJ0YXNrc0NvbnRyb2xsZXIoc3VidGFza3NTZXJ2aWNlLCBzdWJ0YXNrTW9kYWxTZXJ2aWNlKSB7XHJcblx0XHR2YXIgc3QgPSB0aGlzO1xyXG5cdFx0c3Quc2hvd1N1YnRhc2tNb2RhbCA9IHNob3dTdWJ0YXNrTW9kYWw7XHJcblx0XHRzdC50b2dnbGVDb21wbGV0ZWQgPSB0b2dnbGVDb21wbGV0ZWQ7XHJcblxyXG5cdFx0ZnVuY3Rpb24gc2hvd1N1YnRhc2tNb2RhbChzdWJ0YXNrKSB7XHJcblx0XHRcdHN1YnRhc2tNb2RhbFNlcnZpY2Uub3BlblN1YnRhc2tNb2RhbChzdWJ0YXNrLCBzdC50YXNrKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiB0b2dnbGVDb21wbGV0ZWQoc3VidGFzaykge1xyXG5cdFx0XHRzdWJ0YXNrc1NlcnZpY2UudG9nZ2xlQ29tcGxldGVkKHN1YnRhc2spO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIHVwZGF0ZVN1YnRhc2tzKHJlc3BvbnNlKSB7XHJcblx0XHRcdGlmIChyZXNwb25zZSkge1xyXG5cdFx0XHRcdHN0LnN1YnRhc2tzID0gcmVzcG9uc2U7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmRpcmVjdGl2ZSgnc3BTdWJ0YXNrcycsIHN1YnRhc2tzRGlyZWN0aXZlKTtcclxuXHJcblx0ZnVuY3Rpb24gc3VidGFza3NEaXJlY3RpdmUoKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHR0ZW1wbGF0ZVVybDogJ21vZHVsZXMvdGFza3Mvc3VidGFza3Mvc3VidGFza3MuaHRtbCcsXHJcblx0XHRcdGNvbnRyb2xsZXI6ICdTdWJ0YXNrc0NvbnRyb2xsZXInLFxyXG5cdFx0XHRjb250cm9sbGVyQXM6ICdzdCcsXHJcblx0XHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXHJcblx0XHRcdHNjb3BlOiB7XHJcblx0XHRcdFx0dGFzazogJz0nXHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0fVxyXG59KSgpO1xuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5mYWN0b3J5KCdzdWJ0YXNrc1NlcnZpY2UnLCBzdWJ0YXNrc1NlcnZpY2UpO1xyXG5cclxuXHRzdWJ0YXNrc1NlcnZpY2UuJGluamVjdCA9IFsnJGh0dHAnLCAnJGxvZyddO1xyXG5cdGZ1bmN0aW9uIHN1YnRhc2tzU2VydmljZSgkaHR0cCwgJGxvZykge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0Y3JlYXRlT3JVcGRhdGVTdWJ0YXNrOiBjcmVhdGVPclVwZGF0ZVN1YnRhc2ssXHJcblx0XHRcdGRlbGV0ZVN1YnRhc2s6IGRlbGV0ZVN1YnRhc2ssXHJcblx0XHRcdHRvZ2dsZUNvbXBsZXRlZDogdG9nZ2xlQ29tcGxldGVkXHJcblx0XHR9O1xyXG5cclxuXHRcdGZ1bmN0aW9uIGNyZWF0ZU9yVXBkYXRlU3VidGFzayhzdWJ0YXNrLCB0YXNrKSB7XHJcblx0XHRcdGlmICghdGFzay5zdWJ0YXNrcykge1xyXG5cdFx0XHRcdHRhc2suc3VidGFza3MgPSB7XHJcblx0XHRcdFx0XHRjdXJyZW50SWQ6IDEsXHJcblx0XHRcdFx0XHRsaXN0OiBbXVxyXG5cdFx0XHRcdH07XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmIChzdWJ0YXNrLmlkID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0XHRzdWJ0YXNrLmlkID0gdGFzay5zdWJ0YXNrcy5jdXJyZW50SWQrKztcclxuXHRcdFx0XHRzdWJ0YXNrLmNvbXBsZXRlZCA9IGZhbHNlO1xyXG5cdFx0XHRcdHRhc2suc3VidGFza3MubGlzdC5wdXNoKHN1YnRhc2spO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gZGVsZXRlU3VidGFzayhzdWJ0YXNrLCB0YXNrKSB7XHJcblx0XHRcdHRhc2suc3VidGFza3MubGlzdC5zcGxpY2UodGFzay5zdWJ0YXNrcy5saXN0LmluZGV4T2Yoc3VidGFzayksIDEpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIHRvZ2dsZUNvbXBsZXRlZChzdWJ0YXNrKSB7XHJcblx0XHRcdHN1YnRhc2suY29tcGxldGVkID0gIXN1YnRhc2suY29tcGxldGVkO1xyXG5cdFx0fVxyXG5cdH1cclxufSkoKTtcclxuXG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmNvbnRyb2xsZXIoJ0hlYWRlckNvbnRyb2xsZXInLCBIZWFkZXJDb250cm9sbGVyKTtcclxuXHJcblx0SGVhZGVyQ29udHJvbGxlci4kaW5qZWN0ID0gWyckcm9vdFNjb3BlJywgJ3VzZXInLCAnaGVhZGVyU2VydmljZSddO1xyXG5cdGZ1bmN0aW9uIEhlYWRlckNvbnRyb2xsZXIoJHJvb3RTY29wZSwgdXNlciwgaGVhZGVyU2VydmljZSkge1xyXG5cdFx0dmFyIHZtID0gdGhpcztcclxuXHRcdHZtLnVzZXIgPSB1c2VyO1xyXG5cclxuXHRcdGFjdGl2YXRlKCk7XHJcblxyXG5cdFx0ZnVuY3Rpb24gYWN0aXZhdGUoKSB7XHJcblx0XHRcdCRyb290U2NvcGUuJG9uKCd1cGRhdGVVc2VyJywgdXBkYXRlVXNlcik7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gdXBkYXRlVXNlcigpIHtcclxuXHRcdFx0aGVhZGVyU2VydmljZS5nZXRVc2VyKCkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xyXG5cdFx0XHRcdHZtLnVzZXIgPSByZXNwb25zZTtcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fVxyXG59KSgpO1xuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5mYWN0b3J5KCdoZWFkZXJTZXJ2aWNlJywgaGVhZGVyU2VydmljZSk7XHJcblxyXG5cdGhlYWRlclNlcnZpY2UuJGluamVjdCA9IFsnJGh0dHAnLCAnJGxvZycsICdzZXNzaW9uU2VydmljZSddO1xyXG5cdGZ1bmN0aW9uIGhlYWRlclNlcnZpY2UoJGh0dHAsICRsb2csIHNlc3Npb25TZXJ2aWNlKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRnZXRVc2VyOiBnZXRVc2VyXHJcblx0XHR9O1xyXG5cclxuXHRcdGZ1bmN0aW9uIGdldFVzZXIoKSB7XHJcblx0XHRcdHJldHVybiBzZXNzaW9uU2VydmljZS5nZXRWYXIoJ2FsbCcpXHJcblx0XHRcdFx0LnRoZW4oZ2V0TmFtZUNvbXBsZXRlKTtcclxuXHJcblx0XHRcdGZ1bmN0aW9uIGdldE5hbWVDb21wbGV0ZShyZXNwb25zZSkge1xyXG5cdFx0XHRcdHZhciByZXN1bHQgPSByZXNwb25zZS5kYXRhO1xyXG5cclxuXHRcdFx0XHRpZiAocmVzdWx0LnN1Y2Nlc3MgPT09IGZhbHNlKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiAnJywgYXZhdGFyOiAnY29udGVudC9pbWcvdXNlci5wbmcnIH07XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0LmRhdGE7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XHJcblxuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5jb250cm9sbGVyKCdTaWRlYmFyQ29udHJvbGxlcicsIFNpZGViYXJDb250cm9sbGVyKTtcclxuXHJcblx0U2lkZWJhckNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHJvb3RTY29wZScsICdsYWJlbFNlcnZpY2UnLCAnY2FsZW5kYXJTZXJ2aWNlJ107XHJcblx0ZnVuY3Rpb24gU2lkZWJhckNvbnRyb2xsZXIoJHJvb3RTY29wZSwgbGFiZWxTZXJ2aWNlLCBjYWxlbmRhclNlcnZpY2UpIHtcclxuXHRcdHZhciB2bSA9IHRoaXM7XHJcblx0XHR2bS5jb2xsYXBzZWQgPSB0cnVlO1xyXG5cdFx0dm0ubGFiZWxzID0gW107XHJcblx0XHR2bS5jYWxlbmRhcnMgPSBbXTtcclxuXHJcblx0XHRhY3RpdmF0ZSgpO1xyXG5cclxuXHRcdGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xyXG5cdFx0XHR1cGRhdGVDYWxlbmRhcnMoKTtcclxuXHRcdFx0dXBkYXRlTGFiZWxzKCk7XHJcblxyXG5cdFx0XHQkcm9vdFNjb3BlLiRvbigndXBkYXRlQ2FsZW5kYXJzJywgdXBkYXRlQ2FsZW5kYXJzKTtcclxuXHRcdFx0JHJvb3RTY29wZS4kb24oJ3VwZGF0ZUxhYmVscycsIHVwZGF0ZUxhYmVscyk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gdXBkYXRlQ2FsZW5kYXJzKCkge1xyXG5cdFx0XHR2bS5jYWxlbmRhcnMgPSBjYWxlbmRhclNlcnZpY2UuZ2V0Q2FsZW5kYXJzKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gdXBkYXRlTGFiZWxzKCkge1xyXG5cdFx0XHR2bS5sYWJlbHMgPSBsYWJlbFNlcnZpY2UuZ2V0TGFiZWxzKCk7XHJcblx0XHR9XHJcblx0fVxyXG59KSgpOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
