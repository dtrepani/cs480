!function(){"use strict";function e(e,t){function n(e){return e.cacheAll()}function r(e){return e.getUser()}function a(e){return e.getUsers()}function o(e){return e.isAuthenticated()}function c(e){return e.isAdmin()}e.state("root",{url:"",templateUrl:"index.html","abstract":!0,resolve:{cache:["cacheService",n],user:["headerService",r]},views:{header:{templateUrl:"pages/layout/header/header.html",controller:"HeaderController",controllerAs:"hc"},sidebar:{templateUrl:"pages/layout/sidebar/sidebar.html",controller:"SidebarController",controllerAs:"sc"}}}).state("login",{url:"/login",parent:"root",views:{"content@":{templateUrl:"pages/login/login.html",controller:"LoginController",controllerAs:"vm"}}}).state("logout",{url:"/logout",parent:"root",views:{"content@":{controller:"LogoutController",controllerAs:"vm"}}}).state("register",{url:"/register",parent:"root",views:{"content@":{templateUrl:"pages/register/register.html",controller:"RegisterController",controllerAs:"vm"}}}).state("admin",{url:"/admin",parent:"root",views:{"content@":{templateUrl:"pages/admin/admin.html",controller:"AdminController",controllerAs:"vm",resolve:{isAdmin:["accessService",c],users:["userService",a]}}}}).state("dashboard",{url:"/dashboard",parent:"root",views:{"content@":{templateUrl:"pages/dashboard/dashboard.html",resolve:{isAuthenticated:["accessService",o]}}}}).state("labels",{url:"/labels",parent:"root"}).state("labels.label",{url:"/:labelId",views:{"content@":{templateUrl:"pages/tasks/label.html",controller:"LabelPageController",controllerAs:"vm"}}}).state("inbox",{url:"/inbox",parent:"root",views:{"content@":{templateUrl:"pages/tasks/inbox.html",resolve:{isAuthenticated:["accessService",o]}}}}).state("today",{url:"/today",parent:"root",views:{"content@":{templateUrl:"pages/tasks/today.html",resolve:{isAuthenticated:["accessService",o]}}}}).state("week",{url:"/week",parent:"root",views:{"content@":{templateUrl:"pages/tasks/week.html",resolve:{isAuthenticated:["accessService",o]}}}}).state("calendar",{url:"/calendar",parent:"root",views:{"content@":{templateUrl:"pages/calendar/calendar.html",resolve:{isAuthenticated:["accessService",o]}}}}),t.otherwise("/dashboard")}angular.module("app",["ui.router","ui.bootstrap","angularMoment"]).config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function e(e){e.init()}angular.module("app").run(e),e.$inject=["appService"]}(),function(){"use strict";function e(e,t,n){function r(){e.$on("$stateChangeError",a)}function a(e,r,a,o,c,s){s===n.UNAUTHORIZED&&(e.preventDefault(),t.go("login"))}return{init:r}}angular.module("app").factory("appService",e),e.$inject=["$rootScope","$state","statusService"]}(),function(){"use strict";function e(){return function(e,t){if(!t)return e;for(var n=[],r=0;r<e.length;r++)(e[r].label_id===t||e[r].calendar_id===t)&&n.push(e[r]);return n}}angular.module("app").filter("inGroups",e),e.$inject=[]}(),function(){"use strict";function e(e){return function(t,n){for(var r=[],a=0;a<t.length;a++){var o=n.isSame(e(t[a].dt_start),"day");o||(o=n.isSame(e(t[a].dt_end),"day")),o&&r.push(t[a])}return r}}angular.module("app").filter("sameDayAs",e),e.$inject=["moment"]}(),function(){"use strict";function e(e){return function(t,n){if(!n)return t;for(var r=[],a=0;a<t.length;a++){(!t[a].due||t[a].due&&e(t[a].due).isBefore(e().add(n,"days")))&&r.push(t[a])}return r}}angular.module("app").filter("withinDays",e),e.$inject=["moment"]}(),function(){"use strict";function e(e,t){function n(){r(),a(),o(),c()}function r(){b.calendar=new t("calendar"),b.calendar.getByUser().then(function(e){b.calendars=l(e),m()})}function a(){b.event=new t("event"),b.event.getByUser().then(function(e){b.events=l(e),v()})}function o(){b.label=new t("label"),b.label.getByUser().then(function(e){b.labels=l(e),g()})}function c(){b.task=new t("task"),b.task.getByUser().then(function(e){b.tasks=l(e),h()})}function s(){b.calendars=[],b.events=[],b.labels=[],b.tasks=[],m(),v(),g(),h()}function l(e){var t=e.data;return t.success?t.data:t.title}function u(){return{calendars:i(),events:d(),labels:p(),tasks:f()}}function i(){return b.calendars}function d(){return b.events}function p(){return b.labels}function f(){return b.tasks}function m(){e.$broadcast("updateCalendars")}function v(){e.$broadcast("updateEvents")}function g(){e.$broadcast("updateLabels")}function h(){e.$broadcast("updateTasks")}var b=this;return b.calendars=[],b.events=[],b.labels=[],b.tasks=[],{cacheAll:n,cacheCalendars:r,cacheEvents:a,cacheLabels:o,cacheTasks:c,clearCache:s,getAll:u,getCalendars:i,getEvents:d,getLabels:p,getTasks:f}}angular.module("app").service("cacheService",e),e.$inject=["$rootScope","crudService"]}(),function(){"use strict";function e(e,t){function n(e){switch(this.type=e,this.base="api/",e){case"event":case"calendar":this.base+="activity/calendar/";break;case"label":case"task":this.base+="activity/task/";break;default:this.base+=e+"/"}this.base+=e+"Manager.php"}function r(t){return e.get(this.base,{params:{id:t}}).then(i)["catch"](d)}function a(){return e.get(this.base,{params:{byUser:!0}}).then(i)["catch"](d)}function o(t,n){return e.get(this.base,{params:{where:t,bindings:JSON.stringify(n)}}).then(i)["catch"](d)}function c(t){return t=this.removeUnecessaryKeys(t),e.post(this.base,t).then(i)["catch"](d)}function s(t,n){return n=this.removeUnecessaryKeys(n),e.put(this.base,n,{params:{id:t}}).then(i)["catch"](d)}function l(t){return e["delete"](this.base,{params:{id:t}}).then(i)["catch"](d)}function u(t){return e["delete"](this.base+"?usewhere=true&where="+escape(t)).then(i)["catch"](d)}function i(e){return e}function d(e){return t.error(e),{success:"false",title:"Error when querying server.",message:e}}function p(e){for(var t=["id","person_id",this.type+"_id","activity_info_id","parent_name"],n=0;n<t.length;n++)delete e[t[n]];return e}var f=n;return f.prototype={get:r,getByUser:a,getWhere:o,create:c,update:s,remove:l,removeWhere:u,removeUnecessaryKeys:p},f}angular.module("app").factory("crudService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(e,t){function n(t){return e.get(c.base+t).then(a)["catch"](o)}function r(t,n){return e.post(c.base+t,n).then(a)["catch"](o)}function a(e){return e}function o(e){return t.error(e),{success:"false",title:"Error when accessing variable.",message:e}}var c=this;return c.base="api/session/sessionVarManager.php?var=",{getVar:n,setVar:r}}angular.module("app").factory("sessionService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(e,t,n,r){function a(){i(),d(),e.$on("updateCalendars",i),e.$on("updateEvents",d),p.today=t.getToday(),p.selectedDay=p.today,p.month=t.getMonth(p.today)}function o(e,n){p.selectedDay=t.dayClicked(e,n,p.selectedDay,p.calendars)}function c(e){return t.isSameDay(e,p.selectedDay)}function s(e,n){t.showEventModal(e,n,p.calendars)}function l(){p.month=t.lastMonth(p.month)}function u(){p.month=t.nextMonth(p.month)}function i(){p.calendars=n.getCalendars()}function d(){p.events=r.getEvents()}var p=this;p.events=[],p.calendar=[],p.today=null,p.selectedDay=null,p.month=null,p.dayClicked=o,p.isSameDayAsSelected=c,p.showEventModal=s,p.lastMonth=l,p.nextMonth=u,a()}angular.module("app").controller("EventsController",e),e.$inject=["$rootScope","calendarWidgetService","calendarService","eventsService"]}(),function(){"use strict";function e(){return{templateUrl:"modules/events/events.html",controller:"EventsController",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("spEvents",e)}(),function(){"use strict";function e(e,t){function n(e){return l.event.create(e).then(s)}function r(e){return e.event_id?c(e.event_id,e):n(e)}function a(e){return l.event.remove(e).then(s)}function o(){return t.getEvents()}function c(e,t){return l.event.update(e,t).then(s)}function s(e){var n=e.data;return n.success?(t.cacheEvents(),n.data):n.title}var l=this;return l.event=new e("event"),{createEvent:n,createOrUpdateEvent:r,deleteEvent:a,getEvents:o,updateEvent:c}}angular.module("app").factory("eventsService",e),e.$inject=["crudService","cacheService"]}(),function(){"use strict";function e(){function e(e,t,n,r){t[0].focus()}return{restrict:"A",link:e}}angular.module("app").directive("spAutoFocus",e)}(),function(){"use strict";function e(){function e(e,t,n,r){function a(){s()}function o(t){return t===e.otherModel.$viewValue}function c(e,t){r.$validate()}var s=e.$watch("otherModel",c);r.$validators.spCompareTo=o,t.on("$destroy",a)}return{require:"ngModel",scope:{otherModel:"=spCompareTo"},link:e}}angular.module("app").directive("spCompareTo",e)}(),function(){"use strict";function e(e){function t(){e.logout()}t()}angular.module("app").controller("LogoutController",e),e.$inject=["logoutService"]}(),function(){"use strict";function e(e,t,n,r,a){function o(){function o(t){a.clearCache(),e.$broadcast("updateUser"),n.go("login")}function c(e){r.error(e)}return t.post("api/user/logoutManager.php").then(o)["catch"](c)}return{logout:o}}angular.module("app").factory("logoutService",e),e.$inject=["$rootScope","$http","$state","$log","cacheService"]}(),function(){"use strict";function e(e){function t(t){t.hasOwnProperty("dt_start")?(t.all_day=parseInt(t.all_day),t.dt_start=a(e(t.dt_start)),t.dt_end=a(e(t.dt_end))):(t.hasOwnProperty("due")&&t.due&&(t.due=a(e(t.due))),t.hasOwnProperty("reminder")&&t.reminder&&(t.reminder=a(e(t.reminder))))}function n(t){var n=r();return t.hasOwnProperty("dt_start")?(t.dt_start=o(e(t.dt_start,n)),t.dt_end=o(e(t.dt_end,n))):(t.hasOwnProperty("due")&&t.due&&(t.due=o(e(t.due,n))),t.hasOwnProperty("reminder")&&t.reminder&&(t.reminder=o(e(t.reminder,n)))),t}function r(){return"hh:mm a MM-DD-YYYY"}function a(e){return e.format(r())}function o(e){return e.format("YYYY-MM-DD HH:mm:ss")}return{formatForDisplay:t,formatForStorage:n,getDisplayFormat:r,toDisplayFormat:a,toStorageFormat:o}}angular.module("app").factory("formatService",e),e.$inject=["moment"]}(),function(){"use strict";function e(e,t,n,r){function a(){e.dismiss("cancel")}function o(){e.close()}function c(t){e.close(t)}function s(t){e.dismiss(t)}function l(e){r.toggleAllDay(e)}var u=this;u.groups=t,u.item=n,u.cancel=a,u.close=o,u.confirm=c,u.remove=s,u.toggleAllDay=l}angular.module("app").controller("ModalController",e),e.$inject=["$uibModalInstance","groups","item","eventModalService"]}(),function(){"use strict";function e(e){function t(){n.item.recurrence&&e.openRecurrenceModal(n.item)}var n=this;n.showRecurrenceModal=t}angular.module("app").controller("RecurrenceController",e),e.$inject=["recurrenceModalService"]}(),function(){"use strict";function e(){return{templateUrl:"modules/recurrence/recurrence.html",controller:"RecurrenceController",controllerAs:"rc",bindToController:!0,scope:{item:"="}}}angular.module("app").directive("spRepeat",e)}(),function(){"use strict";function e(){function e(e){e.recurrence=!1}function t(e){}return{clearRecurrence:e,constructRecurrence:t}}angular.module("app").factory("recurrenceService",e)}(),function(){"use strict";function e(e,t,n,r){function a(){s(),l(),e.$on("updateLabels",s),e.$on("updateTasks",l)}function o(e){r.openTaskModal(e,u.labels)}function c(e){t.toggleCompleted(e)}function s(){u.labels=n.getLabels()}function l(){u.tasks=t.getTasks()}var u=this;u.labels=[],u.tasks=[],u.showTaskModal=o,u.toggleCompleted=c,a()}angular.module("app").controller("TasksController",e),e.$inject=["$rootScope","tasksService","labelService","taskModalService"]}(),function(){"use strict";function e(){return{templateUrl:"modules/tasks/tasks.html",controller:"TasksController",controllerAs:"vm",bindToController:!0,scope:{order:"=",days:"=withinDays",inLabels:"=inGroups"}}}angular.module("app").directive("spTasks",e)}(),function(){"use strict";function e(e,t){function n(e){return u.task.create(e).then(l)}function r(e){return e.task_id?s(e.task_id,e):n(e)}function a(e){return u.task.remove(e).then(l)}function o(){return t.getTasks()}function c(e){return e.completed=!parseInt(e.completed),s(e.task_id,e).then(o)}function s(e,t){return u.task.update(e,t).then(l)}function l(e){var n=e.data;return n.success?(t.cacheTasks(),n.data):n.title}var u=this;return u.task=new e("task"),{createTask:n,createOrUpdateTask:r,deleteTask:a,getTasks:o,toggleCompleted:c,updateTask:s}}angular.module("app").factory("tasksService",e),e.$inject=["crudService","cacheService"]}(),function(){"use strict";function e(e,t,n){function r(e,t){return n.uploadFile(e).then(function(e){return e})}var a=this;a.uploadFile=r}angular.module("app").controller("UploadController",e),e.$inject=["$scope","$http","uploadService"]}(),function(){"use strict";function e(e){function t(t,n,r){function a(e){t.$apply(function(){var e=n[0].files[0];e.size<=o?t.uc.uploadFile(e).then(function(e){t.spFileChange=e}):alert("File must be less than "+o/1024/1024+"MB.")})}var o=2097152;e(r.spFileChange);n[0].addEventListener("change",a,!1)}return{restrict:"A",controller:"UploadController",controllerAs:"uc",link:t,scope:{spFileChange:"="}}}angular.module("app").directive("spFileChange",e),e.$inject=["$parse"]}(),function(){"use strict";function e(e,t){function n(n){var r=new FormData;return r.append("file",n),e.post("api/upload/uploadManager.php",r,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).then(function(e){return e.data.success?e.data.data:(t.error(e.title),"")})["catch"](function(e){t.error(e)})}return{uploadFile:n}}angular.module("app").factory("uploadService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(e,t,n){function r(){function e(e){return e.data.success!==!1?o.resolve(n.OK):o.reject(n.UNAUTHORIZED),o.promise}return t.getVar("name").then(e)}function a(){function e(e){var t=e.data;return t.success!==!1&&1==t.data?o.resolve(n.OK):o.reject(n.FORBIDDEN),o.promise}return t.getVar("admin").then(e)}var o=e.defer();return{isAuthenticated:r,isAdmin:a}}angular.module("app").factory("accessService",e),e.$inject=["$q","sessionService","statusService"]}(),function(){"use strict";function e(){return{OK:200,UNAUTHORIZED:401,FORBIDDEN:403}}angular.module("app").service("statusService",e)}(),function(){"use strict";function e(e,t,n){function r(){}function a(e){n.openUserModal(e).then(function(e){e&&(o.users=e)})}var o=this;o.users=e,o.showUserModal=a,r()}angular.module("app").controller("AdminController",e),e.$inject=["users","userService","userModalService"]}(),function(){"use strict";function e(e){function t(){n.loading=!0,e.login(n.user).then(function(e){n.loading=!1,n.error=e})}var n=this;n.loading=!1,n.error="",n.login=t}angular.module("app").controller("LoginController",e),e.$inject=["loginService"]}(),function(){"use strict";function e(e,t,n,r,a){function o(o){function c(t){return t.data.success===!1?t.data.title:(a.cacheAll(),e.$broadcast("updateUser"),void n.go("dashboard"))}function s(e){return r.error(e),"Something went wrong. Please try again."}return o.name=o.name.toLowerCase().trim(),t.post("api/user/loginManager.php",o).then(c)["catch"](s)}return{login:o}}angular.module("app").factory("loginService",e),e.$inject=["$rootScope","$http","$state","$log","cacheService"]}(),function(){"use strict";function e(e){function t(){n.loading=!0,e.register(n.user).then(function(e){n.loading=!1,n.error=e})}var n=this;n.error="",n.loading=!1,n.register=t}angular.module("app").controller("RegisterController",e),e.$inject=["registerService"]}(),function(){"use strict";function e(e,t,n){function r(n){function r(n){return"false"===n.success?(t.error(n.title),n.title):void e.url("/login")}return n.name=n.name.toLowerCase().trim(),a.crud.create(n).then(r)}var a=this;return a.crud=new n("user"),{register:r}}angular.module("app").factory("registerService",e),e.$inject=["$location","$log","crudService"]}(),function(){"use strict";function e(e){this.labelId=e.labelId}angular.module("app").controller("LabelPageController",e),e.$inject=["$stateParams"]}(),function(){"use strict";function e(e,t){function n(e){return s.calendar.create(e).then(c)}function r(e){return s.calendar.remove(e).then(c)}function a(){return t.getCalendars()}function o(e,t){return s.calendar.update(e,t).then(c)}function c(e){var n=e.data;return n.success?(t.cacheCalendars(),n.data):n.title}var s=this;return s.calendar=new e("calendar"),{createCalendar:n,deleteCalendar:r,getCalendars:a,updateCalendar:o}}angular.module("app").factory("calendarService",e),e.$inject=["crudService","cacheService"]}(),function(){"use strict";function e(e,t,n,r){function a(t,a){var o={};return angular.extend(o,t),r.formatForDisplay(o),e.open({controller:"ModalController",controllerAs:"vm",templateUrl:"modules/events/modal/event.modal.html",resolve:{groups:function(){return a},item:o}}).result.then(function(e){return r.formatForStorage(e),n.createOrUpdateEvent(e).then(n.getEvents)},function(e){return Number(e)?n.deleteEvent(e).then(n.getEvents):void 0})}function o(e){var n=r.getDisplayFormat();if(e.all_day)e.dt_start=r.toDisplayFormat(t(e.dt_start,n).startOf("day")),e.dt_end=r.toDisplayFormat(t(e.dt_start,n).endOf("day"));else{var a=t().startOf("hour").hour();e.dt_start=r.toDisplayFormat(t(e.dt_start,n).hour(a)),e.dt_end=r.toDisplayFormat(t(e.dt_start,n).hour(a).add(1,"hours"))}}return{openEventModal:a,toggleAllDay:o}}angular.module("app").factory("eventModalService",e),e.$inject=["$uibModal","moment","eventsService","formatService"]}(),function(){"use strict";function e(e,t){function n(e,t,n,r){return c(t.fullDate,n)?(u(e,{dt_start:t.fullDate,dt_end:t.fullDate.clone().endOf("day"),all_day:1},r),n):t.fullDate}function r(e){for(var t=[],n=e.clone().date(1).startOf("week"),r=0;6>r;r++)t.push(o(n,e.month())),n=n.add(1,"weeks");return t}function a(){return e()}function o(t,n){for(var r=[],a=t.clone(),o=0;7>o;o++)r.push({number:a.date(),isTargetMonth:a.month()===n,isToday:a.isSame(e(),"day"),fullDate:a}),a=a.clone().add(1,"days");return r}function c(e,t){return e.isSame(t,"day")}function s(e){return r(e[3][0].fullDate.clone().subtract(1,"months"))}function l(e){return r(e[3][0].fullDate.clone().add(1,"months"))}function u(e,n,r){e.stopPropagation(),t.openEventModal(n,r)}return{dayClicked:n,getMonth:r,getToday:a,getWeek:o,isSameDay:c,lastMonth:s,nextMonth:l,showEventModal:u}}angular.module("app").factory("calendarWidgetService",e),e.$inject=["moment","eventModalService"]}(),function(){"use strict";function e(e,t){function n(n){return e.open({controller:"ModalController",controllerAs:"vm",templateUrl:"modules/recurrence/modal/recurrence.modal.html",resolve:{groups:function(){return r},item:n}}).result.then(function(e){t.constructRecurrence(n)},function(e){t.clearRecurrence(n)})}var r={freq:["hourly","daily","weekly","monthly","yearly"],days:["mo","tu","we","th","fr","sa","su"]};return{openRecurrenceModal:n}}angular.module("app").factory("recurrenceModalService",e),e.$inject=["$uibModal","recurrenceService"]}(),function(){"use strict";function e(e,t){function n(e){return s.label.create(e).then(c)}function r(e){return s.label.remove(e).then(c)}function a(){return t.getLabels()}function o(e,t){return s.label.update(e,t).then(c)}function c(e){var n=e.data;return n.success?(t.cacheLabels(),n.data):n.title}var s=this;return s.label=new e("label"),{createLabel:n,deleteLabel:r,getLabels:a,updateLabel:o}}angular.module("app").factory("labelService",e),e.$inject=["crudService","cacheService"]}(),function(){"use strict";function e(e,t,n){function r(t,r){var a={};angular.extend(a,t),e.open({controller:"ModalController",controllerAs:"vm",templateUrl:"modules/tasks/modal/subtask.modal.html",resolve:{groups:r,item:a}}).result.then(function(e){n.createOrUpdateSubtask(e.subtask,e.task)},function(e){"string"!=typeof e&&n.deleteSubtask(e.subtask,e.task)})}return{openSubtaskModal:r}}angular.module("app").factory("subtaskModalService",e),e.$inject=["$uibModal","labelService","subtasksService"]}(),function(){"use strict";function e(e,t,n){function r(r,a){var o={};return angular.extend(o,r),n.formatForDisplay(o),e.open({controller:"ModalController",controllerAs:"vm",templateUrl:"modules/tasks/modal/task.modal.html",resolve:{groups:function(){return a},item:o}}).result.then(function(e){return e=n.formatForStorage(e),t.createOrUpdateTask(e).then(t.getTasks)},function(e){return Number(e)?t.deleteTask(e).then(t.getTasks):void 0})}return{openTaskModal:r}}angular.module("app").factory("taskModalService",e),e.$inject=["$uibModal","tasksService","formatService"]}(),function(){"use strict";function e(e,t){function n(e){t.openSubtaskModal(e,a.task)}function r(t){e.toggleCompleted(t)}var a=this;a.showSubtaskModal=n,a.toggleCompleted=r}angular.module("app").controller("SubtasksController",e),e.$inject=["subtasksService","subtaskModalService"]}(),function(){"use strict";function e(){return{templateUrl:"modules/tasks/subtasks/subtasks.html",controller:"SubtasksController",controllerAs:"st",bindToController:!0,scope:{task:"="}}}angular.module("app").directive("spSubtasks",e)}(),function(){"use strict";function e(e,t){function n(e,t){t.subtasks||(t.subtasks={currentId:1,list:[]}),void 0===e.id&&(e.id=t.subtasks.currentId++,e.completed=!1,t.subtasks.list.push(e))}function r(e,t){t.subtasks.list.splice(t.subtasks.list.indexOf(e),1)}function a(e){e.completed=!e.completed}return{createOrUpdateSubtask:n,deleteSubtask:r,toggleCompleted:a}}angular.module("app").factory("subtasksService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(e,t){function n(n){var r={};return angular.extend(r,n),e.open({controller:"ModalController",controllerAs:"vm",templateUrl:"pages/admin/modal/user.modal.html",resolve:{groups:{},item:r}}).result.then(function(e){return t.createOrUpdateUser(e).then(t.getUsers)},function(e){return Number(e)?t.deleteUser(e).then(t.getUsers):void 0})}return{openUserModal:n}}angular.module("app").factory("userModalService",e),e.$inject=["$uibModal","userService"]}(),function(){"use strict";function e(e){function t(e){return s.user.create(e).then(c)}function n(e){return e.id?o(e.id,e):t(e)}function r(e){return s.user.remove(e).then(c)}function a(){return s.user.getWhere("",{}).then(c)}function o(e,t){return s.user.update(e,t).then(c)}function c(e){var t=e.data;return t.success?t.data:t.title}var s=this;return s.user=new e("user"),{createUser:t,createOrUpdateUser:n,deleteUser:r,getUsers:a,updateUser:o}}angular.module("app").factory("userService",e),e.$inject=["crudService"]}(),function(){"use strict";function e(e,t,n){function r(){e.$on("updateUser",a)}function a(){n.getUser().then(function(e){o.user=e})}var o=this;o.user=t,r()}angular.module("app").controller("HeaderController",e),e.$inject=["$rootScope","user","headerService"]}(),function(){"use strict";function e(e,t,n){function r(){function e(e){var t=e.data;return t.success===!1?{name:"",avatar:"content/img/user.png"}:t.data}return n.getVar("all").then(e)}return{getUser:r}}angular.module("app").factory("headerService",e),e.$inject=["$http","$log","sessionService"]}(),function(){"use strict";function e(e,t,n,r){function a(){l(),u(),i.collapsed=r.getCollapsed(),e.$on("updateCalendars",l),e.$on("updateLabels",u)}function o(){i.collapsed=r.toggleSidebar()}function c(){i.collapsed=r.toggleCalendars()}function s(){i.collapsed=r.toggleLabels()}function l(){i.calendars=n.getCalendars()}function u(){i.labels=t.getLabels()}var i=this;i.collapsed={},i.labels=[],i.calendars=[],i.toggleSidebar=o,i.toggleCalendars=c,i.toggleLabels=s,a()}angular.module("app").controller("SidebarController",e),e.$inject=["$rootScope","labelService","calendarService","sidebarService"]}(),function(){"use strict";function e(e){function t(){e.innerWidth<600?c.collapsed={sidebar:!0,calendars:!0,labels:!0}:c.collapsed={sidebar:!1,calendars:!1,labels:!1}}function n(){return c.collapsed}function r(){return c.collapsed.sidebar=!c.collapsed.sidebar,c.collapsed.sidebar&&(c.collapsed.calendars=!0,c.collapsed.labels=!0),c.collapsed}function a(){return c.collapsed.calendars=!c.collapsed.calendars,c.collapsed.calendars||(c.collapsed.sidebar=!1),c.collapsed}function o(){return c.collapsed.labels=!c.collapsed.labels,c.collapsed.labels||(c.collapsed.sidebar=!1),c.collapsed}var c=this;return c.collapsed={},t(),{getCollapsed:n,toggleSidebar:r,toggleCalendars:a,toggleLabels:o}}angular.module("app").factory("sidebarService",e),e.$inject=["$window"]}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5taW4uanMiXSwibmFtZXMiOlsiYXBwQ29uZmlnIiwiJHN0YXRlUHJvdmlkZXIiLCIkdXJsUm91dGVyUHJvdmlkZXIiLCJjYWNoZUFsbCIsImNhY2hlU2VydmljZSIsImdldFVzZXIiLCJoZWFkZXJTZXJ2aWNlIiwiZ2V0VXNlcnMiLCJ1c2VyU2VydmljZSIsImlzQXV0aGVudGljYXRlZCIsImFjY2Vzc1NlcnZpY2UiLCJpc0FkbWluIiwic3RhdGUiLCJ1cmwiLCJ0ZW1wbGF0ZVVybCIsImFic3RyYWN0IiwicmVzb2x2ZSIsImNhY2hlIiwidXNlciIsInZpZXdzIiwiaGVhZGVyIiwiY29udHJvbGxlciIsImNvbnRyb2xsZXJBcyIsInNpZGViYXIiLCJwYXJlbnQiLCJjb250ZW50QCIsInVzZXJzIiwib3RoZXJ3aXNlIiwiYW5ndWxhciIsIm1vZHVsZSIsImNvbmZpZyIsIiRpbmplY3QiLCJydW5CbG9jayIsImFwcFNlcnZpY2UiLCJpbml0IiwicnVuIiwiJHJvb3RTY29wZSIsIiRzdGF0ZSIsInN0YXR1c1NlcnZpY2UiLCIkb24iLCJzdGF0ZUNoYW5nZUVycm9yIiwiZXZlbnQiLCJ0b1N0YXRlIiwidG9QYXJhbXMiLCJmcm9tU3RhdGUiLCJmcm9tUGFyYW1zIiwiZXJyb3IiLCJVTkFVVEhPUklaRUQiLCJwcmV2ZW50RGVmYXVsdCIsImdvIiwiZmFjdG9yeSIsImluR3JvdXBzIiwiYWN0aXZpdGllcyIsImdyb3VwcyIsImFjdGl2aXRpZXNJbkdyb3VwcyIsImkiLCJsZW5ndGgiLCJsYWJlbF9pZCIsImNhbGVuZGFyX2lkIiwicHVzaCIsImZpbHRlciIsInNhbWVEYXlBcyIsIm1vbWVudCIsImV2ZW50cyIsImRheSIsInNhbWVEYXlFdmVudHMiLCJyZXN1bHQiLCJpc1NhbWUiLCJkdF9zdGFydCIsImR0X2VuZCIsIndpdGhpbkRheXMiLCJ0YXNrcyIsIm51bU9mRGF5cyIsInRhc2tzV2l0aGluRGF5cyIsImR1ZSIsImlzQmVmb3JlIiwiYWRkIiwiY3J1ZFNlcnZpY2UiLCJjYWNoZUNhbGVuZGFycyIsImNhY2hlRXZlbnRzIiwiY2FjaGVMYWJlbHMiLCJjYWNoZVRhc2tzIiwidm0iLCJjYWxlbmRhciIsImdldEJ5VXNlciIsInRoZW4iLCJyZXNwb25zZSIsImNhbGVuZGFycyIsImdldFJlc3VsdCIsInVwZGF0ZUNhbGVuZGFycyIsInVwZGF0ZUV2ZW50cyIsImxhYmVsIiwibGFiZWxzIiwidXBkYXRlTGFiZWxzIiwidGFzayIsInVwZGF0ZVRhc2tzIiwiY2xlYXJDYWNoZSIsImRhdGEiLCJzdWNjZXNzIiwidGl0bGUiLCJnZXRBbGwiLCJnZXRDYWxlbmRhcnMiLCJnZXRFdmVudHMiLCJnZXRMYWJlbHMiLCJnZXRUYXNrcyIsIiRicm9hZGNhc3QiLCJ0aGlzIiwic2VydmljZSIsIiRodHRwIiwiJGxvZyIsInR5cGUiLCJiYXNlIiwiZ2V0IiwiaWQiLCJwYXJhbXMiLCJwcm9taXNlQ29tcGxldGUiLCJwcm9taXNlRmFpbGVkIiwiYnlVc2VyIiwiZ2V0V2hlcmUiLCJ3aGVyZSIsImJpbmRpbmdzIiwiSlNPTiIsInN0cmluZ2lmeSIsImNyZWF0ZSIsInJlbW92ZVVuZWNlc3NhcnlLZXlzIiwicG9zdCIsInVwZGF0ZSIsInB1dCIsInJlbW92ZSIsInJlbW92ZVdoZXJlIiwiZXNjYXBlIiwibWVzc2FnZSIsInRvRGVsZXRlIiwiY3J1ZCIsInByb3RvdHlwZSIsInNlc3Npb25TZXJ2aWNlIiwiZ2V0VmFyIiwiJG5hbWUiLCJzZXRWYXIiLCIkdmFsdWUiLCJFdmVudHNDb250cm9sbGVyIiwiY2FsZW5kYXJXaWRnZXRTZXJ2aWNlIiwiY2FsZW5kYXJTZXJ2aWNlIiwiZXZlbnRzU2VydmljZSIsImFjdGl2YXRlIiwidG9kYXkiLCJnZXRUb2RheSIsInNlbGVjdGVkRGF5IiwibW9udGgiLCJnZXRNb250aCIsImRheUNsaWNrZWQiLCJjbGlja0V2ZW50IiwiaXNTYW1lRGF5QXNTZWxlY3RlZCIsImlzU2FtZURheSIsInNob3dFdmVudE1vZGFsIiwibGFzdE1vbnRoIiwibmV4dE1vbnRoIiwiZXZlbnRzRGlyZWN0aXZlIiwiYmluZFRvQ29udHJvbGxlciIsImRpcmVjdGl2ZSIsImNyZWF0ZUV2ZW50IiwiY3JlYXRlT3JVcGRhdGVFdmVudCIsImV2ZW50X2lkIiwidXBkYXRlRXZlbnQiLCJkZWxldGVFdmVudCIsInJlcyIsImF1dG9Gb2N1c0RpcmVjdGl2ZSIsImxpbmsiLCJzY29wZSIsImVsZW1lbnQiLCJhdHRycyIsIm5nTW9kZWwiLCJmb2N1cyIsInJlc3RyaWN0IiwiY29tcGFyZVRvRGlyZWN0aXZlIiwiY2xlYW5VcCIsInVuYmluZFdhdGNoIiwiY29tcGFyZVZhbHVlcyIsInZpZXdWYWx1ZSIsIm90aGVyTW9kZWwiLCIkdmlld1ZhbHVlIiwidmFsaWRhdGVPbkNoYW5nZSIsIm5ld1ZhbHVlIiwib2xkVmFsdWUiLCIkdmFsaWRhdGUiLCIkd2F0Y2giLCIkdmFsaWRhdG9ycyIsInNwQ29tcGFyZVRvIiwib24iLCJyZXF1aXJlIiwiTG9nb3V0Q29udHJvbGxlciIsImxvZ291dFNlcnZpY2UiLCJsb2dvdXQiLCJsb2dvdXRDb21wbGV0ZSIsImxvZ291dEZhaWxlZCIsImZvcm1hdFNlcnZpY2UiLCJmb3JtYXRGb3JEaXNwbGF5IiwiYWN0aXZpdHkiLCJoYXNPd25Qcm9wZXJ0eSIsImFsbF9kYXkiLCJwYXJzZUludCIsInRvRGlzcGxheUZvcm1hdCIsInJlbWluZGVyIiwiZm9ybWF0Rm9yU3RvcmFnZSIsImRpc3BsYXlGb3JtYXQiLCJnZXREaXNwbGF5Rm9ybWF0IiwidG9TdG9yYWdlRm9ybWF0IiwiZm9ybWF0IiwiTW9kYWxDb250cm9sbGVyIiwiJHVpYk1vZGFsSW5zdGFuY2UiLCJpdGVtIiwiZXZlbnRNb2RhbFNlcnZpY2UiLCJjYW5jZWwiLCJkaXNtaXNzIiwiY2xvc2UiLCJjb25maXJtIiwidG9nZ2xlQWxsRGF5IiwiUmVjdXJyZW5jZUNvbnRyb2xsZXIiLCJyZWN1cnJlbmNlTW9kYWxTZXJ2aWNlIiwic2hvd1JlY3VycmVuY2VNb2RhbCIsInJjIiwicmVjdXJyZW5jZSIsIm9wZW5SZWN1cnJlbmNlTW9kYWwiLCJyZWN1cnJlbmNlRGlyZWN0aXZlIiwicmVjdXJyZW5jZVNlcnZpY2UiLCJjbGVhclJlY3VycmVuY2UiLCJjb25zdHJ1Y3RSZWN1cnJlbmNlIiwiVGFza3NDb250cm9sbGVyIiwidGFza3NTZXJ2aWNlIiwibGFiZWxTZXJ2aWNlIiwidGFza01vZGFsU2VydmljZSIsInNob3dUYXNrTW9kYWwiLCJvcGVuVGFza01vZGFsIiwidG9nZ2xlQ29tcGxldGVkIiwidGFza3NEaXJlY3RpdmUiLCJvcmRlciIsImRheXMiLCJpbkxhYmVscyIsImNyZWF0ZVRhc2siLCJjcmVhdGVPclVwZGF0ZVRhc2siLCJ0YXNrX2lkIiwidXBkYXRlVGFzayIsImRlbGV0ZVRhc2siLCJjb21wbGV0ZWQiLCJVcGxvYWRDb250cm9sbGVyIiwiJHNjb3BlIiwidXBsb2FkU2VydmljZSIsInVwbG9hZEZpbGUiLCJmaWxlIiwib2xkRmlsZSIsImZpbGVQYXRoIiwidWMiLCJ1cGxvYWREaXJlY3RpdmUiLCIkcGFyc2UiLCJmaWxlSGFuZGxlciIsIiRhcHBseSIsImZpbGVzIiwic2l6ZSIsIm1heEZpbGVTaXplIiwic3BGaWxlQ2hhbmdlIiwiYWxlcnQiLCJhZGRFdmVudExpc3RlbmVyIiwiZm9ybURhdGEiLCJGb3JtRGF0YSIsImFwcGVuZCIsInRyYW5zZm9ybVJlcXVlc3QiLCJpZGVudGl0eSIsImhlYWRlcnMiLCJDb250ZW50LVR5cGUiLCJ1bmRlZmluZWQiLCIkcSIsImlzQXV0aGVudGljYXRlZENvbXBsZXRlIiwiZGVmZXJyZWQiLCJPSyIsInJlamVjdCIsInByb21pc2UiLCJpc0FkbWluQ29tcGxldGUiLCJGT1JCSURERU4iLCJkZWZlciIsIkFkbWluQ29udHJvbGxlciIsInVzZXJNb2RhbFNlcnZpY2UiLCJzaG93VXNlck1vZGFsIiwib3BlblVzZXJNb2RhbCIsIkxvZ2luQ29udHJvbGxlciIsImxvZ2luU2VydmljZSIsImxvZ2luIiwibG9hZGluZyIsImxvZ2luQ29tcGxldGUiLCJsb2dpbkZhaWxlZCIsIm5hbWUiLCJ0b0xvd2VyQ2FzZSIsInRyaW0iLCJSZWdpc3RlckNvbnRyb2xsZXIiLCJyZWdpc3RlclNlcnZpY2UiLCJyZWdpc3RlciIsIiRsb2NhdGlvbiIsInJlZ2lzdHJhdGlvbkNvbXBsZXRlIiwiTGFiZWxQYWdlQ29udHJvbGxlciIsIiRzdGF0ZVBhcmFtcyIsImxhYmVsSWQiLCJjcmVhdGVDYWxlbmRhciIsImRlbGV0ZUNhbGVuZGFyIiwidXBkYXRlQ2FsZW5kYXIiLCIkdWliTW9kYWwiLCJvcGVuRXZlbnRNb2RhbCIsImNsb25lZEV2ZW50IiwiZXh0ZW5kIiwib3BlbiIsIk51bWJlciIsImRpc3BsYXkiLCJzdGFydE9mIiwiZW5kT2YiLCJjdXJyZW50SG91ciIsImhvdXIiLCJmdWxsRGF0ZSIsImNsb25lIiwiYURheSIsImRhdGUiLCJnZXRXZWVrIiwic3RhcnREYXkiLCJ0YXJnZXRNb250aCIsIndlZWsiLCJudW1iZXIiLCJpc1RhcmdldE1vbnRoIiwiaXNUb2RheSIsImRheTEiLCJkYXkyIiwic3JjTW9udGgiLCJzdWJ0cmFjdCIsInN0b3BQcm9wYWdhdGlvbiIsInJlY3VycmVuY2VJbmZvIiwiZnJlcSIsImNyZWF0ZUxhYmVsIiwiZGVsZXRlTGFiZWwiLCJ1cGRhdGVMYWJlbCIsInN1YnRhc2tNb2RhbFNlcnZpY2UiLCJzdWJ0YXNrc1NlcnZpY2UiLCJvcGVuU3VidGFza01vZGFsIiwic3VidGFzayIsImNsb25lZFN1YnRhc2siLCJjcmVhdGVPclVwZGF0ZVN1YnRhc2siLCJkZWxldGVTdWJ0YXNrIiwiY2xvbmVkVGFzayIsIlN1YnRhc2tzQ29udHJvbGxlciIsInNob3dTdWJ0YXNrTW9kYWwiLCJzdCIsInN1YnRhc2tzRGlyZWN0aXZlIiwic3VidGFza3MiLCJjdXJyZW50SWQiLCJsaXN0Iiwic3BsaWNlIiwiaW5kZXhPZiIsImNsb25lZFVzZXIiLCJjcmVhdGVPclVwZGF0ZVVzZXIiLCJkZWxldGVVc2VyIiwiY3JlYXRlVXNlciIsInVwZGF0ZVVzZXIiLCJIZWFkZXJDb250cm9sbGVyIiwiZ2V0TmFtZUNvbXBsZXRlIiwiYXZhdGFyIiwiU2lkZWJhckNvbnRyb2xsZXIiLCJzaWRlYmFyU2VydmljZSIsImNvbGxhcHNlZCIsImdldENvbGxhcHNlZCIsInRvZ2dsZVNpZGViYXIiLCJ0b2dnbGVDYWxlbmRhcnMiLCJ0b2dnbGVMYWJlbHMiLCIkd2luZG93IiwiaW5uZXJXaWR0aCJdLCJtYXBwaW5ncyI6IkNBQUEsV0FDQyxZQU9BLFNBQVNBLEdBQVVDLEVBQWdCQyxHQW9KbEMsUUFBU0MsR0FBU0MsR0FDakIsTUFBT0EsR0FBYUQsV0FHckIsUUFBU0UsR0FBUUMsR0FDaEIsTUFBT0EsR0FBY0QsVUFHdEIsUUFBU0UsR0FBU0MsR0FDakIsTUFBT0EsR0FBWUQsV0FHcEIsUUFBU0UsR0FBZ0JDLEdBQ3hCLE1BQU9BLEdBQWNELGtCQUd0QixRQUFTRSxHQUFRRCxHQUNoQixNQUFPQSxHQUFjQyxVQW5LdEJWLEVBQ0VXLE1BQU0sUUFDTkMsSUFBSyxHQUNMQyxZQUFhLGFBQ2JDLFlBQVUsRUFDVkMsU0FDQ0MsT0FBUSxlQUFnQmQsR0FDeEJlLE1BQU8sZ0JBQWlCYixJQUV6QmMsT0FDQ0MsUUFDQ04sWUFBYSxrQ0FDYk8sV0FBWSxtQkFDWkMsYUFBYyxNQUVmQyxTQUNDVCxZQUFhLG9DQUNiTyxXQUFZLG9CQUNaQyxhQUFjLFNBSWhCVixNQUFNLFNBQ05DLElBQUssU0FDTFcsT0FBUSxPQUNSTCxPQUNDTSxZQUNDWCxZQUFhLHlCQUNiTyxXQUFZLGtCQUNaQyxhQUFjLFNBSWhCVixNQUFNLFVBQ05DLElBQUssVUFDTFcsT0FBUSxPQUNSTCxPQUNDTSxZQUNDSixXQUFZLG1CQUNaQyxhQUFjLFNBSWhCVixNQUFNLFlBQ05DLElBQUssWUFDTFcsT0FBUSxPQUNSTCxPQUNDTSxZQUNDWCxZQUFhLCtCQUNiTyxXQUFZLHFCQUNaQyxhQUFjLFNBSWhCVixNQUFNLFNBQ05DLElBQUssU0FDTFcsT0FBUSxPQUNSTCxPQUNDTSxZQUNDWCxZQUFhLHlCQUNiTyxXQUFZLGtCQUNaQyxh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R3dSLFVBQVU5USxRQUFTLEdBRWhCVixFQUFHd1IsVUFHWCxRQUFTRyxLQUtSLE1BSkEzUixHQUFHd1IsVUFBVW5SLFdBQWFMLEVBQUd3UixVQUFVblIsVUFDbENMLEVBQUd3UixVQUFVblIsWUFDakJMLEVBQUd3UixVQUFVblYsU0FBVSxHQUVqQjJELEVBQUd3UixVQUdYLFFBQVNJLEtBS1IsTUFKQTVSLEdBQUd3UixVQUFVOVEsUUFBVVYsRUFBR3dSLFVBQVU5USxPQUMvQlYsRUFBR3dSLFVBQVU5USxTQUNqQlYsRUFBR3dSLFVBQVVuVixTQUFVLEdBRWpCMkQsRUFBR3dSLFVBdERYLEdBQUl4UixHQUFLd0IsSUFLVCxPQUpBeEIsR0FBR3dSLGFBRUgxTixLQUdDMk4sYUFBY0EsRUFDZEMsY0FBZUEsRUFDZkMsZ0JBQWlCQSxFQUNqQkMsYUFBY0EsR0FmaEJsVixRQUNFQyxPQUFPLE9BQ1BxQixRQUFRLGlCQUFrQnVULEdBRTVCQSxFQUFlMVUsU0FBVyIsImZpbGUiOiJhcHAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJywgWyd1aS5yb3V0ZXInLCAndWkuYm9vdHN0cmFwJywgJ2FuZ3VsYXJNb21lbnQnXSlcclxuXHRcdC5jb25maWcoYXBwQ29uZmlnKTtcclxuXHJcblx0YXBwQ29uZmlnLiRpbmplY3QgPSBbJyRzdGF0ZVByb3ZpZGVyJywgJyR1cmxSb3V0ZXJQcm92aWRlciddO1xyXG5cdGZ1bmN0aW9uIGFwcENvbmZpZygkc3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyKSB7XHJcblxyXG5cdFx0JHN0YXRlUHJvdmlkZXJcclxuXHRcdFx0LnN0YXRlKCdyb290Jywge1xyXG5cdFx0XHRcdHVybDogJycsXHJcblx0XHRcdFx0dGVtcGxhdGVVcmw6ICdpbmRleC5odG1sJyxcclxuXHRcdFx0XHRhYnN0cmFjdDogdHJ1ZSxcclxuXHRcdFx0XHRyZXNvbHZlOiB7XHJcblx0XHRcdFx0XHRjYWNoZTogWydjYWNoZVNlcnZpY2UnLCBjYWNoZUFsbF0sXHJcblx0XHRcdFx0XHR1c2VyOiBbJ2hlYWRlclNlcnZpY2UnLCBnZXRVc2VyXVxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0dmlld3M6IHtcclxuXHRcdFx0XHRcdCdoZWFkZXInOiB7XHJcblx0XHRcdFx0XHRcdHRlbXBsYXRlVXJsOiAncGFnZXMvbGF5b3V0L2hlYWRlci9oZWFkZXIuaHRtbCcsXHJcblx0XHRcdFx0XHRcdGNvbnRyb2xsZXI6ICdIZWFkZXJDb250cm9sbGVyJyxcclxuXHRcdFx0XHRcdFx0Y29udHJvbGxlckFzOiAnaGMnXHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0J3NpZGViYXInOiB7XHJcblx0XHRcdFx0XHRcdHRlbXBsYXRlVXJsOiAncGFnZXMvbGF5b3V0L3NpZGViYXIvc2lkZWJhci5odG1sJyxcclxuXHRcdFx0XHRcdFx0Y29udHJvbGxlcjogJ1NpZGViYXJDb250cm9sbGVyJyxcclxuXHRcdFx0XHRcdFx0Y29udHJvbGxlckFzOiAnc2MnXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KVxyXG5cdFx0XHQuc3RhdGUoJ2xvZ2luJywge1xyXG5cdFx0XHRcdHVybDogJy9sb2dpbicsXHJcblx0XHRcdFx0cGFyZW50OiAncm9vdCcsXHJcblx0XHRcdFx0dmlld3M6IHtcclxuXHRcdFx0XHRcdCdjb250ZW50QCc6IHtcclxuXHRcdFx0XHRcdFx0dGVtcGxhdGVVcmw6ICdwYWdlcy9sb2dpbi9sb2dpbi5odG1sJyxcclxuXHRcdFx0XHRcdFx0Y29udHJvbGxlcjogJ0xvZ2luQ29udHJvbGxlcicsXHJcblx0XHRcdFx0XHRcdGNvbnRyb2xsZXJBczogJ3ZtJ1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSlcclxuXHRcdFx0LnN0YXRlKCdsb2dvdXQnLCB7XHJcblx0XHRcdFx0dXJsOiAnL2xvZ291dCcsXHJcblx0XHRcdFx0cGFyZW50OiAncm9vdCcsXHJcblx0XHRcdFx0dmlld3M6IHtcclxuXHRcdFx0XHRcdCdjb250ZW50QCc6IHtcclxuXHRcdFx0XHRcdFx0Y29udHJvbGxlcjogJ0xvZ291dENvbnRyb2xsZXInLFxyXG5cdFx0XHRcdFx0XHRjb250cm9sbGVyQXM6ICd2bSdcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pXHJcblx0XHRcdC5zdGF0ZSgncmVnaXN0ZXInLCB7XHJcblx0XHRcdFx0dXJsOiAnL3JlZ2lzdGVyJyxcclxuXHRcdFx0XHRwYXJlbnQ6ICdyb290JyxcclxuXHRcdFx0XHR2aWV3czoge1xyXG5cdFx0XHRcdFx0J2NvbnRlbnRAJzoge1xyXG5cdFx0XHRcdFx0XHR0ZW1wbGF0ZVVybDogJ3BhZ2VzL3JlZ2lzdGVyL3JlZ2lzdGVyLmh0bWwnLFxyXG5cdFx0XHRcdFx0XHRjb250cm9sbGVyOiAnUmVnaXN0ZXJDb250cm9sbGVyJyxcclxuXHRcdFx0XHRcdFx0Y29udHJvbGxlckFzOiAndm0nXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KVxyXG5cdFx0XHQuc3RhdGUoJ2FkbWluJywge1xyXG5cdFx0XHRcdHVybDogJy9hZG1pbicsXHJcblx0XHRcdFx0cGFyZW50OiAncm9vdCcsXHJcblx0XHRcdFx0dmlld3M6IHtcclxuXHRcdFx0XHRcdCdjb250ZW50QCc6IHtcclxuXHRcdFx0XHRcdFx0dGVtcGxhdGVVcmw6ICdwYWdlcy9hZG1pbi9hZG1pbi5odG1sJyxcclxuXHRcdFx0XHRcdFx0Y29udHJvbGxlcjogJ0FkbWluQ29udHJvbGxlcicsXHJcblx0XHRcdFx0XHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcclxuXHRcdFx0XHRcdFx0cmVzb2x2ZToge1xyXG5cdFx0XHRcdFx0XHRcdGlzQWRtaW46IFsnYWNjZXNzU2VydmljZScsIGlzQWRtaW5dLFxyXG5cdFx0XHRcdFx0XHRcdHVzZXJzOiBbJ3VzZXJTZXJ2aWNlJywgZ2V0VXNlcnNdXHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pXHJcblx0XHRcdC5zdGF0ZSgnZGFzaGJvYXJkJywge1xyXG5cdFx0XHRcdHVybDogJy9kYXNoYm9hcmQnLFxyXG5cdFx0XHRcdHBhcmVudDogJ3Jvb3QnLFxyXG5cdFx0XHRcdHZpZXdzOiB7XHJcblx0XHRcdFx0XHQnY29udGVudEAnOiB7XHJcblx0XHRcdFx0XHRcdHRlbXBsYXRlVXJsOiAncGFnZXMvZGFzaGJvYXJkL2Rhc2hib2FyZC5odG1sJyxcclxuXHRcdFx0XHRcdFx0cmVzb2x2ZToge1xyXG5cdFx0XHRcdFx0XHRcdGlzQXV0aGVudGljYXRlZDogWydhY2Nlc3NTZXJ2aWNlJywgaXNBdXRoZW50aWNhdGVkXVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KVxyXG5cdFx0XHQuc3RhdGUoJ2xhYmVscycsIHtcclxuXHRcdFx0XHR1cmw6ICcvbGFiZWxzJyxcclxuXHRcdFx0XHRwYXJlbnQ6ICdyb290J1xyXG5cdFx0XHR9KVxyXG5cdFx0XHQuc3RhdGUoJ2xhYmVscy5sYWJlbCcsIHtcclxuXHRcdFx0XHR1cmw6ICcvOmxhYmVsSWQnLFxyXG5cdFx0XHRcdHZpZXdzOiB7XHJcblx0XHRcdFx0XHQnY29udGVudEAnOiB7XHJcblx0XHRcdFx0XHRcdHRlbXBsYXRlVXJsOiBcInBhZ2VzL3Rhc2tzL2xhYmVsLmh0bWxcIixcclxuXHRcdFx0XHRcdFx0Y29udHJvbGxlcjogJ0xhYmVsUGFnZUNvbnRyb2xsZXInLFxyXG5cdFx0XHRcdFx0XHRjb250cm9sbGVyQXM6ICd2bSdcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pXHJcblx0XHRcdC5zdGF0ZSgnaW5ib3gnLCB7XHJcblx0XHRcdFx0dXJsOiAnL2luYm94JyxcclxuXHRcdFx0XHRwYXJlbnQ6ICdyb290JyxcclxuXHRcdFx0XHR2aWV3czoge1xyXG5cdFx0XHRcdFx0J2NvbnRlbnRAJzoge1xyXG5cdFx0XHRcdFx0XHR0ZW1wbGF0ZVVybDogJ3BhZ2VzL3Rhc2tzL2luYm94Lmh0bWwnLFxyXG5cdFx0XHRcdFx0XHRyZXNvbHZlOiB7XHJcblx0XHRcdFx0XHRcdFx0aXNBdXRoZW50aWNhdGVkOiBbJ2FjY2Vzc1NlcnZpY2UnLCBpc0F1dGhlbnRpY2F0ZWRdXHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pXHJcblx0XHRcdC5zdGF0ZSgndG9kYXknLCB7XHJcblx0XHRcdFx0dXJsOiAnL3RvZGF5JyxcclxuXHRcdFx0XHRwYXJlbnQ6ICdyb290JyxcclxuXHRcdFx0XHR2aWV3czoge1xyXG5cdFx0XHRcdFx0J2NvbnRlbnRAJzoge1xyXG5cdFx0XHRcdFx0XHR0ZW1wbGF0ZVVybDogJ3BhZ2VzL3Rhc2tzL3RvZGF5Lmh0bWwnLFxyXG5cdFx0XHRcdFx0XHRyZXNvbHZlOiB7XHJcblx0XHRcdFx0XHRcdFx0aXNBdXRoZW50aWNhdGVkOiBbJ2FjY2Vzc1NlcnZpY2UnLCBpc0F1dGhlbnRpY2F0ZWRdXHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pXHJcblx0XHRcdC5zdGF0ZSgnd2VlaycsIHtcclxuXHRcdFx0XHR1cmw6ICcvd2VlaycsXHJcblx0XHRcdFx0cGFyZW50OiAncm9vdCcsXHJcblx0XHRcdFx0dmlld3M6IHtcclxuXHRcdFx0XHRcdCdjb250ZW50QCc6IHtcclxuXHRcdFx0XHRcdFx0dGVtcGxhdGVVcmw6ICdwYWdlcy90YXNrcy93ZWVrLmh0bWwnLFxyXG5cdFx0XHRcdFx0XHRyZXNvbHZlOiB7XHJcblx0XHRcdFx0XHRcdFx0aXNBdXRoZW50aWNhdGVkOiBbJ2FjY2Vzc1NlcnZpY2UnLCBpc0F1dGhlbnRpY2F0ZWRdXHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pXHJcblx0XHRcdC5zdGF0ZSgnY2FsZW5kYXInLCB7XHJcblx0XHRcdFx0dXJsOiAnL2NhbGVuZGFyJyxcclxuXHRcdFx0XHRwYXJlbnQ6ICdyb290JyxcclxuXHRcdFx0XHR2aWV3czoge1xyXG5cdFx0XHRcdFx0J2NvbnRlbnRAJzoge1xyXG5cdFx0XHRcdFx0XHR0ZW1wbGF0ZVVybDogJ3BhZ2VzL2NhbGVuZGFyL2NhbGVuZGFyLmh0bWwnLFxyXG5cdFx0XHRcdFx0XHRyZXNvbHZlOiB7XHJcblx0XHRcdFx0XHRcdFx0aXNBdXRoZW50aWNhdGVkOiBbJ2FjY2Vzc1NlcnZpY2UnLCBpc0F1dGhlbnRpY2F0ZWRdXHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdCR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy9kYXNoYm9hcmQnKTtcclxuXHJcblx0XHRmdW5jdGlvbiBjYWNoZUFsbChjYWNoZVNlcnZpY2UpIHtcclxuXHRcdFx0cmV0dXJuIGNhY2hlU2VydmljZS5jYWNoZUFsbCgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGdldFVzZXIoaGVhZGVyU2VydmljZSkge1xyXG5cdFx0XHRyZXR1cm4gaGVhZGVyU2VydmljZS5nZXRVc2VyKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gZ2V0VXNlcnModXNlclNlcnZpY2UpIHtcclxuXHRcdFx0cmV0dXJuIHVzZXJTZXJ2aWNlLmdldFVzZXJzKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gaXNBdXRoZW50aWNhdGVkKGFjY2Vzc1NlcnZpY2UpIHtcclxuXHRcdFx0cmV0dXJuIGFjY2Vzc1NlcnZpY2UuaXNBdXRoZW50aWNhdGVkKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gaXNBZG1pbihhY2Nlc3NTZXJ2aWNlKSB7XHJcblx0XHRcdHJldHVybiBhY2Nlc3NTZXJ2aWNlLmlzQWRtaW4oKTtcclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LnJ1bihydW5CbG9jayk7XHJcblxyXG5cdHJ1bkJsb2NrLiRpbmplY3QgPSBbJ2FwcFNlcnZpY2UnXTtcclxuXHRmdW5jdGlvbiBydW5CbG9jayhhcHBTZXJ2aWNlKSB7XHJcblx0XHRhcHBTZXJ2aWNlLmluaXQoKTtcclxuXHR9XHJcbn0pKCk7XG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmZhY3RvcnkoJ2FwcFNlcnZpY2UnLCBhcHBTZXJ2aWNlKTtcclxuXHJcblx0YXBwU2VydmljZS4kaW5qZWN0ID0gWyckcm9vdFNjb3BlJywgJyRzdGF0ZScsICdzdGF0dXNTZXJ2aWNlJ107XHJcblx0ZnVuY3Rpb24gYXBwU2VydmljZSgkcm9vdFNjb3BlLCAkc3RhdGUsIHN0YXR1c1NlcnZpY2UpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGluaXQ6IGluaXRcclxuXHRcdH07XHJcblxyXG5cdFx0ZnVuY3Rpb24gaW5pdCgpIHtcclxuXHRcdFx0JHJvb3RTY29wZS4kb24oJyRzdGF0ZUNoYW5nZUVycm9yJywgc3RhdGVDaGFuZ2VFcnJvcik7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gc3RhdGVDaGFuZ2VFcnJvcihldmVudCwgdG9TdGF0ZSwgdG9QYXJhbXMsIGZyb21TdGF0ZSwgZnJvbVBhcmFtcywgZXJyb3IpIHtcclxuXHRcdFx0aWYgKGVycm9yID09PSBzdGF0dXNTZXJ2aWNlLlVOQVVUSE9SSVpFRCkge1xyXG5cdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdFx0JHN0YXRlLmdvKCdsb2dpbicpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59KSgpO1xyXG5cbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuZmlsdGVyKCdpbkdyb3VwcycsIGluR3JvdXBzKTtcclxuXHJcblx0aW5Hcm91cHMuJGluamVjdCA9IFtdO1xyXG5cdGZ1bmN0aW9uIGluR3JvdXBzKCkge1xyXG5cdFx0cmV0dXJuIGZ1bmN0aW9uKGFjdGl2aXRpZXMsIGdyb3Vwcykge1xyXG5cdFx0XHRpZiAoIWdyb3Vwcykge1xyXG5cdFx0XHRcdHJldHVybiBhY3Rpdml0aWVzO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2YXIgYWN0aXZpdGllc0luR3JvdXBzID0gW107XHJcblxyXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFjdGl2aXRpZXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0XHRpZiAoYWN0aXZpdGllc1tpXS5sYWJlbF9pZCA9PT0gZ3JvdXBzIHx8XHJcblx0XHRcdFx0XHRhY3Rpdml0aWVzW2ldLmNhbGVuZGFyX2lkID09PSBncm91cHNcclxuXHRcdFx0XHQpIHtcclxuXHRcdFx0XHRcdGFjdGl2aXRpZXNJbkdyb3Vwcy5wdXNoKGFjdGl2aXRpZXNbaV0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGFjdGl2aXRpZXNJbkdyb3VwcztcclxuXHRcdH07XHJcblx0fVxyXG59KSgpO1xuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5maWx0ZXIoJ3NhbWVEYXlBcycsIHNhbWVEYXlBcyk7XHJcblxyXG5cdHNhbWVEYXlBcy4kaW5qZWN0ID0gWydtb21lbnQnXTtcclxuXHRmdW5jdGlvbiBzYW1lRGF5QXMobW9tZW50KSB7XHJcblx0XHRyZXR1cm4gZnVuY3Rpb24oZXZlbnRzLCBkYXkpIHtcclxuXHRcdFx0dmFyIHNhbWVEYXlFdmVudHMgPSBbXTtcclxuXHJcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0dmFyIHJlc3VsdCA9IGRheS5pc1NhbWUobW9tZW50KGV2ZW50c1tpXS5kdF9zdGFydCksICdkYXknKTtcclxuXHJcblx0XHRcdFx0aWYgKCFyZXN1bHQpIHtcclxuXHRcdFx0XHRcdHJlc3VsdCA9IGRheS5pc1NhbWUobW9tZW50KGV2ZW50c1tpXS5kdF9lbmQpLCAnZGF5Jyk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZihyZXN1bHQpIHtcclxuXHRcdFx0XHRcdHNhbWVEYXlFdmVudHMucHVzaChldmVudHNbaV0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIHNhbWVEYXlFdmVudHM7XHJcblx0XHR9O1xyXG5cdH1cclxufSkoKTtcbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuZmlsdGVyKCd3aXRoaW5EYXlzJywgd2l0aGluRGF5cyk7XHJcblxyXG5cdHdpdGhpbkRheXMuJGluamVjdCA9IFsnbW9tZW50J107XHJcblx0ZnVuY3Rpb24gd2l0aGluRGF5cyhtb21lbnQpIHtcclxuXHRcdHJldHVybiBmdW5jdGlvbih0YXNrcywgbnVtT2ZEYXlzKSB7XHJcblx0XHRcdGlmICghbnVtT2ZEYXlzKSB7XHJcblx0XHRcdFx0cmV0dXJuIHRhc2tzO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2YXIgdGFza3NXaXRoaW5EYXlzID0gW107XHJcblxyXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRhc2tzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0dmFyIHJlc3VsdDtcclxuXHJcblx0XHRcdFx0aWYgKCF0YXNrc1tpXS5kdWUgfHwgKHRhc2tzW2ldLmR1ZSAmJlxyXG5cdFx0XHRcdFx0bW9tZW50KHRhc2tzW2ldLmR1ZSkuaXNCZWZvcmUobW9tZW50KCkuYWRkKG51bU9mRGF5cywgJ2RheXMnKSkpXHJcblx0XHRcdFx0KSB7XHJcblx0XHRcdFx0XHR0YXNrc1dpdGhpbkRheXMucHVzaCh0YXNrc1tpXSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gdGFza3NXaXRoaW5EYXlzO1xyXG5cdFx0fTtcclxuXHR9XHJcbn0pKCk7XG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LnNlcnZpY2UoJ2NhY2hlU2VydmljZScsIGNhY2hlU2VydmljZSk7XHJcblxyXG5cdGNhY2hlU2VydmljZS4kaW5qZWN0ID0gWyckcm9vdFNjb3BlJywgJ2NydWRTZXJ2aWNlJ107XHJcblx0ZnVuY3Rpb24gY2FjaGVTZXJ2aWNlKCRyb290U2NvcGUsIGNydWRTZXJ2aWNlKSB7XHJcblx0XHR2YXIgdm0gPSB0aGlzOyAvLyBqc2hpbnQgaWdub3JlOiBsaW5lXHJcblx0XHR2bS5jYWxlbmRhcnMgPSBbXTtcclxuXHRcdHZtLmV2ZW50cyA9IFtdO1xyXG5cdFx0dm0ubGFiZWxzID0gW107XHJcblx0XHR2bS50YXNrcyA9IFtdO1xyXG5cclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGNhY2hlQWxsOiBjYWNoZUFsbCxcclxuXHRcdFx0Y2FjaGVDYWxlbmRhcnM6IGNhY2hlQ2FsZW5kYXJzLFxyXG5cdFx0XHRjYWNoZUV2ZW50czogY2FjaGVFdmVudHMsXHJcblx0XHRcdGNhY2hlTGFiZWxzOiBjYWNoZUxhYmVscyxcclxuXHRcdFx0Y2FjaGVUYXNrczogY2FjaGVUYXNrcyxcclxuXHRcdFx0Y2xlYXJDYWNoZTogY2xlYXJDYWNoZSxcclxuXHJcblx0XHRcdGdldEFsbDogZ2V0QWxsLFxyXG5cdFx0XHRnZXRDYWxlbmRhcnM6IGdldENhbGVuZGFycyxcclxuXHRcdFx0Z2V0RXZlbnRzOiBnZXRFdmVudHMsXHJcblx0XHRcdGdldExhYmVsczogZ2V0TGFiZWxzLFxyXG5cdFx0XHRnZXRUYXNrczogZ2V0VGFza3NcclxuXHRcdH07XHJcblxyXG5cdFx0Ly8gVE9ETzogSWRlYWxseSBvbmUgQVBJIGNhbGwuXHJcblx0XHRmdW5jdGlvbiBjYWNoZUFsbCgpIHtcclxuXHRcdFx0Y2FjaGVDYWxlbmRhcnMoKTtcclxuXHRcdFx0Y2FjaGVFdmVudHMoKTtcclxuXHRcdFx0Y2FjaGVMYWJlbHMoKTtcclxuXHRcdFx0Y2FjaGVUYXNrcygpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGNhY2hlQ2FsZW5kYXJzKCkge1xyXG5cdFx0XHR2bS5jYWxlbmRhciA9IG5ldyBjcnVkU2VydmljZSgnY2FsZW5kYXInKTtcclxuXHRcdFx0dm0uY2FsZW5kYXIuZ2V0QnlVc2VyKClcclxuXHRcdFx0XHQudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xyXG5cdFx0XHRcdFx0dm0uY2FsZW5kYXJzID0gZ2V0UmVzdWx0KHJlc3BvbnNlKTtcclxuXHRcdFx0XHRcdHVwZGF0ZUNhbGVuZGFycygpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGNhY2hlRXZlbnRzKCkge1xyXG5cdFx0XHR2bS5ldmVudCA9IG5ldyBjcnVkU2VydmljZSgnZXZlbnQnKTtcclxuXHRcdFx0dm0uZXZlbnQuZ2V0QnlVc2VyKClcclxuXHRcdFx0XHQudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xyXG5cdFx0XHRcdFx0dm0uZXZlbnRzID0gZ2V0UmVzdWx0KHJlc3BvbnNlKTtcclxuXHRcdFx0XHRcdHVwZGF0ZUV2ZW50cygpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGNhY2hlTGFiZWxzKCkge1xyXG5cdFx0XHR2bS5sYWJlbCA9IG5ldyBjcnVkU2VydmljZSgnbGFiZWwnKTtcclxuXHRcdFx0dm0ubGFiZWwuZ2V0QnlVc2VyKClcclxuXHRcdFx0XHQudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xyXG5cdFx0XHRcdFx0dm0ubGFiZWxzID0gZ2V0UmVzdWx0KHJlc3BvbnNlKTtcclxuXHRcdFx0XHRcdHVwZGF0ZUxhYmVscygpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGNhY2hlVGFza3MoKSB7XHJcblx0XHRcdHZtLnRhc2sgPSBuZXcgY3J1ZFNlcnZpY2UoJ3Rhc2snKTtcclxuXHRcdFx0dm0udGFzay5nZXRCeVVzZXIoKVxyXG5cdFx0XHRcdC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcblx0XHRcdFx0XHR2bS50YXNrcyA9IGdldFJlc3VsdChyZXNwb25zZSk7XHJcblx0XHRcdFx0XHR1cGRhdGVUYXNrcygpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGNsZWFyQ2FjaGUoKSB7XHJcblx0XHRcdHZtLmNhbGVuZGFycyA9IFtdO1xyXG5cdFx0XHR2bS5ldmVudHMgPSBbXTtcclxuXHRcdFx0dm0ubGFiZWxzID0gW107XHJcblx0XHRcdHZtLnRhc2tzID0gW107XHJcblxyXG5cdFx0XHR1cGRhdGVDYWxlbmRhcnMoKTtcclxuXHRcdFx0dXBkYXRlRXZlbnRzKCk7XHJcblx0XHRcdHVwZGF0ZUxhYmVscygpO1xyXG5cdFx0XHR1cGRhdGVUYXNrcygpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGdldFJlc3VsdChyZXNwb25zZSkge1xyXG5cdFx0XHR2YXIgcmVzdWx0ID0gcmVzcG9uc2UuZGF0YTtcclxuXHRcdFx0cmV0dXJuIHJlc3VsdC5zdWNjZXNzID8gcmVzdWx0LmRhdGEgOiByZXN1bHQudGl0bGU7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gZ2V0QWxsKCkge1xyXG5cdFx0XHRyZXR1cm4ge1xyXG5cdFx0XHRcdGNhbGVuZGFyczogZ2V0Q2FsZW5kYXJzKCksXHJcblx0XHRcdFx0ZXZlbnRzOiBnZXRFdmVudHMoKSxcclxuXHRcdFx0XHRsYWJlbHM6IGdldExhYmVscygpLFxyXG5cdFx0XHRcdHRhc2tzOiBnZXRUYXNrcygpXHJcblx0XHRcdH07XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gZ2V0Q2FsZW5kYXJzKCkge1xyXG5cdFx0XHRyZXR1cm4gdm0uY2FsZW5kYXJzO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGdldEV2ZW50cygpIHtcclxuXHRcdFx0cmV0dXJuIHZtLmV2ZW50cztcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBnZXRMYWJlbHMoKSB7XHJcblx0XHRcdHJldHVybiB2bS5sYWJlbHM7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gZ2V0VGFza3MoKSB7XHJcblx0XHRcdHJldHVybiB2bS50YXNrcztcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiB1cGRhdGVDYWxlbmRhcnMoKSB7XHJcblx0XHRcdCRyb290U2NvcGUuJGJyb2FkY2FzdCgndXBkYXRlQ2FsZW5kYXJzJyk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gdXBkYXRlRXZlbnRzKCkge1xyXG5cdFx0XHQkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3VwZGF0ZUV2ZW50cycpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIHVwZGF0ZUxhYmVscygpIHtcclxuXHRcdFx0JHJvb3RTY29wZS4kYnJvYWRjYXN0KCd1cGRhdGVMYWJlbHMnKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiB1cGRhdGVUYXNrcygpIHtcclxuXHRcdFx0JHJvb3RTY29wZS4kYnJvYWRjYXN0KCd1cGRhdGVUYXNrcycpO1xyXG5cdFx0fVxyXG5cdH1cclxufSkoKTtcclxuXG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHQvKipcclxuXHQqIFVzZWQgdG8gYWNjZXNzIHRoZSBhcGkgb2YgdGhlIHZhcmlvdXMgaXRlbSB0eXBlcy5cclxuXHQqIEFuIGluc3RhbmNlIG9mIGNydWQgbXVzdCBiZSBjcmVhdGVkIGluIG9yZGVyIHRvIHVzZSB0aGUgc2VydmljZS5cclxuXHQqXHJcblx0KiBBbGwgcHJvbWlzZXMgcmV0dXJuICdzdWNjZXNzJyBhbmQgZWl0aGVyICdkYXRhJyBvbiBzdWNjZXNzIG9yLCBvbiBlcnJvciwgJ3RpdGxlJ1xyXG5cdCogd2l0aCBhIGdlbmVyYWwgZXJyb3IgYW5kICdkZXRhaWxzJyB3aXRoIG1vcmUgZGV0YWlscy5cclxuXHQqL1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmZhY3RvcnkoJ2NydWRTZXJ2aWNlJywgY3J1ZFNlcnZpY2UpO1xyXG5cclxuXHRjcnVkU2VydmljZS4kaW5qZWN0ID0gWyckaHR0cCcsICckbG9nJ107XHJcblx0ZnVuY3Rpb24gY3J1ZFNlcnZpY2UoJGh0dHAsICRsb2cpIHtcclxuXHRcdHZhciBjcnVkID0gaW5pdDtcclxuXHRcdGNydWQucHJvdG90eXBlID0ge1xyXG5cdFx0XHRnZXQ6IGdldCxcclxuXHRcdFx0Z2V0QnlVc2VyOiBnZXRCeVVzZXIsXHJcblx0XHRcdGdldFdoZXJlOiBnZXRXaGVyZSxcclxuXHRcdFx0Y3JlYXRlOiBjcmVhdGUsXHJcblx0XHRcdHVwZGF0ZTogdXBkYXRlLFxyXG5cdFx0XHRyZW1vdmU6IHJlbW92ZSxcclxuXHRcdFx0cmVtb3ZlV2hlcmU6IHJlbW92ZVdoZXJlLFxyXG5cdFx0XHRyZW1vdmVVbmVjZXNzYXJ5S2V5czogcmVtb3ZlVW5lY2Vzc2FyeUtleXNcclxuXHRcdH07XHJcblxyXG5cdFx0cmV0dXJuIGNydWQ7XHJcblxyXG5cdFx0LyoqXHJcblx0XHQqIEluaXRpYWxpemUgdGhlIGJhc2UgdXJsIHVzaW5nIHRoZSB0eXBlIG9mIGl0ZW0gdG8gYmUgY2FsbGVkIG9uLlxyXG5cdFx0KiBBY3Rpdml0aWVzIGFuZCB0aGVpciBwYXJlbnRzIGhhdmUgYSBzcGVjaWZpYyBzdWJmb2xkZXIgdG8gYmUgcG9pbnRlZCB0byxcclxuXHRcdCogd2hpbGUgb3RoZXJzIGRvIG5vdC5cclxuXHRcdCpcclxuXHRcdCogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVHlwZSBvZiBpdGVtLlxyXG5cdFx0Ki9cclxuXHRcdGZ1bmN0aW9uIGluaXQodHlwZSkge1xyXG5cdFx0XHQvKiBqc2hpbnQgaWdub3JlOnN0YXJ0ICovXHJcblx0XHRcdHRoaXMudHlwZSA9IHR5cGU7XHJcblx0XHRcdHRoaXMuYmFzZSA9ICdhcGkvJztcclxuXHRcdFx0c3dpdGNoICh0eXBlKSB7XHJcblx0XHRcdFx0Y2FzZSAnZXZlbnQnOlxyXG5cdFx0XHRcdGNhc2UgJ2NhbGVuZGFyJzpcclxuXHRcdFx0XHRcdHRoaXMuYmFzZSArPSAnYWN0aXZpdHkvY2FsZW5kYXIvJztcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgJ2xhYmVsJzpcclxuXHRcdFx0XHRjYXNlICd0YXNrJzpcclxuXHRcdFx0XHRcdHRoaXMuYmFzZSArPSAnYWN0aXZpdHkvdGFzay8nO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0ZGVmYXVsdDpcclxuXHRcdFx0XHRcdHRoaXMuYmFzZSArPSB0eXBlICsgJy8nO1xyXG5cdFx0XHR9XHJcblx0XHRcdHRoaXMuYmFzZSArPSB0eXBlICsgJ01hbmFnZXIucGhwJztcclxuXHRcdFx0LyoganNoaW50IGlnbm9yZTplbmQgKi9cclxuXHRcdH1cclxuXHJcblx0XHQvKipcclxuXHRcdCogQHBhcmFtXHR7c3RyaW5nfVx0aWRcdFx0SUQgb2YgaXRlbSB0eXBlIHRvIGdldC5cclxuXHRcdCogQHJldHVyblx0e3N0cmluZ1tdfVx0XHRcdFByb21pc2Ugd2l0aCAnZGF0YScgPT0gcXVlcnkgcmVzdWx0cyBvbiBzdWNjZXNzLlxyXG5cdFx0Ki9cclxuXHRcdGZ1bmN0aW9uIGdldChpZCkge1xyXG5cdFx0XHRyZXR1cm4gJGh0dHAuZ2V0KHRoaXMuYmFzZSwge3BhcmFtczogeyBpZDogaWQgfX0pIC8vIGpzaGludCBpZ25vcmU6bGluZVxyXG5cdFx0XHRcdC50aGVuKHByb21pc2VDb21wbGV0ZSlcclxuXHRcdFx0XHQuY2F0Y2gocHJvbWlzZUZhaWxlZCk7XHJcblx0XHR9XHJcblx0XHQvKipcclxuXHRcdCogQHJldHVyblx0e3N0cmluZ1tdfVx0XHRcdFByb21pc2Ugd2l0aCAnZGF0YScgPT0gcXVlcnkgcmVzdWx0cyBvbiBzdWNjZXNzLlxyXG5cdFx0Ki9cclxuXHRcdGZ1bmN0aW9uIGdldEJ5VXNlcigpIHtcclxuXHRcdFx0cmV0dXJuICRodHRwLmdldCh0aGlzLmJhc2UsIHtwYXJhbXM6IHtieVVzZXI6IHRydWV9fSkgLy8ganNoaW50IGlnbm9yZTpsaW5lXHJcblx0XHRcdFx0LnRoZW4ocHJvbWlzZUNvbXBsZXRlKVxyXG5cdFx0XHRcdC5jYXRjaChwcm9taXNlRmFpbGVkKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBnZXRXaGVyZSh3aGVyZSwgYmluZGluZ3MpIHtcclxuXHRcdFx0cmV0dXJuICRodHRwLmdldCh0aGlzLmJhc2UsIHtwYXJhbXM6IHsgd2hlcmU6IHdoZXJlLCBiaW5kaW5nczogSlNPTi5zdHJpbmdpZnkoYmluZGluZ3MpIH19KSAvLyBqc2hpbnQgaWdub3JlOmxpbmVcclxuXHRcdFx0XHQudGhlbihwcm9taXNlQ29tcGxldGUpXHJcblx0XHRcdFx0LmNhdGNoKHByb21pc2VGYWlsZWQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8qKlxyXG5cdFx0KiBAcGFyYW1cdHttaXhlZFtdfVx0ZGF0YVx0RGF0YSBvZiBpdGVtIHRvIGNyZWF0ZS5cclxuXHRcdCogQHJldHVyblx0e3N0cmluZ1tdfVx0XHRcdFByb21pc2Ugd2l0aCAnZGF0YScgPT09IDEgb24gc3VjY2Vzcy5cclxuXHRcdCovXHJcblx0XHRmdW5jdGlvbiBjcmVhdGUoZGF0YSkge1xyXG5cdFx0XHRkYXRhID0gdGhpcy5yZW1vdmVVbmVjZXNzYXJ5S2V5cyhkYXRhKTsgIC8vIGpzaGludCBpZ25vcmU6bGluZVxyXG5cdFx0XHRyZXR1cm4gJGh0dHAucG9zdCh0aGlzLmJhc2UsIGRhdGEpIC8vIGpzaGludCBpZ25vcmU6bGluZVxyXG5cdFx0XHRcdC50aGVuKHByb21pc2VDb21wbGV0ZSlcclxuXHRcdFx0XHQuY2F0Y2gocHJvbWlzZUZhaWxlZCk7XHJcblx0XHR9XHJcblxyXG5cdFx0LyoqXHJcblx0XHQqIEBwYXJhbVx0e3N0cmluZ31cdGlkXHRcdElEIG9mIGl0ZW0gdHlwZSB0byB1cGRhdGUuXHJcblx0XHQqIEBwYXJhbVx0e21peGVkW119XHRkYXRhXHREYXRhIG9mIGl0ZW0gdG8gdXBkYXRlLlxyXG5cdFx0KlxyXG5cdFx0KiBAcmV0dXJuXHR7c3RyaW5nW119XHRcdFx0UHJvbWlzZSB3aXRoICdkYXRhJyA9PT0gJzEnIG9uIHN1Y2Nlc3MuXHJcblx0XHQqL1xyXG5cdFx0ZnVuY3Rpb24gdXBkYXRlKGlkLCBkYXRhKSB7XHJcblx0XHRcdGRhdGEgPSB0aGlzLnJlbW92ZVVuZWNlc3NhcnlLZXlzKGRhdGEpOyAgLy8ganNoaW50IGlnbm9yZTpsaW5lXHJcblx0XHRcdHJldHVybiAkaHR0cC5wdXQodGhpcy5iYXNlLCBkYXRhLCB7cGFyYW1zOiB7IGlkOiBpZCB9fSkgLy8ganNoaW50IGlnbm9yZTpsaW5lXHJcblx0XHRcdFx0LnRoZW4ocHJvbWlzZUNvbXBsZXRlKVxyXG5cdFx0XHRcdC5jYXRjaChwcm9taXNlRmFpbGVkKTtcclxuXHRcdH1cclxuXHJcblx0XHQvKipcclxuXHRcdCogQHBhcmFtXHR7c3RyaW5nfVx0aWRcdFx0SUQgb2YgaXRlbSB0eXBlIHRvIGRlbGV0ZS5cclxuXHRcdCogQHJldHVyblx0e3N0cmluZ1tdfVx0XHRcdFByb21pc2Ugd2l0aCAnZGF0YScgPT09IDEgb24gc3VjY2Vzcy5cclxuXHRcdCovXHJcblx0XHRmdW5jdGlvbiByZW1vdmUoaWQpIHtcclxuXHRcdFx0cmV0dXJuICRodHRwLmRlbGV0ZSh0aGlzLmJhc2UsIHtwYXJhbXM6IHsgaWQ6IGlkIH19KSAvLyBqc2hpbnQgaWdub3JlOmxpbmVcclxuXHRcdFx0XHQudGhlbihwcm9taXNlQ29tcGxldGUpXHJcblx0XHRcdFx0LmNhdGNoKHByb21pc2VGYWlsZWQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8qKlxyXG5cdFx0KiBAcGFyYW0gXHR7c3RyaW5nfVx0d2hlcmUgXHRXaGVyZSBjbGF1c2UuXHJcblx0XHQqIEByZXR1cm5cdHtzdHJpbmdbXX1cdFx0XHRQcm9taXNlIHdpdGggJ2RhdGEnID49IDAgb24gc3VjY2Vzcy5cclxuXHRcdCovXHJcblx0XHRmdW5jdGlvbiByZW1vdmVXaGVyZSh3aGVyZSkge1xyXG5cdFx0XHRyZXR1cm4gJGh0dHAuZGVsZXRlKHRoaXMuYmFzZSArICc/dXNld2hlcmU9dHJ1ZSZ3aGVyZT0nICsgZXNjYXBlKHdoZXJlKSkgLy8ganNoaW50IGlnbm9yZTpsaW5lXHJcblx0XHRcdFx0LnRoZW4ocHJvbWlzZUNvbXBsZXRlKVxyXG5cdFx0XHRcdC5jYXRjaChwcm9taXNlRmFpbGVkKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBwcm9taXNlQ29tcGxldGUocmVzcG9uc2UpIHtcclxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIHByb21pc2VGYWlsZWQoZXJyb3IpIHtcclxuXHRcdFx0JGxvZy5lcnJvcihlcnJvcik7XHJcblx0XHRcdHJldHVybiB7XHJcblx0XHRcdFx0c3VjY2VzczogJ2ZhbHNlJyxcclxuXHRcdFx0XHR0aXRsZTogJ0Vycm9yIHdoZW4gcXVlcnlpbmcgc2VydmVyLicsXHJcblx0XHRcdFx0bWVzc2FnZTogZXJyb3JcclxuXHRcdFx0fTtcclxuXHRcdH1cclxuXHJcblx0XHQvKipcclxuXHRcdCogSXRlbSBkYXRhIHBhc3NlZCBpbiBtYXkgc3RpbGwgaGF2ZSB0aGVpciBpZHMgb3IgYWxpYXMgZmllbGRzIChmb3IgYWN0aXZpdGllcylcclxuXHRcdCogZW1iZWRkZWQsIHdoaWNoIHdpbGwgY2FuIGNhdXNlIGVycm9ycyBpbiB0aGUgU1FMLlxyXG5cdFx0KlxyXG5cdFx0KiBAcGFyYW1cdHttaXhlZFtdfSBkYXRhXHJcblx0XHQqIEByZXR1cm5cdHttaXhlZFtdfVxyXG5cdFx0Ki9cclxuXHRcdGZ1bmN0aW9uIHJlbW92ZVVuZWNlc3NhcnlLZXlzKGRhdGEpIHtcclxuXHRcdFx0dmFyIHRvRGVsZXRlID0gWydpZCcsICdwZXJzb25faWQnLCB0aGlzLnR5cGUgKyAnX2lkJywgJ2FjdGl2aXR5X2luZm9faWQnLCAncGFyZW50X25hbWUnXTsgIC8vIGpzaGludCBpZ25vcmU6bGluZVxyXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRvRGVsZXRlLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0ZGVsZXRlIGRhdGFbdG9EZWxldGVbaV1dO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBkYXRhO1xyXG5cdFx0fVxyXG5cdH1cclxufSkoKTtcclxuXG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHQvKipcclxuXHQqIFVzZWQgdG8gYWNjZXNzIHNlc3Npb24gdmFyaWFibGVzLlxyXG5cdCovXHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuZmFjdG9yeSgnc2Vzc2lvblNlcnZpY2UnLCBzZXNzaW9uU2VydmljZSk7XHJcblxyXG5cdHNlc3Npb25TZXJ2aWNlLiRpbmplY3QgPSBbJyRodHRwJywgJyRsb2cnXTtcclxuXHRmdW5jdGlvbiBzZXNzaW9uU2VydmljZSgkaHR0cCwgJGxvZykge1xyXG5cdFx0dmFyIHZtID0gdGhpczsgIC8vIGpzaGludCBpZ25vcmU6bGluZVxyXG5cdFx0dm0uYmFzZSA9ICdhcGkvc2Vzc2lvbi9zZXNzaW9uVmFyTWFuYWdlci5waHA/dmFyPSc7XHJcblxyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0Z2V0VmFyOiBnZXRWYXIsXHJcblx0XHRcdHNldFZhcjogc2V0VmFyXHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0KiBAcGFyYW1cdHtzdHJpbmd9ICRuYW1lXHRWYXJpYWJsZSBuYW1lIHRvIGdldCBmcm9tIHNlc3Npb24uXHJcblx0XHQqIEByZXR1cm5cdHtzdHJpbmd9IFx0XHRQcm9taXNlIG9yIGVycm9yIG9uIGZhaWwuXHJcblx0XHQqL1xyXG5cdFx0ZnVuY3Rpb24gZ2V0VmFyKCRuYW1lKSB7XHJcblx0XHRcdHJldHVybiAkaHR0cC5nZXQodm0uYmFzZSArICRuYW1lKVxyXG5cdFx0XHRcdC50aGVuKHByb21pc2VDb21wbGV0ZSlcclxuXHRcdFx0XHQuY2F0Y2gocHJvbWlzZUZhaWxlZCk7XHJcblx0XHR9XHJcblxyXG5cdFx0LyoqXHJcblx0XHQqIEBwYXJhbVx0e3N0cmluZ30gJG5hbWVcdFZhcmlhYmxlIG5hbWUgdG8gZ2V0IGZyb20gc2Vzc2lvbi5cclxuXHRcdCogQHJldHVyblx0e3N0cmluZ30gXHRcdFByb21pc2Ugb3IgZXJyb3Igb24gZmFpbC5cclxuXHRcdCovXHJcblx0XHRmdW5jdGlvbiBzZXRWYXIoJG5hbWUsICR2YWx1ZSkge1xyXG5cdFx0XHRyZXR1cm4gJGh0dHAucG9zdCh2bS5iYXNlICsgJG5hbWUsICR2YWx1ZSlcclxuXHRcdFx0XHQudGhlbihwcm9taXNlQ29tcGxldGUpXHJcblx0XHRcdFx0LmNhdGNoKHByb21pc2VGYWlsZWQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIHByb21pc2VDb21wbGV0ZShyZXNwb25zZSkge1xyXG5cdFx0XHRyZXR1cm4gcmVzcG9uc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gcHJvbWlzZUZhaWxlZChlcnJvcikge1xyXG5cdFx0XHQkbG9nLmVycm9yKGVycm9yKTtcclxuXHRcdFx0cmV0dXJuIHtcclxuXHRcdFx0XHRzdWNjZXNzOiAnZmFsc2UnLFxyXG5cdFx0XHRcdHRpdGxlOiAnRXJyb3Igd2hlbiBhY2Nlc3NpbmcgdmFyaWFibGUuJyxcclxuXHRcdFx0XHRtZXNzYWdlOiBlcnJvclxyXG5cdFx0XHR9O1xyXG5cdFx0fVxyXG5cdH1cclxufSkoKTtcclxuXG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmNvbnRyb2xsZXIoJ0V2ZW50c0NvbnRyb2xsZXInLCBFdmVudHNDb250cm9sbGVyKTtcclxuXHJcblx0RXZlbnRzQ29udHJvbGxlci4kaW5qZWN0ID0gWyckcm9vdFNjb3BlJywgJ2NhbGVuZGFyV2lkZ2V0U2VydmljZScsICdjYWxlbmRhclNlcnZpY2UnLCAnZXZlbnRzU2VydmljZSddO1xyXG5cdGZ1bmN0aW9uIEV2ZW50c0NvbnRyb2xsZXIoJHJvb3RTY29wZSwgY2FsZW5kYXJXaWRnZXRTZXJ2aWNlLCBjYWxlbmRhclNlcnZpY2UsIGV2ZW50c1NlcnZpY2UpIHtcclxuXHRcdHZhciB2bSA9IHRoaXM7XHJcblx0XHR2bS5ldmVudHMgPSBbXTtcclxuXHRcdHZtLmNhbGVuZGFyID0gW107XHJcblxyXG5cdFx0dm0udG9kYXkgPSBudWxsO1xyXG5cdFx0dm0uc2VsZWN0ZWREYXkgPSBudWxsO1xyXG5cdFx0dm0ubW9udGggPSBudWxsO1xyXG5cclxuXHRcdHZtLmRheUNsaWNrZWQgPSBkYXlDbGlja2VkO1xyXG5cdFx0dm0uaXNTYW1lRGF5QXNTZWxlY3RlZCA9IGlzU2FtZURheUFzU2VsZWN0ZWQ7XHJcblx0XHR2bS5zaG93RXZlbnRNb2RhbCA9IHNob3dFdmVudE1vZGFsO1xyXG5cdFx0dm0ubGFzdE1vbnRoID0gbGFzdE1vbnRoO1xyXG5cdFx0dm0ubmV4dE1vbnRoID0gbmV4dE1vbnRoO1xyXG5cclxuXHRcdGFjdGl2YXRlKCk7XHJcblxyXG5cdFx0ZnVuY3Rpb24gYWN0aXZhdGUoKSB7XHJcblx0XHRcdHVwZGF0ZUNhbGVuZGFycygpO1xyXG5cdFx0XHR1cGRhdGVFdmVudHMoKTtcclxuXHJcblx0XHRcdCRyb290U2NvcGUuJG9uKCd1cGRhdGVDYWxlbmRhcnMnLCB1cGRhdGVDYWxlbmRhcnMpO1xyXG5cdFx0XHQkcm9vdFNjb3BlLiRvbigndXBkYXRlRXZlbnRzJywgdXBkYXRlRXZlbnRzKTtcclxuXHJcblx0XHRcdHZtLnRvZGF5ID0gY2FsZW5kYXJXaWRnZXRTZXJ2aWNlLmdldFRvZGF5KCk7XHJcblx0XHRcdHZtLnNlbGVjdGVkRGF5ID0gdm0udG9kYXk7XHJcblx0XHRcdHZtLm1vbnRoID0gY2FsZW5kYXJXaWRnZXRTZXJ2aWNlLmdldE1vbnRoKHZtLnRvZGF5KTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBkYXlDbGlja2VkKGNsaWNrRXZlbnQsIGRheSkge1xyXG5cdFx0XHR2bS5zZWxlY3RlZERheSA9IGNhbGVuZGFyV2lkZ2V0U2VydmljZS5kYXlDbGlja2VkKGNsaWNrRXZlbnQsIGRheSwgdm0uc2VsZWN0ZWREYXksIHZtLmNhbGVuZGFycyk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gaXNTYW1lRGF5QXNTZWxlY3RlZChkYXkpIHtcclxuXHRcdFx0cmV0dXJuIGNhbGVuZGFyV2lkZ2V0U2VydmljZS5pc1NhbWVEYXkoZGF5LCB2bS5zZWxlY3RlZERheSk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gc2hvd0V2ZW50TW9kYWwoY2xpY2tFdmVudCwgZXZlbnQpIHtcclxuXHRcdFx0Y2FsZW5kYXJXaWRnZXRTZXJ2aWNlLnNob3dFdmVudE1vZGFsKGNsaWNrRXZlbnQsIGV2ZW50LCB2bS5jYWxlbmRhcnMpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGxhc3RNb250aCgpIHtcclxuXHRcdFx0dm0ubW9udGggPSBjYWxlbmRhcldpZGdldFNlcnZpY2UubGFzdE1vbnRoKHZtLm1vbnRoKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBuZXh0TW9udGgoKSB7XHJcblx0XHRcdHZtLm1vbnRoID0gY2FsZW5kYXJXaWRnZXRTZXJ2aWNlLm5leHRNb250aCh2bS5tb250aCk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gdXBkYXRlQ2FsZW5kYXJzKCkge1xyXG5cdFx0XHR2bS5jYWxlbmRhcnMgPSBjYWxlbmRhclNlcnZpY2UuZ2V0Q2FsZW5kYXJzKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gdXBkYXRlRXZlbnRzKCkge1xyXG5cdFx0XHR2bS5ldmVudHMgPSBldmVudHNTZXJ2aWNlLmdldEV2ZW50cygpO1xyXG5cdFx0fVxyXG5cdH1cclxufSkoKTtcbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuZGlyZWN0aXZlKCdzcEV2ZW50cycsIGV2ZW50c0RpcmVjdGl2ZSk7XHJcblxyXG5cdGZ1bmN0aW9uIGV2ZW50c0RpcmVjdGl2ZSgpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHRlbXBsYXRlVXJsOiAnbW9kdWxlcy9ldmVudHMvZXZlbnRzLmh0bWwnLFxyXG5cdFx0XHRjb250cm9sbGVyOiAnRXZlbnRzQ29udHJvbGxlcicsXHJcblx0XHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcclxuXHRcdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxyXG5cdFx0fTtcclxuXHR9XHJcbn0pKCk7XG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmZhY3RvcnkoJ2V2ZW50c1NlcnZpY2UnLCBldmVudHNTZXJ2aWNlKTtcclxuXHJcblx0ZXZlbnRzU2VydmljZS4kaW5qZWN0ID0gWydjcnVkU2VydmljZScsICdjYWNoZVNlcnZpY2UnXTtcclxuXHRmdW5jdGlvbiBldmVudHNTZXJ2aWNlKGNydWRTZXJ2aWNlLCBjYWNoZVNlcnZpY2UpIHtcclxuXHRcdHZhciB2bSA9IHRoaXM7ICAvLyBqc2hpbnQgaWdub3JlOmxpbmVcclxuXHRcdHZtLmV2ZW50ID0gbmV3IGNydWRTZXJ2aWNlKCdldmVudCcpO1xyXG5cclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGNyZWF0ZUV2ZW50OiBjcmVhdGVFdmVudCxcclxuXHRcdFx0Y3JlYXRlT3JVcGRhdGVFdmVudDogY3JlYXRlT3JVcGRhdGVFdmVudCxcclxuXHRcdFx0ZGVsZXRlRXZlbnQ6IGRlbGV0ZUV2ZW50LFxyXG5cdFx0XHRnZXRFdmVudHM6IGdldEV2ZW50cyxcclxuXHRcdFx0dXBkYXRlRXZlbnQ6IHVwZGF0ZUV2ZW50XHJcblx0XHR9O1xyXG5cclxuXHRcdGZ1bmN0aW9uIGNyZWF0ZUV2ZW50KGV2ZW50KSB7XHJcblx0XHRcdHJldHVybiB2bS5ldmVudC5jcmVhdGUoZXZlbnQpLnRoZW4ocHJvbWlzZUNvbXBsZXRlKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBjcmVhdGVPclVwZGF0ZUV2ZW50KGV2ZW50KSB7XHJcblx0XHRcdGlmICghZXZlbnQuZXZlbnRfaWQpIHtcclxuXHRcdFx0XHRyZXR1cm4gY3JlYXRlRXZlbnQoZXZlbnQpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiB1cGRhdGVFdmVudChldmVudC5ldmVudF9pZCwgZXZlbnQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGRlbGV0ZUV2ZW50KGlkKSB7XHJcblx0XHRcdHJldHVybiB2bS5ldmVudC5yZW1vdmUoaWQpLnRoZW4ocHJvbWlzZUNvbXBsZXRlKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBnZXRFdmVudHMoKSB7XHJcblx0XHRcdHJldHVybiBjYWNoZVNlcnZpY2UuZ2V0RXZlbnRzKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gdXBkYXRlRXZlbnQoaWQsIGV2ZW50KSB7XHJcblx0XHRcdHJldHVybiB2bS5ldmVudC51cGRhdGUoaWQsIGV2ZW50KS50aGVuKHByb21pc2VDb21wbGV0ZSk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gcHJvbWlzZUNvbXBsZXRlKHJlc3BvbnNlKSB7XHJcblx0XHRcdHZhciByZXMgPSByZXNwb25zZS5kYXRhO1xyXG5cdFx0XHRpZiAocmVzLnN1Y2Nlc3MpIHtcclxuXHRcdFx0XHRjYWNoZVNlcnZpY2UuY2FjaGVFdmVudHMoKTtcclxuXHRcdFx0XHRyZXR1cm4gcmVzLmRhdGE7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJlcy50aXRsZTtcclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XHJcblxuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0LyoqXHJcblx0KiBUbyBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYXV0b2ZvY3VzIGF0dHJpYnV0ZSB0byBhdXRvLWZvY3VzXHJcblx0KiBtb2RhbCBpbnB1dHMuXHJcblx0Ki9cclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5kaXJlY3RpdmUoJ3NwQXV0b0ZvY3VzJywgYXV0b0ZvY3VzRGlyZWN0aXZlKTtcclxuXHJcblx0ZnVuY3Rpb24gYXV0b0ZvY3VzRGlyZWN0aXZlKCkge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0cmVzdHJpY3Q6ICdBJyxcclxuXHRcdFx0bGluazogbGlua1xyXG5cdFx0fTtcclxuXHJcblx0XHRmdW5jdGlvbiBsaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRycywgbmdNb2RlbCkge1xyXG5cdFx0XHRlbGVtZW50WzBdLmZvY3VzKCk7XHJcblx0XHR9XHJcblx0fVxyXG59KSgpO1xuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0LyoqXHJcblx0KiBDb21wYXJlIGFuIGlucHV0IGZpZWxkIHRvIGFub3RoZXIgZmllbGQsIGRldGVybWluZWQgYnkgdGhlIGRldi5cclxuXHQqL1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmRpcmVjdGl2ZSgnc3BDb21wYXJlVG8nLCBjb21wYXJlVG9EaXJlY3RpdmUpO1xyXG5cclxuXHRmdW5jdGlvbiBjb21wYXJlVG9EaXJlY3RpdmUoKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRyZXF1aXJlOiAnbmdNb2RlbCcsXHJcblx0XHRcdHNjb3BlOiB7XHJcblx0XHRcdFx0b3RoZXJNb2RlbDogJz1zcENvbXBhcmVUbydcclxuXHRcdFx0fSxcclxuXHRcdFx0bGluazogbGlua1xyXG5cdFx0fTtcclxuXHJcblx0XHRmdW5jdGlvbiBsaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRycywgbmdNb2RlbCkge1xyXG5cdFx0XHR2YXIgdW5iaW5kV2F0Y2ggPSBzY29wZS4kd2F0Y2goJ290aGVyTW9kZWwnLCB2YWxpZGF0ZU9uQ2hhbmdlKTtcclxuXHRcdFx0bmdNb2RlbC4kdmFsaWRhdG9ycy5zcENvbXBhcmVUbyA9IGNvbXBhcmVWYWx1ZXM7XHJcblx0XHRcdGVsZW1lbnQub24oJyRkZXN0cm95JywgY2xlYW5VcCk7XHJcblxyXG5cdFx0XHRmdW5jdGlvbiBjbGVhblVwKCkge1xyXG5cdFx0XHRcdHVuYmluZFdhdGNoKCk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGZ1bmN0aW9uIGNvbXBhcmVWYWx1ZXModmlld1ZhbHVlKSB7XHJcblx0XHRcdFx0cmV0dXJuICh2aWV3VmFsdWUgPT09IHNjb3BlLm90aGVyTW9kZWwuJHZpZXdWYWx1ZSk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGZ1bmN0aW9uIHZhbGlkYXRlT25DaGFuZ2UobmV3VmFsdWUsIG9sZFZhbHVlKSB7XHJcblx0XHRcdFx0bmdNb2RlbC4kdmFsaWRhdGUoKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxufSkoKTtcbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuY29udHJvbGxlcignTG9nb3V0Q29udHJvbGxlcicsIExvZ291dENvbnRyb2xsZXIpO1xyXG5cclxuXHRMb2dvdXRDb250cm9sbGVyLiRpbmplY3QgPSBbJ2xvZ291dFNlcnZpY2UnXTtcclxuXHRmdW5jdGlvbiBMb2dvdXRDb250cm9sbGVyKGxvZ291dFNlcnZpY2UpIHtcclxuXHRcdGFjdGl2YXRlKCk7XHJcblxyXG5cdFx0ZnVuY3Rpb24gYWN0aXZhdGUoKSB7XHJcblx0XHRcdGxvZ291dFNlcnZpY2UubG9nb3V0KCk7XHJcblx0XHR9XHJcblx0fVxyXG59KSgpO1xuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5mYWN0b3J5KCdsb2dvdXRTZXJ2aWNlJywgbG9nb3V0U2VydmljZSk7XHJcblxyXG5cdGxvZ291dFNlcnZpY2UuJGluamVjdCA9IFsnJHJvb3RTY29wZScsICckaHR0cCcsICckc3RhdGUnLCAnJGxvZycsICdjYWNoZVNlcnZpY2UnXTtcclxuXHRmdW5jdGlvbiBsb2dvdXRTZXJ2aWNlKCRyb290U2NvcGUsICRodHRwLCAkc3RhdGUsICRsb2csIGNhY2hlU2VydmljZSkge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0bG9nb3V0OiBsb2dvdXRcclxuXHRcdH07XHJcblxyXG5cdFx0ZnVuY3Rpb24gbG9nb3V0KCkge1xyXG5cdFx0XHRyZXR1cm4gJGh0dHAucG9zdCgnYXBpL3VzZXIvbG9nb3V0TWFuYWdlci5waHAnKVxyXG5cdFx0XHRcdC50aGVuKGxvZ291dENvbXBsZXRlKVxyXG5cdFx0XHRcdC5jYXRjaChsb2dvdXRGYWlsZWQpO1xyXG5cclxuXHRcdFx0ZnVuY3Rpb24gbG9nb3V0Q29tcGxldGUocmVzcG9uc2UpIHtcclxuXHRcdFx0XHRjYWNoZVNlcnZpY2UuY2xlYXJDYWNoZSgpO1xyXG5cdFx0XHRcdCRyb290U2NvcGUuJGJyb2FkY2FzdCgndXBkYXRlVXNlcicpO1xyXG5cdFx0XHRcdCRzdGF0ZS5nbygnbG9naW4nKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZnVuY3Rpb24gbG9nb3V0RmFpbGVkKGVycm9yKSB7XHJcblx0XHRcdFx0JGxvZy5lcnJvcihlcnJvcik7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XHJcblxuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0LyoqXHJcblx0KiBUaGUgZm9ybWF0cyBvZiB0aGUgdGFzayBhbmQgZXZlbnQgbW9kYWxzLlxyXG5cdCogRGlzcGxheSBmb3JtYXQgaXMgdXNlZCBmb3IgYSB1c2VyLWZyaWVuZGx5IGRhdGUuXHJcblx0KiBTdG9yYWdlIGZvcm1hdCBpcyB1c2VkIHRvIHN0b3JlIGludG8gdGhlIGRhdGFiYXNlLlxyXG5cdCovXHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuZmFjdG9yeSgnZm9ybWF0U2VydmljZScsIGZvcm1hdFNlcnZpY2UpO1xyXG5cclxuXHRmb3JtYXRTZXJ2aWNlLiRpbmplY3QgPSBbJ21vbWVudCddO1xyXG5cdGZ1bmN0aW9uIGZvcm1hdFNlcnZpY2UobW9tZW50KSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRmb3JtYXRGb3JEaXNwbGF5OiBmb3JtYXRGb3JEaXNwbGF5LFxyXG5cdFx0XHRmb3JtYXRGb3JTdG9yYWdlOiBmb3JtYXRGb3JTdG9yYWdlLFxyXG5cdFx0XHRnZXREaXNwbGF5Rm9ybWF0OiBnZXREaXNwbGF5Rm9ybWF0LFxyXG5cdFx0XHR0b0Rpc3BsYXlGb3JtYXQ6IHRvRGlzcGxheUZvcm1hdCxcclxuXHRcdFx0dG9TdG9yYWdlRm9ybWF0OiB0b1N0b3JhZ2VGb3JtYXRcclxuXHRcdH07XHJcblxyXG5cdFx0ZnVuY3Rpb24gZm9ybWF0Rm9yRGlzcGxheShhY3Rpdml0eSkge1xyXG5cdFx0XHRpZiAoYWN0aXZpdHkuaGFzT3duUHJvcGVydHkoJ2R0X3N0YXJ0JykpIHtcclxuXHRcdFx0XHRhY3Rpdml0eS5hbGxfZGF5ID0gcGFyc2VJbnQoYWN0aXZpdHkuYWxsX2RheSk7XHJcblx0XHRcdFx0YWN0aXZpdHkuZHRfc3RhcnQgPSB0b0Rpc3BsYXlGb3JtYXQobW9tZW50KGFjdGl2aXR5LmR0X3N0YXJ0KSk7XHJcblx0XHRcdFx0YWN0aXZpdHkuZHRfZW5kID0gdG9EaXNwbGF5Rm9ybWF0KG1vbWVudChhY3Rpdml0eS5kdF9lbmQpKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRpZiAoYWN0aXZpdHkuaGFzT3duUHJvcGVydHkoJ2R1ZScpICYmIGFjdGl2aXR5LmR1ZSkge1xyXG5cdFx0XHRcdFx0YWN0aXZpdHkuZHVlID0gdG9EaXNwbGF5Rm9ybWF0KG1vbWVudChhY3Rpdml0eS5kdWUpKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmIChhY3Rpdml0eS5oYXNPd25Qcm9wZXJ0eSgncmVtaW5kZXInKSAmJiBhY3Rpdml0eS5yZW1pbmRlcikge1xyXG5cdFx0XHRcdFx0YWN0aXZpdHkucmVtaW5kZXIgPSB0b0Rpc3BsYXlGb3JtYXQobW9tZW50KGFjdGl2aXR5LnJlbWluZGVyKSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gZm9ybWF0Rm9yU3RvcmFnZShhY3Rpdml0eSkge1xyXG5cdFx0XHR2YXIgZGlzcGxheUZvcm1hdCA9IGdldERpc3BsYXlGb3JtYXQoKTtcclxuXHRcdFx0aWYgKGFjdGl2aXR5Lmhhc093blByb3BlcnR5KCdkdF9zdGFydCcpKSB7XHJcblx0XHRcdFx0YWN0aXZpdHkuZHRfc3RhcnQgPSB0b1N0b3JhZ2VGb3JtYXQobW9tZW50KGFjdGl2aXR5LmR0X3N0YXJ0LCBkaXNwbGF5Rm9ybWF0KSk7XHJcblx0XHRcdFx0YWN0aXZpdHkuZHRfZW5kID0gdG9TdG9yYWdlRm9ybWF0KG1vbWVudChhY3Rpdml0eS5kdF9lbmQsIGRpc3BsYXlGb3JtYXQpKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRpZiAoYWN0aXZpdHkuaGFzT3duUHJvcGVydHkoJ2R1ZScpICYmIGFjdGl2aXR5LmR1ZSkge1xyXG5cdFx0XHRcdFx0YWN0aXZpdHkuZHVlID0gdG9TdG9yYWdlRm9ybWF0KG1vbWVudChhY3Rpdml0eS5kdWUsIGRpc3BsYXlGb3JtYXQpKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmIChhY3Rpdml0eS5oYXNPd25Qcm9wZXJ0eSgncmVtaW5kZXInKSAmJiBhY3Rpdml0eS5yZW1pbmRlcikge1xyXG5cdFx0XHRcdFx0YWN0aXZpdHkucmVtaW5kZXIgPSB0b1N0b3JhZ2VGb3JtYXQobW9tZW50KGFjdGl2aXR5LnJlbWluZGVyLCBkaXNwbGF5Rm9ybWF0KSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBhY3Rpdml0eTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBnZXREaXNwbGF5Rm9ybWF0KCkge1xyXG5cdFx0XHRyZXR1cm4gJ2hoOm1tIGEgTU0tREQtWVlZWSc7XHJcblx0XHR9XHJcblxyXG5cdFx0LyoqXHJcblx0XHQqIEBwYXJhbSB7bW9tZW50IE9iamVjdH0gYWN0aXZpdHlcclxuXHRcdCovXHJcblx0XHRmdW5jdGlvbiB0b0Rpc3BsYXlGb3JtYXQoYWN0aXZpdHkpIHtcclxuXHRcdFx0cmV0dXJuIGFjdGl2aXR5LmZvcm1hdChnZXREaXNwbGF5Rm9ybWF0KCkpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8qKlxyXG5cdFx0KiBAcGFyYW0ge21vbWVudCBPYmplY3R9IGFjdGl2aXR5XHJcblx0XHQqL1xyXG5cdFx0ZnVuY3Rpb24gdG9TdG9yYWdlRm9ybWF0KGFjdGl2aXR5KSB7XHJcblx0XHRcdHJldHVybiBhY3Rpdml0eS5mb3JtYXQoJ1lZWVktTU0tREQgSEg6bW06c3MnKTtcclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XHJcblxuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5jb250cm9sbGVyKCdNb2RhbENvbnRyb2xsZXInLCBNb2RhbENvbnRyb2xsZXIpO1xyXG5cclxuXHRNb2RhbENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHVpYk1vZGFsSW5zdGFuY2UnLCAnZ3JvdXBzJywgJ2l0ZW0nLCAnZXZlbnRNb2RhbFNlcnZpY2UnXTtcclxuXHRmdW5jdGlvbiBNb2RhbENvbnRyb2xsZXIoJHVpYk1vZGFsSW5zdGFuY2UsIGdyb3VwcywgaXRlbSwgZXZlbnRNb2RhbFNlcnZpY2UpIHtcclxuXHRcdHZhciB2bSA9IHRoaXM7XHJcblx0XHR2bS5ncm91cHMgPSBncm91cHM7XHJcblx0XHR2bS5pdGVtID0gaXRlbTtcclxuXHJcblx0XHR2bS5jYW5jZWwgPSBjYW5jZWw7XHJcblx0XHR2bS5jbG9zZSA9IGNsb3NlO1xyXG5cdFx0dm0uY29uZmlybSA9IGNvbmZpcm07XHJcblx0XHR2bS5yZW1vdmUgPSByZW1vdmU7XHJcblx0XHR2bS50b2dnbGVBbGxEYXkgPSB0b2dnbGVBbGxEYXk7XHJcblxyXG5cdFx0ZnVuY3Rpb24gY2FuY2VsKCkge1xyXG5cdFx0XHQkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCdjYW5jZWwnKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBjbG9zZSgpIHtcclxuXHRcdFx0JHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBjb25maXJtKGRhdGEpIHtcclxuXHRcdFx0JHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoZGF0YSk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gcmVtb3ZlKGRhdGEpIHtcclxuXHRcdFx0JHVpYk1vZGFsSW5zdGFuY2UuZGlzbWlzcyhkYXRhKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiB0b2dnbGVBbGxEYXkoZXZlbnQpIHtcclxuXHRcdFx0ZXZlbnRNb2RhbFNlcnZpY2UudG9nZ2xlQWxsRGF5KGV2ZW50KTtcclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmNvbnRyb2xsZXIoJ1JlY3VycmVuY2VDb250cm9sbGVyJywgUmVjdXJyZW5jZUNvbnRyb2xsZXIpO1xyXG5cclxuXHRSZWN1cnJlbmNlQ29udHJvbGxlci4kaW5qZWN0ID0gWydyZWN1cnJlbmNlTW9kYWxTZXJ2aWNlJ107XHJcblx0ZnVuY3Rpb24gUmVjdXJyZW5jZUNvbnRyb2xsZXIocmVjdXJyZW5jZU1vZGFsU2VydmljZSkge1xyXG5cdFx0dmFyIHJjID0gdGhpcztcclxuXHRcdHJjLnNob3dSZWN1cnJlbmNlTW9kYWwgPSBzaG93UmVjdXJyZW5jZU1vZGFsO1xyXG5cclxuXHRcdGZ1bmN0aW9uIHNob3dSZWN1cnJlbmNlTW9kYWwoKSB7XHJcblx0XHRcdGlmIChyYy5pdGVtLnJlY3VycmVuY2UpIHtcclxuXHRcdFx0XHRyZWN1cnJlbmNlTW9kYWxTZXJ2aWNlLm9wZW5SZWN1cnJlbmNlTW9kYWwocmMuaXRlbSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmRpcmVjdGl2ZSgnc3BSZXBlYXQnLCByZWN1cnJlbmNlRGlyZWN0aXZlKTtcclxuXHJcblx0ZnVuY3Rpb24gcmVjdXJyZW5jZURpcmVjdGl2ZSgpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHRlbXBsYXRlVXJsOiAnbW9kdWxlcy9yZWN1cnJlbmNlL3JlY3VycmVuY2UuaHRtbCcsXHJcblx0XHRcdGNvbnRyb2xsZXI6ICdSZWN1cnJlbmNlQ29udHJvbGxlcicsXHJcblx0XHRcdGNvbnRyb2xsZXJBczogJ3JjJyxcclxuXHRcdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcclxuXHRcdFx0c2NvcGU6IHtcclxuXHRcdFx0XHRpdGVtOiAnPSdcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHR9XHJcbn0pKCk7XG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmZhY3RvcnkoJ3JlY3VycmVuY2VTZXJ2aWNlJywgcmVjdXJyZW5jZVNlcnZpY2UpO1xyXG5cclxuXHRmdW5jdGlvbiByZWN1cnJlbmNlU2VydmljZSgpIHtcclxuXHRcdHZhciByZWN1cnJlbmNlQ29scyA9IHtcclxuXHRcdFx0ZnJlcTogWydob3VybHknLCAnZGFpbHknLCAnd2Vla2x5JywgJ21vbnRobHknLCAneWVhcmx5J10sXHJcblx0XHRcdGRheXM6IFsnbW8nLCAndHUnLCAnd2UnLCAndGgnLCAnZnInLCAnc2EnLCAnc3UnXSxcclxuXHRcdFx0Ynk6IFsnYnlfaG91cicsICdieV9kYXknLCAnYnlfbW9udGhfZGF5JywgJ2J5X3llYXJfZGF5JywgJ2J5X3dlZWtfbm8nLCAnYnlfbW9udGgnXVxyXG5cdFx0fTtcclxuXHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRjbGVhclJlY3VycmVuY2U6IGNsZWFyUmVjdXJyZW5jZSxcclxuXHRcdFx0Y29uc3RydWN0UmVjdXJyZW5jZTogY29uc3RydWN0UmVjdXJyZW5jZVxyXG5cdFx0fTtcclxuXHJcblx0XHRmdW5jdGlvbiBjbGVhclJlY3VycmVuY2UoaXRlbSkge1xyXG5cdFx0XHRpdGVtLnJlY3VycmVuY2UgPSBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBjb25zdHJ1Y3RSZWN1cnJlbmNlKGl0ZW0pIHtcclxuXHJcblx0XHR9XHJcblx0fVxyXG59KSgpO1xyXG5cbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuY29udHJvbGxlcignVGFza3NDb250cm9sbGVyJywgVGFza3NDb250cm9sbGVyKTtcclxuXHJcblx0VGFza3NDb250cm9sbGVyLiRpbmplY3QgPSBbJyRyb290U2NvcGUnLCAndGFza3NTZXJ2aWNlJywgJ2xhYmVsU2VydmljZScsICd0YXNrTW9kYWxTZXJ2aWNlJ107XHJcblx0ZnVuY3Rpb24gVGFza3NDb250cm9sbGVyKCRyb290U2NvcGUsIHRhc2tzU2VydmljZSwgbGFiZWxTZXJ2aWNlLCB0YXNrTW9kYWxTZXJ2aWNlKSB7XHJcblx0XHR2YXIgdm0gPSB0aGlzO1xyXG5cdFx0dm0ubGFiZWxzID0gW107XHJcblx0XHR2bS50YXNrcyA9IFtdO1xyXG5cdFx0dm0uc2hvd1Rhc2tNb2RhbCA9IHNob3dUYXNrTW9kYWw7XHJcblx0XHR2bS50b2dnbGVDb21wbGV0ZWQgPSB0b2dnbGVDb21wbGV0ZWQ7XHJcblxyXG5cdFx0YWN0aXZhdGUoKTtcclxuXHJcblx0XHRmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcclxuXHRcdFx0dXBkYXRlTGFiZWxzKCk7XHJcblx0XHRcdHVwZGF0ZVRhc2tzKCk7XHJcblxyXG5cdFx0XHQkcm9vdFNjb3BlLiRvbigndXBkYXRlTGFiZWxzJywgdXBkYXRlTGFiZWxzKTtcclxuXHRcdFx0JHJvb3RTY29wZS4kb24oJ3VwZGF0ZVRhc2tzJywgdXBkYXRlVGFza3MpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIHNob3dUYXNrTW9kYWwodGFzaykge1xyXG5cdFx0XHR0YXNrTW9kYWxTZXJ2aWNlLm9wZW5UYXNrTW9kYWwodGFzaywgdm0ubGFiZWxzKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiB0b2dnbGVDb21wbGV0ZWQodGFzaykge1xyXG5cdFx0XHR0YXNrc1NlcnZpY2UudG9nZ2xlQ29tcGxldGVkKHRhc2spO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIHVwZGF0ZUxhYmVscygpIHtcclxuXHRcdFx0dm0ubGFiZWxzID0gbGFiZWxTZXJ2aWNlLmdldExhYmVscygpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIHVwZGF0ZVRhc2tzKCkge1xyXG5cdFx0XHR2bS50YXNrcyA9IHRhc2tzU2VydmljZS5nZXRUYXNrcygpO1xyXG5cdFx0fVxyXG5cdH1cclxufSkoKTtcbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuZGlyZWN0aXZlKCdzcFRhc2tzJywgdGFza3NEaXJlY3RpdmUpO1xyXG5cclxuXHRmdW5jdGlvbiB0YXNrc0RpcmVjdGl2ZSgpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHRlbXBsYXRlVXJsOiAnbW9kdWxlcy90YXNrcy90YXNrcy5odG1sJyxcclxuXHRcdFx0Y29udHJvbGxlcjogJ1Rhc2tzQ29udHJvbGxlcicsXHJcblx0XHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcclxuXHRcdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcclxuXHRcdFx0c2NvcGU6IHtcclxuXHRcdFx0XHRvcmRlcjogJz0nLFxyXG5cdFx0XHRcdGRheXM6ICc9d2l0aGluRGF5cycsXHJcblx0XHRcdFx0aW5MYWJlbHM6ICc9aW5Hcm91cHMnXHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0fVxyXG59KSgpO1xuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5mYWN0b3J5KCd0YXNrc1NlcnZpY2UnLCB0YXNrc1NlcnZpY2UpO1xyXG5cclxuXHR0YXNrc1NlcnZpY2UuJGluamVjdCA9IFsnY3J1ZFNlcnZpY2UnLCAnY2FjaGVTZXJ2aWNlJ107XHJcblx0ZnVuY3Rpb24gdGFza3NTZXJ2aWNlKGNydWRTZXJ2aWNlLCBjYWNoZVNlcnZpY2UpIHtcclxuXHRcdHZhciB2bSA9IHRoaXM7ICAvLyBqc2hpbnQgaWdub3JlOmxpbmVcclxuXHRcdHZtLnRhc2sgPSBuZXcgY3J1ZFNlcnZpY2UoJ3Rhc2snKTtcclxuXHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRjcmVhdGVUYXNrOiBjcmVhdGVUYXNrLFxyXG5cdFx0XHRjcmVhdGVPclVwZGF0ZVRhc2s6IGNyZWF0ZU9yVXBkYXRlVGFzayxcclxuXHRcdFx0ZGVsZXRlVGFzazogZGVsZXRlVGFzayxcclxuXHRcdFx0Z2V0VGFza3M6IGdldFRhc2tzLFxyXG5cdFx0XHR0b2dnbGVDb21wbGV0ZWQ6IHRvZ2dsZUNvbXBsZXRlZCxcclxuXHRcdFx0dXBkYXRlVGFzazogdXBkYXRlVGFza1xyXG5cdFx0fTtcclxuXHJcblx0XHRmdW5jdGlvbiBjcmVhdGVUYXNrKHRhc2spIHtcclxuXHRcdFx0cmV0dXJuIHZtLnRhc2suY3JlYXRlKHRhc2spLnRoZW4ocHJvbWlzZUNvbXBsZXRlKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBjcmVhdGVPclVwZGF0ZVRhc2sodGFzaykge1xyXG5cdFx0XHRpZiAoIXRhc2sudGFza19pZCkge1xyXG5cdFx0XHRcdHJldHVybiBjcmVhdGVUYXNrKHRhc2spO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiB1cGRhdGVUYXNrKHRhc2sudGFza19pZCwgdGFzayk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gZGVsZXRlVGFzayhpZCkge1xyXG5cdFx0XHRyZXR1cm4gdm0udGFzay5yZW1vdmUoaWQpLnRoZW4ocHJvbWlzZUNvbXBsZXRlKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBnZXRUYXNrcygpIHtcclxuXHRcdFx0cmV0dXJuIGNhY2hlU2VydmljZS5nZXRUYXNrcygpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIHRvZ2dsZUNvbXBsZXRlZCh0YXNrKSB7XHJcblx0XHRcdHRhc2suY29tcGxldGVkID0gIXBhcnNlSW50KHRhc2suY29tcGxldGVkKTtcclxuXHRcdFx0cmV0dXJuIHVwZGF0ZVRhc2sodGFzay50YXNrX2lkLCB0YXNrKS50aGVuKGdldFRhc2tzKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiB1cGRhdGVUYXNrKGlkLCB0YXNrKSB7XHJcblx0XHRcdHJldHVybiB2bS50YXNrLnVwZGF0ZShpZCwgdGFzaykudGhlbihwcm9taXNlQ29tcGxldGUpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIHByb21pc2VDb21wbGV0ZShyZXNwb25zZSkge1xyXG5cdFx0XHR2YXIgcmVzID0gcmVzcG9uc2UuZGF0YTtcclxuXHRcdFx0aWYgKHJlcy5zdWNjZXNzKSB7XHJcblx0XHRcdFx0Y2FjaGVTZXJ2aWNlLmNhY2hlVGFza3MoKTtcclxuXHRcdFx0XHRyZXR1cm4gcmVzLmRhdGE7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJlcy50aXRsZTtcclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XHJcblxuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5jb250cm9sbGVyKCdVcGxvYWRDb250cm9sbGVyJywgVXBsb2FkQ29udHJvbGxlcik7XHJcblxyXG5cdFVwbG9hZENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRodHRwJywgJ3VwbG9hZFNlcnZpY2UnXTtcclxuXHRmdW5jdGlvbiBVcGxvYWRDb250cm9sbGVyKCRzY29wZSwgJGh0dHAsIHVwbG9hZFNlcnZpY2UpIHtcclxuXHRcdHZhciB1YyA9IHRoaXM7XHJcblx0XHR1Yy51cGxvYWRGaWxlID0gdXBsb2FkRmlsZTtcclxuXHJcblx0XHRmdW5jdGlvbiB1cGxvYWRGaWxlKGZpbGUsIG9sZEZpbGUpIHtcclxuXHRcdFx0cmV0dXJuIHVwbG9hZFNlcnZpY2UudXBsb2FkRmlsZShmaWxlKVxyXG5cdFx0XHRcdC50aGVuKGZ1bmN0aW9uKGZpbGVQYXRoKSB7IHJldHVybiBmaWxlUGF0aDsgfSk7XHJcblx0XHR9XHJcblx0fVxyXG59KSgpO1xuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5kaXJlY3RpdmUoJ3NwRmlsZUNoYW5nZScsIHVwbG9hZERpcmVjdGl2ZSk7XHJcblxyXG5cdHVwbG9hZERpcmVjdGl2ZS4kaW5qZWN0ID0gWyckcGFyc2UnXTtcclxuXHRmdW5jdGlvbiB1cGxvYWREaXJlY3RpdmUoJHBhcnNlKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRyZXN0cmljdDogJ0EnLFxyXG5cdFx0XHRjb250cm9sbGVyOiAnVXBsb2FkQ29udHJvbGxlcicsXHJcblx0XHRcdGNvbnRyb2xsZXJBczogJ3VjJyxcclxuXHRcdFx0bGluazogbGluayxcclxuXHRcdFx0c2NvcGU6IHtcclxuXHRcdFx0XHRzcEZpbGVDaGFuZ2U6ICc9JyxcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHJcblx0XHRmdW5jdGlvbiBsaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xyXG5cdFx0XHR2YXIgbWF4RmlsZVNpemUgPSAyICogMTAyNCAqIDEwMjQ7XHJcblx0XHRcdHZhciBmaWxlTW9kZWwgPSAkcGFyc2UoYXR0cnMuc3BGaWxlQ2hhbmdlKTtcclxuXHRcdFx0ZWxlbWVudFswXS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmaWxlSGFuZGxlciwgZmFsc2UpO1xyXG5cclxuXHRcdFx0ZnVuY3Rpb24gZmlsZUhhbmRsZXIoZXZlbnQpIHtcclxuXHRcdFx0XHRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHR2YXIgZmlsZSA9IGVsZW1lbnRbMF0uZmlsZXNbMF07XHJcblxyXG5cdFx0XHRcdFx0aWYgKGZpbGUuc2l6ZSA8PSBtYXhGaWxlU2l6ZSkge1xyXG5cdFx0XHRcdFx0XHRzY29wZS51Yy51cGxvYWRGaWxlKGZpbGUpXHJcblx0XHRcdFx0XHRcdFx0LnRoZW4oZnVuY3Rpb24oZmlsZVBhdGgpIHsgc2NvcGUuc3BGaWxlQ2hhbmdlID0gZmlsZVBhdGg7IH0pO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0YWxlcnQoXCJGaWxlIG11c3QgYmUgbGVzcyB0aGFuIFwiICsgKG1heEZpbGVTaXplIC8gMTAyNCAvIDEwMjQpICsgXCJNQi5cIik7Ly8ganNoaW50IGlnbm9yZTpsaW5lXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmZhY3RvcnkoJ3VwbG9hZFNlcnZpY2UnLCB1cGxvYWRTZXJ2aWNlKTtcclxuXHJcblx0dXBsb2FkU2VydmljZS4kaW5qZWN0ID0gWyckaHR0cCcsICckbG9nJ107XHJcblx0ZnVuY3Rpb24gdXBsb2FkU2VydmljZSgkaHR0cCwgJGxvZykge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0dXBsb2FkRmlsZTogdXBsb2FkRmlsZVxyXG5cdFx0fTtcclxuXHJcblx0XHRmdW5jdGlvbiB1cGxvYWRGaWxlKGZpbGUpIHtcclxuXHRcdFx0dmFyIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XHJcblx0XHRcdGZvcm1EYXRhLmFwcGVuZCgnZmlsZScsIGZpbGUpO1xyXG5cclxuXHRcdFx0cmV0dXJuICRodHRwLnBvc3QoJ2FwaS91cGxvYWQvdXBsb2FkTWFuYWdlci5waHAnLCBmb3JtRGF0YSwge1xyXG5cdFx0XHRcdHRyYW5zZm9ybVJlcXVlc3Q6IGFuZ3VsYXIuaWRlbnRpdHksXHJcblx0XHRcdFx0aGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogdW5kZWZpbmVkIH1cclxuXHRcdFx0fSlcclxuXHRcdFx0XHQudGhlbihmdW5jdGlvbihyZXMpIHtcclxuXHRcdFx0XHRcdGlmIChyZXMuZGF0YS5zdWNjZXNzKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiByZXMuZGF0YS5kYXRhO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0JGxvZy5lcnJvcihyZXMudGl0bGUpO1xyXG5cdFx0XHRcdFx0cmV0dXJuICcnO1xyXG5cdFx0XHRcdH0pXHJcblx0XHRcdFx0LmNhdGNoKGZ1bmN0aW9uKHJlcykge1xyXG5cdFx0XHRcdFx0JGxvZy5lcnJvcihyZXMpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdH1cclxufSkoKTtcbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuZmFjdG9yeSgnYWNjZXNzU2VydmljZScsIGFjY2Vzc1NlcnZpY2UpO1xyXG5cclxuXHRhY2Nlc3NTZXJ2aWNlLiRpbmplY3QgPSBbJyRxJywgJ3Nlc3Npb25TZXJ2aWNlJywgJ3N0YXR1c1NlcnZpY2UnXTtcclxuXHRmdW5jdGlvbiBhY2Nlc3NTZXJ2aWNlKCRxLCBzZXNzaW9uU2VydmljZSwgc3RhdHVzU2VydmljZSkge1xyXG5cdFx0dmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcclxuXHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRpc0F1dGhlbnRpY2F0ZWQ6IGlzQXV0aGVudGljYXRlZCxcclxuXHRcdFx0aXNBZG1pbjogaXNBZG1pblxyXG5cdFx0fTtcclxuXHJcblx0XHRmdW5jdGlvbiBpc0F1dGhlbnRpY2F0ZWQoKSB7XHJcblx0XHRcdHJldHVybiBzZXNzaW9uU2VydmljZS5nZXRWYXIoJ25hbWUnKVxyXG5cdFx0XHRcdC50aGVuKGlzQXV0aGVudGljYXRlZENvbXBsZXRlKTtcclxuXHJcblx0XHRcdGZ1bmN0aW9uIGlzQXV0aGVudGljYXRlZENvbXBsZXRlKHJlc3BvbnNlKSB7XHJcblx0XHRcdFx0aWYgKHJlc3BvbnNlLmRhdGEuc3VjY2VzcyAhPT0gZmFsc2UpIHtcclxuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmUoc3RhdHVzU2VydmljZS5PSyk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdChzdGF0dXNTZXJ2aWNlLlVOQVVUSE9SSVpFRCk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGlzQWRtaW4oKSB7XHJcblx0XHRcdHJldHVybiBzZXNzaW9uU2VydmljZS5nZXRWYXIoJ2FkbWluJylcclxuXHRcdFx0XHQudGhlbihpc0FkbWluQ29tcGxldGUpO1xyXG5cclxuXHRcdFx0ZnVuY3Rpb24gaXNBZG1pbkNvbXBsZXRlKHJlc3BvbnNlKSB7XHJcblx0XHRcdFx0dmFyIHJlc3VsdCA9IHJlc3BvbnNlLmRhdGE7XHJcblx0XHRcdFx0aWYgKHJlc3VsdC5zdWNjZXNzICE9PSBmYWxzZSAmJiByZXN1bHQuZGF0YSA9PSAxKSB7XHJcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlKHN0YXR1c1NlcnZpY2UuT0spO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3Qoc3RhdHVzU2VydmljZS5GT1JCSURERU4pO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cmV0dXJuIGRlZmVycmVkLnByb21pc2U7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XHJcblxuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0LyoqXHJcblx0KiBTdGF0dXMgY29kZXMgdXNlZCB3aGVuIGFjY2Vzc2luZyB2YXJpb3VzIHBhZ2VzIGluIHRoZSBhcHAuXHJcblx0Ki9cclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5zZXJ2aWNlKCdzdGF0dXNTZXJ2aWNlJywgc3RhdHVzU2VydmljZSk7XHJcblxyXG5cdGZ1bmN0aW9uIHN0YXR1c1NlcnZpY2UoKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRPSzogMjAwLFxyXG5cdFx0XHRVTkFVVEhPUklaRUQ6IDQwMSxcclxuXHRcdFx0Rk9SQklEREVOOiA0MDNcclxuXHRcdH07XHJcblx0fVxyXG59KSgpO1xyXG5cbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuY29udHJvbGxlcignQWRtaW5Db250cm9sbGVyJywgQWRtaW5Db250cm9sbGVyKTtcclxuXHJcblx0QWRtaW5Db250cm9sbGVyLiRpbmplY3QgPSBbJ3VzZXJzJywgJ3VzZXJTZXJ2aWNlJywgJ3VzZXJNb2RhbFNlcnZpY2UnXTtcclxuXHRmdW5jdGlvbiBBZG1pbkNvbnRyb2xsZXIodXNlcnMsIHVzZXJTZXJ2aWNlLCB1c2VyTW9kYWxTZXJ2aWNlKSB7XHJcblx0XHR2YXIgdm0gPSB0aGlzO1xyXG5cdFx0dm0udXNlcnMgPSB1c2VycztcclxuXHRcdHZtLnNob3dVc2VyTW9kYWwgPSBzaG93VXNlck1vZGFsO1xyXG5cclxuXHRcdGFjdGl2YXRlKCk7XHJcblxyXG5cdFx0ZnVuY3Rpb24gYWN0aXZhdGUoKSB7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gZ2V0VXNlcnMoKSB7XHJcblx0XHRcdHVzZXJTZXJ2aWNlLmdldFVzZXJzKCkudGhlbihmdW5jdGlvbihyZXNwb25zZSkgeyB2bS51c2VycyA9IHJlc3BvbnNlOyB9KTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBzaG93VXNlck1vZGFsKHVzZXIpIHtcclxuXHRcdFx0dXNlck1vZGFsU2VydmljZS5vcGVuVXNlck1vZGFsKHVzZXIpXHJcblx0XHRcdFx0LnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHsgaWYgKHJlc3BvbnNlKSB2bS51c2VycyA9IHJlc3BvbnNlOyB9KTtcclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmNvbnRyb2xsZXIoJ0xvZ2luQ29udHJvbGxlcicsIExvZ2luQ29udHJvbGxlcik7XHJcblxyXG5cdExvZ2luQ29udHJvbGxlci4kaW5qZWN0ID0gWydsb2dpblNlcnZpY2UnXTtcclxuXHRmdW5jdGlvbiBMb2dpbkNvbnRyb2xsZXIobG9naW5TZXJ2aWNlKSB7XHJcblx0XHR2YXIgdm0gPSB0aGlzO1xyXG5cdFx0dm0ubG9hZGluZyA9IGZhbHNlO1xyXG5cdFx0dm0uZXJyb3IgPSAnJztcclxuXHJcblx0XHR2bS5sb2dpbiA9IGxvZ2luO1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0KiBMb2dpblNlcnZpY2Ugd2lsbCByZWRpcmVjdCBpZiB0aGVyZSBpcyBubyBlcnJvci4gVGh1cywgdGhlcmUncyBvbmx5IGFcclxuXHRcdCogbmVlZCB0byByZXR1cm4gYSBwcm9taXNlIGlmIHRoZXJlJ3MgYW4gZXJyb3IuXHJcblx0XHQqL1xyXG5cdFx0ZnVuY3Rpb24gbG9naW4oKSB7XHJcblx0XHRcdHZtLmxvYWRpbmcgPSB0cnVlO1xyXG5cdFx0XHRsb2dpblNlcnZpY2UubG9naW4odm0udXNlcilcclxuXHRcdFx0XHQudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xyXG5cdFx0XHRcdFx0dm0ubG9hZGluZyA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0dm0uZXJyb3IgPSByZXNwb25zZTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmZhY3RvcnkoJ2xvZ2luU2VydmljZScsIGxvZ2luU2VydmljZSk7XHJcblxyXG5cdGxvZ2luU2VydmljZS4kaW5qZWN0ID0gWyckcm9vdFNjb3BlJywgJyRodHRwJywgJyRzdGF0ZScsICckbG9nJywgJ2NhY2hlU2VydmljZSddO1xyXG5cdGZ1bmN0aW9uIGxvZ2luU2VydmljZSgkcm9vdFNjb3BlLCAkaHR0cCwgJHN0YXRlLCAkbG9nLCBjYWNoZVNlcnZpY2UpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGxvZ2luOiBsb2dpblxyXG5cdFx0fTtcclxuXHJcblx0XHRmdW5jdGlvbiBsb2dpbih1c2VyKSB7XHJcblx0XHRcdHVzZXIubmFtZSA9IHVzZXIubmFtZS50b0xvd2VyQ2FzZSgpLnRyaW0oKTtcclxuXHJcblx0XHRcdHJldHVybiAkaHR0cC5wb3N0KCdhcGkvdXNlci9sb2dpbk1hbmFnZXIucGhwJywgdXNlcilcclxuXHRcdFx0XHQudGhlbihsb2dpbkNvbXBsZXRlKVxyXG5cdFx0XHRcdC5jYXRjaChsb2dpbkZhaWxlZCk7XHJcblxyXG5cdFx0XHRmdW5jdGlvbiBsb2dpbkNvbXBsZXRlKHJlc3BvbnNlKSB7XHJcblx0XHRcdFx0aWYgKHJlc3BvbnNlLmRhdGEuc3VjY2VzcyA9PT0gZmFsc2UpIHtcclxuXHRcdFx0XHRcdHJldHVybiByZXNwb25zZS5kYXRhLnRpdGxlO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Y2FjaGVTZXJ2aWNlLmNhY2hlQWxsKCk7XHJcblx0XHRcdFx0JHJvb3RTY29wZS4kYnJvYWRjYXN0KCd1cGRhdGVVc2VyJyk7XHJcblx0XHRcdFx0JHN0YXRlLmdvKCdkYXNoYm9hcmQnKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZnVuY3Rpb24gbG9naW5GYWlsZWQoZXJyb3IpIHtcclxuXHRcdFx0XHQkbG9nLmVycm9yKGVycm9yKTtcclxuXHRcdFx0XHRyZXR1cm4gJ1NvbWV0aGluZyB3ZW50IHdyb25nLiBQbGVhc2UgdHJ5IGFnYWluLic7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XHJcblxuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5jb250cm9sbGVyKCdSZWdpc3RlckNvbnRyb2xsZXInLCBSZWdpc3RlckNvbnRyb2xsZXIpO1xyXG5cclxuXHRSZWdpc3RlckNvbnRyb2xsZXIuJGluamVjdCA9IFsncmVnaXN0ZXJTZXJ2aWNlJ107XHJcblx0ZnVuY3Rpb24gUmVnaXN0ZXJDb250cm9sbGVyKHJlZ2lzdGVyU2VydmljZSkge1xyXG5cdFx0dmFyIHZtID0gdGhpcztcclxuXHRcdHZtLmVycm9yID0gJyc7XHJcblx0XHR2bS5sb2FkaW5nID0gZmFsc2U7XHJcblx0XHR2bS5yZWdpc3RlciA9IHJlZ2lzdGVyO1xyXG5cclxuXHRcdGZ1bmN0aW9uIHJlZ2lzdGVyKCkge1xyXG5cdFx0XHR2bS5sb2FkaW5nID0gdHJ1ZTtcclxuXHRcdFx0cmVnaXN0ZXJTZXJ2aWNlLnJlZ2lzdGVyKHZtLnVzZXIpXHJcblx0XHRcdFx0LnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuXHRcdFx0XHRcdHZtLmxvYWRpbmcgPSBmYWxzZTtcclxuXHRcdFx0XHRcdHZtLmVycm9yID0gcmVzcG9uc2U7XHJcblx0XHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fVxyXG59KSgpO1xuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5mYWN0b3J5KCdyZWdpc3RlclNlcnZpY2UnLCByZWdpc3RlclNlcnZpY2UpO1xyXG5cclxuXHRyZWdpc3RlclNlcnZpY2UuJGluamVjdCA9IFsnJGxvY2F0aW9uJywgJyRsb2cnLCAnY3J1ZFNlcnZpY2UnXTtcclxuXHRmdW5jdGlvbiByZWdpc3RlclNlcnZpY2UoJGxvY2F0aW9uLCAkbG9nLCBjcnVkU2VydmljZSkge1xyXG5cdFx0dmFyIHZtID0gdGhpczsgIC8vIGpzaGludCBpZ25vcmU6bGluZVxyXG5cdFx0dm0uY3J1ZCA9IG5ldyBjcnVkU2VydmljZSgndXNlcicpO1xyXG5cclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHJlZ2lzdGVyOiByZWdpc3RlclxyXG5cdFx0fTtcclxuXHJcblx0XHRmdW5jdGlvbiByZWdpc3Rlcih1c2VyKSB7XHJcblx0XHRcdHVzZXIubmFtZSA9IHVzZXIubmFtZS50b0xvd2VyQ2FzZSgpLnRyaW0oKTtcclxuXHJcblx0XHRcdHJldHVybiB2bS5jcnVkLmNyZWF0ZSh1c2VyKVxyXG5cdFx0XHRcdC50aGVuKHJlZ2lzdHJhdGlvbkNvbXBsZXRlKTtcclxuXHJcblx0XHRcdGZ1bmN0aW9uIHJlZ2lzdHJhdGlvbkNvbXBsZXRlKHJlc3BvbnNlKSB7XHJcblx0XHRcdFx0aWYgKHJlc3BvbnNlLnN1Y2Nlc3MgPT09ICdmYWxzZScpIHtcclxuXHRcdFx0XHRcdCRsb2cuZXJyb3IocmVzcG9uc2UudGl0bGUpO1xyXG5cdFx0XHRcdFx0cmV0dXJuIHJlc3BvbnNlLnRpdGxlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHQkbG9jYXRpb24udXJsKCcvbG9naW4nKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxufSkoKTtcbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuY29udHJvbGxlcignTGFiZWxQYWdlQ29udHJvbGxlcicsIExhYmVsUGFnZUNvbnRyb2xsZXIpO1xyXG5cclxuXHRMYWJlbFBhZ2VDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzdGF0ZVBhcmFtcyddO1xyXG5cdGZ1bmN0aW9uIExhYmVsUGFnZUNvbnRyb2xsZXIoJHN0YXRlUGFyYW1zKSB7XHJcblx0XHR0aGlzLmxhYmVsSWQgPSAkc3RhdGVQYXJhbXMubGFiZWxJZDtcclxuXHR9XHJcbn0pKCk7XG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmZhY3RvcnkoJ2NhbGVuZGFyU2VydmljZScsIGNhbGVuZGFyU2VydmljZSk7XHJcblxyXG5cdGNhbGVuZGFyU2VydmljZS4kaW5qZWN0ID0gWydjcnVkU2VydmljZScsICdjYWNoZVNlcnZpY2UnXTtcclxuXHRmdW5jdGlvbiBjYWxlbmRhclNlcnZpY2UoY3J1ZFNlcnZpY2UsIGNhY2hlU2VydmljZSkge1xyXG5cdFx0dmFyIHZtID0gdGhpczsgIC8vIGpzaGludCBpZ25vcmU6bGluZVxyXG5cdFx0dm0uY2FsZW5kYXIgPSBuZXcgY3J1ZFNlcnZpY2UoJ2NhbGVuZGFyJyk7XHJcblxyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0Y3JlYXRlQ2FsZW5kYXI6IGNyZWF0ZUNhbGVuZGFyLFxyXG5cdFx0XHRkZWxldGVDYWxlbmRhcjogZGVsZXRlQ2FsZW5kYXIsXHJcblx0XHRcdGdldENhbGVuZGFyczogZ2V0Q2FsZW5kYXJzLFxyXG5cdFx0XHR1cGRhdGVDYWxlbmRhcjogdXBkYXRlQ2FsZW5kYXJcclxuXHRcdH07XHJcblxyXG5cdFx0ZnVuY3Rpb24gY3JlYXRlQ2FsZW5kYXIoY2FsZW5kYXIpIHtcclxuXHRcdFx0cmV0dXJuIHZtLmNhbGVuZGFyLmNyZWF0ZShjYWxlbmRhcikudGhlbihwcm9taXNlQ29tcGxldGUpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGRlbGV0ZUNhbGVuZGFyKGlkKSB7XHJcblx0XHRcdHJldHVybiB2bS5jYWxlbmRhci5yZW1vdmUoaWQpLnRoZW4ocHJvbWlzZUNvbXBsZXRlKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBnZXRDYWxlbmRhcnMoKSB7XHJcblx0XHRcdHJldHVybiBjYWNoZVNlcnZpY2UuZ2V0Q2FsZW5kYXJzKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gdXBkYXRlQ2FsZW5kYXIoaWQsIGNhbGVuZGFyKSB7XHJcblx0XHRcdHJldHVybiB2bS5jYWxlbmRhci51cGRhdGUoaWQsIGNhbGVuZGFyKS50aGVuKHByb21pc2VDb21wbGV0ZSk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gcHJvbWlzZUNvbXBsZXRlKHJlc3BvbnNlKSB7XHJcblx0XHRcdHZhciByZXN1bHQgPSByZXNwb25zZS5kYXRhO1xyXG5cdFx0XHRpZiAocmVzdWx0LnN1Y2Nlc3MpIHtcclxuXHRcdFx0XHRjYWNoZVNlcnZpY2UuY2FjaGVDYWxlbmRhcnMoKTtcclxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0LmRhdGE7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJlc3VsdC50aXRsZTtcclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XHJcblxuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5mYWN0b3J5KCdldmVudE1vZGFsU2VydmljZScsIGV2ZW50TW9kYWxTZXJ2aWNlKTtcclxuXHJcblx0ZXZlbnRNb2RhbFNlcnZpY2UuJGluamVjdCA9IFsnJHVpYk1vZGFsJywgJ21vbWVudCcsICdldmVudHNTZXJ2aWNlJywgJ2Zvcm1hdFNlcnZpY2UnXTtcclxuXHRmdW5jdGlvbiBldmVudE1vZGFsU2VydmljZSgkdWliTW9kYWwsIG1vbWVudCwgZXZlbnRzU2VydmljZSwgZm9ybWF0U2VydmljZSkge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0b3BlbkV2ZW50TW9kYWw6IG9wZW5FdmVudE1vZGFsLFxyXG5cdFx0XHR0b2dnbGVBbGxEYXk6IHRvZ2dsZUFsbERheVxyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCogV2l0aG91dCBjbG9uaW5nIHRoZSBldmVudCwgYW55IGNoYW5nZXMgbWFkZSBpbiB0aGUgbW9kYWwgd2lsbCBiZSByZWZsZWN0ZWRcclxuXHRcdCogaW4gdGhlIG1haW4gd2luZG93IHJlZ2FyZGxlc3Mgb2YgaWYgdGhlIGNoYW5nZXMgd2VyZSBzYXZlZCBvciBub3QsIHdoaWNoXHJcblx0XHQqIG1lYW5zIGEgdXNlciB3b3VsZCBub3QgYmUgYWJsZSB0byBjYW5jZWwgdGhlaXIgY2hhbmdlcyB1bmxlc3MgdGhleSByZWZyZXNoLlxyXG5cdFx0Ki9cclxuXHRcdGZ1bmN0aW9uIG9wZW5FdmVudE1vZGFsKGV2ZW50LCBjYWxlbmRhcnMpIHtcclxuXHRcdFx0dmFyIGNsb25lZEV2ZW50ID0ge307XHJcblx0XHRcdGFuZ3VsYXIuZXh0ZW5kKGNsb25lZEV2ZW50LCBldmVudCk7XHJcblx0XHRcdGZvcm1hdFNlcnZpY2UuZm9ybWF0Rm9yRGlzcGxheShjbG9uZWRFdmVudCk7XHJcblxyXG5cdFx0XHRyZXR1cm4gJHVpYk1vZGFsLm9wZW4oe1xyXG5cdFx0XHRcdGNvbnRyb2xsZXI6ICdNb2RhbENvbnRyb2xsZXInLFxyXG5cdFx0XHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcclxuXHRcdFx0XHR0ZW1wbGF0ZVVybDogJ21vZHVsZXMvZXZlbnRzL21vZGFsL2V2ZW50Lm1vZGFsLmh0bWwnLFxyXG5cdFx0XHRcdHJlc29sdmU6IHtcclxuXHRcdFx0XHRcdGdyb3VwczogZnVuY3Rpb24oKSB7IHJldHVybiBjYWxlbmRhcnM7IH0sXHJcblx0XHRcdFx0XHRpdGVtOiBjbG9uZWRFdmVudFxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSkucmVzdWx0XHJcblx0XHRcdFx0LnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuXHRcdFx0XHRcdGZvcm1hdFNlcnZpY2UuZm9ybWF0Rm9yU3RvcmFnZShyZXNwb25zZSk7XHJcblx0XHRcdFx0XHRyZXR1cm4gZXZlbnRzU2VydmljZS5jcmVhdGVPclVwZGF0ZUV2ZW50KHJlc3BvbnNlKVxyXG5cdFx0XHRcdFx0XHQudGhlbihldmVudHNTZXJ2aWNlLmdldEV2ZW50cyk7XHJcblx0XHRcdFx0fSwgZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuXHRcdFx0XHRcdGlmIChOdW1iZXIocmVzcG9uc2UpKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiBldmVudHNTZXJ2aWNlLmRlbGV0ZUV2ZW50KHJlc3BvbnNlKVxyXG5cdFx0XHRcdFx0XHRcdC50aGVuKGV2ZW50c1NlcnZpY2UuZ2V0RXZlbnRzKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiB0b2dnbGVBbGxEYXkoZXZlbnQpIHtcclxuXHRcdFx0dmFyIGRpc3BsYXkgPSBmb3JtYXRTZXJ2aWNlLmdldERpc3BsYXlGb3JtYXQoKTtcclxuXHJcblx0XHRcdGlmIChldmVudC5hbGxfZGF5KSB7XHJcblx0XHRcdFx0ZXZlbnQuZHRfc3RhcnQgPSBmb3JtYXRTZXJ2aWNlLnRvRGlzcGxheUZvcm1hdChtb21lbnQoZXZlbnQuZHRfc3RhcnQsIGRpc3BsYXkpLnN0YXJ0T2YoJ2RheScpKTtcclxuXHRcdFx0XHRldmVudC5kdF9lbmQgPSBmb3JtYXRTZXJ2aWNlLnRvRGlzcGxheUZvcm1hdChtb21lbnQoZXZlbnQuZHRfc3RhcnQsIGRpc3BsYXkpLmVuZE9mKCdkYXknKSk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dmFyIGN1cnJlbnRIb3VyID0gbW9tZW50KCkuc3RhcnRPZignaG91cicpLmhvdXIoKTtcclxuXHRcdFx0XHRldmVudC5kdF9zdGFydCA9IGZvcm1hdFNlcnZpY2UudG9EaXNwbGF5Rm9ybWF0KG1vbWVudChldmVudC5kdF9zdGFydCwgZGlzcGxheSkuaG91cihjdXJyZW50SG91cikpO1xyXG5cdFx0XHRcdGV2ZW50LmR0X2VuZCA9IGZvcm1hdFNlcnZpY2UudG9EaXNwbGF5Rm9ybWF0KG1vbWVudChldmVudC5kdF9zdGFydCwgZGlzcGxheSkuaG91cihjdXJyZW50SG91cikuYWRkKDEsICdob3VycycpKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxufSkoKTtcclxuXG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmZhY3RvcnkoJ2NhbGVuZGFyV2lkZ2V0U2VydmljZScsIGNhbGVuZGFyV2lkZ2V0U2VydmljZSk7XHJcblxyXG5cdGNhbGVuZGFyV2lkZ2V0U2VydmljZS4kaW5qZWN0ID0gWydtb21lbnQnLCAnZXZlbnRNb2RhbFNlcnZpY2UnXTtcclxuXHRmdW5jdGlvbiBjYWxlbmRhcldpZGdldFNlcnZpY2UobW9tZW50LCBldmVudE1vZGFsU2VydmljZSkge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0ZGF5Q2xpY2tlZDogZGF5Q2xpY2tlZCxcclxuXHRcdFx0Z2V0TW9udGg6IGdldE1vbnRoLFxyXG5cdFx0XHRnZXRUb2RheTogZ2V0VG9kYXksXHJcblx0XHRcdGdldFdlZWs6IGdldFdlZWssXHJcblx0XHRcdGlzU2FtZURheTogaXNTYW1lRGF5LFxyXG5cdFx0XHRsYXN0TW9udGg6IGxhc3RNb250aCxcclxuXHRcdFx0bmV4dE1vbnRoOiBuZXh0TW9udGgsXHJcblx0XHRcdHNob3dFdmVudE1vZGFsOiBzaG93RXZlbnRNb2RhbFxyXG5cdFx0fTtcclxuXHJcblx0XHRmdW5jdGlvbiBkYXlDbGlja2VkKGNsaWNrRXZlbnQsIGRheSwgc2VsZWN0ZWREYXksIGNhbGVuZGFycykge1xyXG5cdFx0XHRpZiAoaXNTYW1lRGF5KGRheS5mdWxsRGF0ZSwgc2VsZWN0ZWREYXkpKSB7XHJcblx0XHRcdFx0c2hvd0V2ZW50TW9kYWwoXHJcblx0XHRcdFx0XHRjbGlja0V2ZW50LFxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRkdF9zdGFydDogZGF5LmZ1bGxEYXRlLFxyXG5cdFx0XHRcdFx0XHRkdF9lbmQ6IGRheS5mdWxsRGF0ZS5jbG9uZSgpLmVuZE9mKCdkYXknKSxcclxuXHRcdFx0XHRcdFx0YWxsX2RheTogMSxcclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRjYWxlbmRhcnNcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHRcdHJldHVybiBzZWxlY3RlZERheTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gZGF5LmZ1bGxEYXRlO1xyXG5cdFx0fVxyXG5cdFx0LyoqXHJcblx0XHQqIEBwYXJhbSB7TW9tZW50IE9iamVjdH0gYURheSBEYXkgdG8gYnVpbGQgbW9udGggYXJvdW5kLlxyXG5cdFx0KiBAcmV0dXJuIHtNb21lbnQgT2JqZWN0W11bXX1cclxuXHRcdCovXHJcblx0XHRmdW5jdGlvbiBnZXRNb250aChhRGF5KSB7XHJcblx0XHRcdHZhciBtb250aCA9IFtdO1xyXG5cdFx0XHR2YXIgZGF5ID0gYURheS5jbG9uZSgpLmRhdGUoMSkuc3RhcnRPZignd2VlaycpO1xyXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDY7IGkrKykge1xyXG5cdFx0XHRcdG1vbnRoLnB1c2goZ2V0V2VlayhkYXksIGFEYXkubW9udGgoKSkpO1xyXG5cdFx0XHRcdGRheSA9IGRheS5hZGQoMSwgJ3dlZWtzJyk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIG1vbnRoO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGdldFRvZGF5KCkge1xyXG5cdFx0XHRyZXR1cm4gbW9tZW50KCk7XHJcblx0XHR9XHJcblxyXG5cdFx0LyoqXHJcblx0XHQqIEBwYXJhbSB7TW9tZW50IE9iamVjdH1cdHN0YXJ0RGF5XHRTdGFydGluZyBkYXkgb2YgYSB3ZWVrLlxyXG5cdFx0KiBAcGFyYW0ge2ludH1cdFx0XHRcdHRhcmdldE1vbnRoXHRNb250aCBudW1iZXIgYmVpbmcgYnVpbHQuXHJcblx0XHQqXHJcblx0XHQqIEByZXR1cm4ge01vbWVudCBPYmplY3RbXX1cclxuXHRcdCovXHJcblx0XHRmdW5jdGlvbiBnZXRXZWVrKHN0YXJ0RGF5LCB0YXJnZXRNb250aCkge1xyXG5cdFx0XHR2YXIgd2VlayA9IFtdO1xyXG5cclxuXHRcdFx0dmFyIGRheSA9IHN0YXJ0RGF5LmNsb25lKCk7XHJcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgNzsgaSsrKSB7XHJcblx0XHRcdFx0d2Vlay5wdXNoKHtcclxuXHRcdFx0XHRcdG51bWJlcjogZGF5LmRhdGUoKSxcclxuXHRcdFx0XHRcdGlzVGFyZ2V0TW9udGg6IChkYXkubW9udGgoKSA9PT0gdGFyZ2V0TW9udGgpLFxyXG5cdFx0XHRcdFx0aXNUb2RheTogZGF5LmlzU2FtZShtb21lbnQoKSwgJ2RheScpLFxyXG5cdFx0XHRcdFx0ZnVsbERhdGU6IGRheVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdGRheSA9IGRheS5jbG9uZSgpLmFkZCgxLCAnZGF5cycpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gd2VlaztcclxuXHRcdH1cclxuXHJcblx0XHQvKipcclxuXHRcdCogQHBhcmFtIHtNb21lbnQgT2JqZWN0fVx0ZGF5MVxyXG5cdFx0KiBAcGFyYW0ge01vbWVudCBPYmplY3R9XHRkYXkyXHJcblx0XHQqXHJcblx0XHQqIEByZXR1cm4ge2Jvb2x9XHJcblx0XHQqL1xyXG5cdFx0ZnVuY3Rpb24gaXNTYW1lRGF5KGRheTEsIGRheTIpIHtcclxuXHRcdFx0cmV0dXJuIGRheTEuaXNTYW1lKGRheTIsICdkYXknKTtcclxuXHRcdH1cclxuXHJcblx0XHQvKipcclxuXHRcdCogU2luY2Ugc3JjTW9udGggaXMgYW4gYXJyYXkgb2YgZGF5cyBieSB3ZWVrcywgaXQgY29udGFpbnMgZGF5cyBub3QgaW4gdGhlXHJcblx0XHQqIHNvdXJjZSBtb250aC4gVGhlIGZpcnN0IGRheSBvZiB0aGUgdGhpcmQgd2VlayBvZiB0aGUgZ2l2ZW4gbW9udGggaXNcclxuXHRcdCogZ3VhcmFudGVlZCB0byBiZSBhIGRheSB3aXRoaW4gdGhlIHNvdXJjZSBtb250aC5cclxuXHRcdCpcclxuXHRcdCogQHBhcmFtIHtNb21lbnQgT2JqZWN0fVx0c3JjTW9udGhcclxuXHRcdCogQHJldHVybiB7TW9tZW50IE9iamVjdFtdfVxyXG5cdFx0Ki9cclxuXHRcdGZ1bmN0aW9uIGxhc3RNb250aChzcmNNb250aCkge1xyXG5cdFx0XHRyZXR1cm4gZ2V0TW9udGgoc3JjTW9udGhbM11bMF0uZnVsbERhdGUuY2xvbmUoKS5zdWJ0cmFjdCgxLCAnbW9udGhzJykpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8qKlxyXG5cdFx0KiBAc2VlIGxhc3RNb250aCgpXHJcblx0XHQqL1xyXG5cdFx0ZnVuY3Rpb24gbmV4dE1vbnRoKHNyY01vbnRoKSB7XHJcblx0XHRcdHJldHVybiBnZXRNb250aChzcmNNb250aFszXVswXS5mdWxsRGF0ZS5jbG9uZSgpLmFkZCgxLCAnbW9udGhzJykpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIHNob3dFdmVudE1vZGFsKGNsaWNrRXZlbnQsIGV2ZW50LCBjYWxlbmRhcnMpIHtcclxuXHRcdFx0Y2xpY2tFdmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHRcdFx0ZXZlbnRNb2RhbFNlcnZpY2Uub3BlbkV2ZW50TW9kYWwoZXZlbnQsIGNhbGVuZGFycyk7XHJcblx0XHR9XHJcblx0fVxyXG59KSgpO1xyXG5cbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuZmFjdG9yeSgncmVjdXJyZW5jZU1vZGFsU2VydmljZScsIHJlY3VycmVuY2VNb2RhbFNlcnZpY2UpO1xyXG5cclxuXHRyZWN1cnJlbmNlTW9kYWxTZXJ2aWNlLiRpbmplY3QgPSBbJyR1aWJNb2RhbCcsICdyZWN1cnJlbmNlU2VydmljZSddO1xyXG5cdGZ1bmN0aW9uIHJlY3VycmVuY2VNb2RhbFNlcnZpY2UoJHVpYk1vZGFsLCByZWN1cnJlbmNlU2VydmljZSkge1xyXG5cdFx0dmFyIHJjID0gdGhpczsgLy8ganNoaW50IGlnbm9yZTogbGluZVxyXG5cdFx0dmFyIHJlY3VycmVuY2VJbmZvID0ge1xyXG5cdFx0XHRmcmVxOiBbJ2hvdXJseScsICdkYWlseScsICd3ZWVrbHknLCAnbW9udGhseScsICd5ZWFybHknXSxcclxuXHRcdFx0ZGF5czogWydtbycsICd0dScsICd3ZScsICd0aCcsICdmcicsICdzYScsICdzdSddXHJcblx0XHR9O1xyXG5cclxuXHRcdHJldHVybiB7XHJcblx0XHRcdG9wZW5SZWN1cnJlbmNlTW9kYWw6IG9wZW5SZWN1cnJlbmNlTW9kYWxcclxuXHRcdH07XHJcblxyXG5cdFx0ZnVuY3Rpb24gb3BlblJlY3VycmVuY2VNb2RhbChpdGVtKSB7XHJcblx0XHRcdHJldHVybiAkdWliTW9kYWwub3Blbih7XHJcblx0XHRcdFx0Y29udHJvbGxlcjogJ01vZGFsQ29udHJvbGxlcicsXHJcblx0XHRcdFx0Y29udHJvbGxlckFzOiAndm0nLFxyXG5cdFx0XHRcdHRlbXBsYXRlVXJsOiAnbW9kdWxlcy9yZWN1cnJlbmNlL21vZGFsL3JlY3VycmVuY2UubW9kYWwuaHRtbCcsXHJcblx0XHRcdFx0cmVzb2x2ZToge1xyXG5cdFx0XHRcdFx0Z3JvdXBzOiBmdW5jdGlvbigpIHsgcmV0dXJuIHJlY3VycmVuY2VJbmZvOyB9LFxyXG5cdFx0XHRcdFx0aXRlbTogaXRlbVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSkucmVzdWx0XHJcblx0XHRcdFx0LnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuXHRcdFx0XHRcdHJlY3VycmVuY2VTZXJ2aWNlLmNvbnN0cnVjdFJlY3VycmVuY2UoaXRlbSk7XHJcblx0XHRcdFx0fSwgZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuXHRcdFx0XHRcdHJlY3VycmVuY2VTZXJ2aWNlLmNsZWFyUmVjdXJyZW5jZShpdGVtKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XHJcblxuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5mYWN0b3J5KCdsYWJlbFNlcnZpY2UnLCBsYWJlbFNlcnZpY2UpO1xyXG5cclxuXHRsYWJlbFNlcnZpY2UuJGluamVjdCA9IFsnY3J1ZFNlcnZpY2UnLCAnY2FjaGVTZXJ2aWNlJ107XHJcblx0ZnVuY3Rpb24gbGFiZWxTZXJ2aWNlKGNydWRTZXJ2aWNlLCBjYWNoZVNlcnZpY2UpIHtcclxuXHRcdHZhciB2bSA9IHRoaXM7ICAvLyBqc2hpbnQgaWdub3JlOmxpbmVcclxuXHRcdHZtLmxhYmVsID0gbmV3IGNydWRTZXJ2aWNlKCdsYWJlbCcpO1xyXG5cclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGNyZWF0ZUxhYmVsOiBjcmVhdGVMYWJlbCxcclxuXHRcdFx0ZGVsZXRlTGFiZWw6IGRlbGV0ZUxhYmVsLFxyXG5cdFx0XHRnZXRMYWJlbHM6IGdldExhYmVscyxcclxuXHRcdFx0dXBkYXRlTGFiZWw6IHVwZGF0ZUxhYmVsXHJcblx0XHR9O1xyXG5cclxuXHRcdGZ1bmN0aW9uIGNyZWF0ZUxhYmVsKGxhYmVsKSB7XHJcblx0XHRcdHJldHVybiB2bS5sYWJlbC5jcmVhdGUobGFiZWwpLnRoZW4ocHJvbWlzZUNvbXBsZXRlKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBkZWxldGVMYWJlbChpZCkge1xyXG5cdFx0XHRyZXR1cm4gdm0ubGFiZWwucmVtb3ZlKGlkKS50aGVuKHByb21pc2VDb21wbGV0ZSk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gZ2V0TGFiZWxzKCkge1xyXG5cdFx0XHRyZXR1cm4gY2FjaGVTZXJ2aWNlLmdldExhYmVscygpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIHVwZGF0ZUxhYmVsKGlkLCBsYWJlbCkge1xyXG5cdFx0XHRyZXR1cm4gdm0ubGFiZWwudXBkYXRlKGlkLCBsYWJlbCkudGhlbihwcm9taXNlQ29tcGxldGUpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIHByb21pc2VDb21wbGV0ZShyZXNwb25zZSkge1xyXG5cdFx0XHR2YXIgcmVzID0gcmVzcG9uc2UuZGF0YTtcclxuXHRcdFx0aWYgKHJlcy5zdWNjZXNzKSB7XHJcblx0XHRcdFx0Y2FjaGVTZXJ2aWNlLmNhY2hlTGFiZWxzKCk7XHJcblx0XHRcdFx0cmV0dXJuIHJlcy5kYXRhO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXMudGl0bGU7XHJcblx0XHR9XHJcblx0fVxyXG59KSgpO1xyXG5cbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuZmFjdG9yeSgnc3VidGFza01vZGFsU2VydmljZScsIHN1YnRhc2tNb2RhbFNlcnZpY2UpO1xyXG5cclxuXHRzdWJ0YXNrTW9kYWxTZXJ2aWNlLiRpbmplY3QgPSBbJyR1aWJNb2RhbCcsICdsYWJlbFNlcnZpY2UnLCAnc3VidGFza3NTZXJ2aWNlJ107XHJcblx0ZnVuY3Rpb24gc3VidGFza01vZGFsU2VydmljZSgkdWliTW9kYWwsIGxhYmVsU2VydmljZSwgc3VidGFza3NTZXJ2aWNlKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRvcGVuU3VidGFza01vZGFsOiBvcGVuU3VidGFza01vZGFsXHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0KiBXaXRob3V0IGNsb25pbmcgdGhlIHN1YnRhc2ssIGFueSBjaGFuZ2VzIG1hZGUgaW4gdGhlIG1vZGFsIHdpbGwgYmUgcmVmbGVjdGVkXHJcblx0XHQqIGluIHRoZSBtYWluIHdpbmRvdyByZWdhcmRsZXNzIG9mIGlmIHRoZSBjaGFuZ2VzIHdlcmUgc2F2ZWQgb3Igbm90LCB3aGljaFxyXG5cdFx0KiBtZWFucyBhIHVzZXIgd291bGQgbm90IGJlIGFibGUgdG8gY2FuY2VsIHRoZWlyIGNoYW5nZXMgdW5sZXNzIHRoZXkgcmVmcmVzaC5cclxuXHRcdCovXHJcblx0XHRmdW5jdGlvbiBvcGVuU3VidGFza01vZGFsKHN1YnRhc2ssIHRhc2spIHtcclxuXHRcdFx0dmFyIGNsb25lZFN1YnRhc2sgPSB7fTtcclxuXHRcdFx0YW5ndWxhci5leHRlbmQoY2xvbmVkU3VidGFzaywgc3VidGFzayk7XHJcblxyXG5cdFx0XHQkdWliTW9kYWwub3Blbih7XHJcblx0XHRcdFx0Y29udHJvbGxlcjogJ01vZGFsQ29udHJvbGxlcicsXHJcblx0XHRcdFx0Y29udHJvbGxlckFzOiAndm0nLFxyXG5cdFx0XHRcdHRlbXBsYXRlVXJsOiAnbW9kdWxlcy90YXNrcy9tb2RhbC9zdWJ0YXNrLm1vZGFsLmh0bWwnLFxyXG5cdFx0XHRcdHJlc29sdmU6IHtcclxuXHRcdFx0XHRcdGdyb3VwczogdGFzayxcclxuXHRcdFx0XHRcdGl0ZW06IGNsb25lZFN1YnRhc2tcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pLnJlc3VsdFxyXG5cdFx0XHRcdC50aGVuKGZ1bmN0aW9uKHJlcykge1xyXG5cdFx0XHRcdFx0c3VidGFza3NTZXJ2aWNlLmNyZWF0ZU9yVXBkYXRlU3VidGFzayhyZXMuc3VidGFzaywgcmVzLnRhc2spO1xyXG5cdFx0XHRcdH0sIGZ1bmN0aW9uKHJlcykge1xyXG5cdFx0XHRcdFx0aWYgKHR5cGVvZiByZXMgIT09ICdzdHJpbmcnKSB7XHJcblx0XHRcdFx0XHRcdHN1YnRhc2tzU2VydmljZS5kZWxldGVTdWJ0YXNrKHJlcy5zdWJ0YXNrLCByZXMudGFzayk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fVxyXG59KSgpO1xyXG5cbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuZmFjdG9yeSgndGFza01vZGFsU2VydmljZScsIHRhc2tNb2RhbFNlcnZpY2UpO1xyXG5cclxuXHR0YXNrTW9kYWxTZXJ2aWNlLiRpbmplY3QgPSBbJyR1aWJNb2RhbCcsICd0YXNrc1NlcnZpY2UnLCAnZm9ybWF0U2VydmljZSddO1xyXG5cdGZ1bmN0aW9uIHRhc2tNb2RhbFNlcnZpY2UoJHVpYk1vZGFsLCB0YXNrc1NlcnZpY2UsIGZvcm1hdFNlcnZpY2UpIHtcclxuXHRcdHZhciB2bSA9IHRoaXM7IC8vIGpzaGludCBpZ25vcmU6IGxpbmVcclxuXHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRvcGVuVGFza01vZGFsOiBvcGVuVGFza01vZGFsXHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0KiBXaXRob3V0IGNsb25pbmcgdGhlIHRhc2ssIGFueSBjaGFuZ2VzIG1hZGUgaW4gdGhlIG1vZGFsIHdpbGwgYmUgcmVmbGVjdGVkXHJcblx0XHQqIGluIHRoZSBtYWluIHdpbmRvdyByZWdhcmRsZXNzIG9mIGlmIHRoZSBjaGFuZ2VzIHdlcmUgc2F2ZWQgb3Igbm90LCB3aGljaFxyXG5cdFx0KiBtZWFucyBhIHVzZXIgd291bGQgbm90IGJlIGFibGUgdG8gY2FuY2VsIHRoZWlyIGNoYW5nZXMgdW5sZXNzIHRoZXkgcmVmcmVzaC5cclxuXHRcdCovXHJcblx0XHRmdW5jdGlvbiBvcGVuVGFza01vZGFsKHRhc2ssIGxhYmVscykge1xyXG5cdFx0XHR2YXIgY2xvbmVkVGFzayA9IHt9O1xyXG5cdFx0XHRhbmd1bGFyLmV4dGVuZChjbG9uZWRUYXNrLCB0YXNrKTtcclxuXHRcdFx0Zm9ybWF0U2VydmljZS5mb3JtYXRGb3JEaXNwbGF5KGNsb25lZFRhc2spO1xyXG5cclxuXHRcdFx0cmV0dXJuICR1aWJNb2RhbC5vcGVuKHtcclxuXHRcdFx0XHRjb250cm9sbGVyOiAnTW9kYWxDb250cm9sbGVyJyxcclxuXHRcdFx0XHRjb250cm9sbGVyQXM6ICd2bScsXHJcblx0XHRcdFx0dGVtcGxhdGVVcmw6ICdtb2R1bGVzL3Rhc2tzL21vZGFsL3Rhc2subW9kYWwuaHRtbCcsXHJcblx0XHRcdFx0cmVzb2x2ZToge1xyXG5cdFx0XHRcdFx0Z3JvdXBzOiBmdW5jdGlvbigpIHsgcmV0dXJuIGxhYmVsczsgfSxcclxuXHRcdFx0XHRcdGl0ZW06IGNsb25lZFRhc2tcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pLnJlc3VsdFxyXG5cdFx0XHRcdC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcblx0XHRcdFx0XHRyZXNwb25zZSA9IGZvcm1hdFNlcnZpY2UuZm9ybWF0Rm9yU3RvcmFnZShyZXNwb25zZSk7XHJcblx0XHRcdFx0XHRyZXR1cm4gdGFza3NTZXJ2aWNlLmNyZWF0ZU9yVXBkYXRlVGFzayhyZXNwb25zZSlcclxuXHRcdFx0XHRcdFx0LnRoZW4odGFza3NTZXJ2aWNlLmdldFRhc2tzKTtcclxuXHRcdFx0XHR9LCBmdW5jdGlvbihyZXNwb25zZSkge1xyXG5cdFx0XHRcdFx0aWYgKE51bWJlcihyZXNwb25zZSkpIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHRhc2tzU2VydmljZS5kZWxldGVUYXNrKHJlc3BvbnNlKVxyXG5cdFx0XHRcdFx0XHRcdC50aGVuKHRhc2tzU2VydmljZS5nZXRUYXNrcyk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fVxyXG59KSgpO1xyXG5cbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuY29udHJvbGxlcignU3VidGFza3NDb250cm9sbGVyJywgU3VidGFza3NDb250cm9sbGVyKTtcclxuXHJcblx0U3VidGFza3NDb250cm9sbGVyLiRpbmplY3QgPSBbJ3N1YnRhc2tzU2VydmljZScsICdzdWJ0YXNrTW9kYWxTZXJ2aWNlJ107XHJcblx0ZnVuY3Rpb24gU3VidGFza3NDb250cm9sbGVyKHN1YnRhc2tzU2VydmljZSwgc3VidGFza01vZGFsU2VydmljZSkge1xyXG5cdFx0dmFyIHN0ID0gdGhpcztcclxuXHRcdHN0LnNob3dTdWJ0YXNrTW9kYWwgPSBzaG93U3VidGFza01vZGFsO1xyXG5cdFx0c3QudG9nZ2xlQ29tcGxldGVkID0gdG9nZ2xlQ29tcGxldGVkO1xyXG5cclxuXHRcdGZ1bmN0aW9uIHNob3dTdWJ0YXNrTW9kYWwoc3VidGFzaykge1xyXG5cdFx0XHRzdWJ0YXNrTW9kYWxTZXJ2aWNlLm9wZW5TdWJ0YXNrTW9kYWwoc3VidGFzaywgc3QudGFzayk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gdG9nZ2xlQ29tcGxldGVkKHN1YnRhc2spIHtcclxuXHRcdFx0c3VidGFza3NTZXJ2aWNlLnRvZ2dsZUNvbXBsZXRlZChzdWJ0YXNrKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiB1cGRhdGVTdWJ0YXNrcyhyZXNwb25zZSkge1xyXG5cdFx0XHRpZiAocmVzcG9uc2UpIHtcclxuXHRcdFx0XHRzdC5zdWJ0YXNrcyA9IHJlc3BvbnNlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59KSgpO1xuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5kaXJlY3RpdmUoJ3NwU3VidGFza3MnLCBzdWJ0YXNrc0RpcmVjdGl2ZSk7XHJcblxyXG5cdGZ1bmN0aW9uIHN1YnRhc2tzRGlyZWN0aXZlKCkge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0dGVtcGxhdGVVcmw6ICdtb2R1bGVzL3Rhc2tzL3N1YnRhc2tzL3N1YnRhc2tzLmh0bWwnLFxyXG5cdFx0XHRjb250cm9sbGVyOiAnU3VidGFza3NDb250cm9sbGVyJyxcclxuXHRcdFx0Y29udHJvbGxlckFzOiAnc3QnLFxyXG5cdFx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlLFxyXG5cdFx0XHRzY29wZToge1xyXG5cdFx0XHRcdHRhc2s6ICc9J1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdH1cclxufSkoKTtcbihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2FwcCcpXHJcblx0XHQuZmFjdG9yeSgnc3VidGFza3NTZXJ2aWNlJywgc3VidGFza3NTZXJ2aWNlKTtcclxuXHJcblx0c3VidGFza3NTZXJ2aWNlLiRpbmplY3QgPSBbJyRodHRwJywgJyRsb2cnXTtcclxuXHRmdW5jdGlvbiBzdWJ0YXNrc1NlcnZpY2UoJGh0dHAsICRsb2cpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGNyZWF0ZU9yVXBkYXRlU3VidGFzazogY3JlYXRlT3JVcGRhdGVTdWJ0YXNrLFxyXG5cdFx0XHRkZWxldGVTdWJ0YXNrOiBkZWxldGVTdWJ0YXNrLFxyXG5cdFx0XHR0b2dnbGVDb21wbGV0ZWQ6IHRvZ2dsZUNvbXBsZXRlZFxyXG5cdFx0fTtcclxuXHJcblx0XHRmdW5jdGlvbiBjcmVhdGVPclVwZGF0ZVN1YnRhc2soc3VidGFzaywgdGFzaykge1xyXG5cdFx0XHRpZiAoIXRhc2suc3VidGFza3MpIHtcclxuXHRcdFx0XHR0YXNrLnN1YnRhc2tzID0ge1xyXG5cdFx0XHRcdFx0Y3VycmVudElkOiAxLFxyXG5cdFx0XHRcdFx0bGlzdDogW11cclxuXHRcdFx0XHR9O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoc3VidGFzay5pZCA9PT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdFx0c3VidGFzay5pZCA9IHRhc2suc3VidGFza3MuY3VycmVudElkKys7XHJcblx0XHRcdFx0c3VidGFzay5jb21wbGV0ZWQgPSBmYWxzZTtcclxuXHRcdFx0XHR0YXNrLnN1YnRhc2tzLmxpc3QucHVzaChzdWJ0YXNrKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGRlbGV0ZVN1YnRhc2soc3VidGFzaywgdGFzaykge1xyXG5cdFx0XHR0YXNrLnN1YnRhc2tzLmxpc3Quc3BsaWNlKHRhc2suc3VidGFza3MubGlzdC5pbmRleE9mKHN1YnRhc2spLCAxKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiB0b2dnbGVDb21wbGV0ZWQoc3VidGFzaykge1xyXG5cdFx0XHRzdWJ0YXNrLmNvbXBsZXRlZCA9ICFzdWJ0YXNrLmNvbXBsZXRlZDtcclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XHJcblxuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5mYWN0b3J5KCd1c2VyTW9kYWxTZXJ2aWNlJywgdXNlck1vZGFsU2VydmljZSk7XHJcblxyXG5cdHVzZXJNb2RhbFNlcnZpY2UuJGluamVjdCA9IFsnJHVpYk1vZGFsJywgJ3VzZXJTZXJ2aWNlJ107XHJcblx0ZnVuY3Rpb24gdXNlck1vZGFsU2VydmljZSgkdWliTW9kYWwsIHVzZXJTZXJ2aWNlKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRvcGVuVXNlck1vZGFsOiBvcGVuVXNlck1vZGFsXHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0KiBXaXRob3V0IGNsb25pbmcgdGhlIHVzZXIsIGFueSBjaGFuZ2VzIG1hZGUgaW4gdGhlIG1vZGFsIHdpbGwgYmUgcmVmbGVjdGVkXHJcblx0XHQqIGluIHRoZSBtYWluIHdpbmRvdyByZWdhcmRsZXNzIG9mIGlmIHRoZSBjaGFuZ2VzIHdlcmUgc2F2ZWQgb3Igbm90LCB3aGljaFxyXG5cdFx0KiBtZWFucyBhIHVzZXIgd291bGQgbm90IGJlIGFibGUgdG8gY2FuY2VsIHRoZWlyIGNoYW5nZXMgdW5sZXNzIHRoZXkgcmVmcmVzaC5cclxuXHRcdCovXHJcblx0XHRmdW5jdGlvbiBvcGVuVXNlck1vZGFsKHVzZXIpIHtcclxuXHRcdFx0dmFyIGNsb25lZFVzZXIgPSB7fTtcclxuXHRcdFx0YW5ndWxhci5leHRlbmQoY2xvbmVkVXNlciwgdXNlcik7XHJcblxyXG5cdFx0XHRyZXR1cm4gJHVpYk1vZGFsLm9wZW4oe1xyXG5cdFx0XHRcdGNvbnRyb2xsZXI6ICdNb2RhbENvbnRyb2xsZXInLFxyXG5cdFx0XHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcclxuXHRcdFx0XHR0ZW1wbGF0ZVVybDogJ3BhZ2VzL2FkbWluL21vZGFsL3VzZXIubW9kYWwuaHRtbCcsXHJcblx0XHRcdFx0cmVzb2x2ZToge1xyXG5cdFx0XHRcdFx0Z3JvdXBzOiB7fSxcclxuXHRcdFx0XHRcdGl0ZW06IGNsb25lZFVzZXJcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pLnJlc3VsdFxyXG5cdFx0XHRcdC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdXNlclNlcnZpY2UuY3JlYXRlT3JVcGRhdGVVc2VyKHJlc3BvbnNlKVxyXG5cdFx0XHRcdFx0XHQudGhlbih1c2VyU2VydmljZS5nZXRVc2Vycyk7XHJcblx0XHRcdFx0fSwgZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuXHRcdFx0XHRcdGlmIChOdW1iZXIocmVzcG9uc2UpKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiB1c2VyU2VydmljZS5kZWxldGVVc2VyKHJlc3BvbnNlKVxyXG5cdFx0XHRcdFx0XHRcdC50aGVuKHVzZXJTZXJ2aWNlLmdldFVzZXJzKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XHJcblxuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5mYWN0b3J5KCd1c2VyU2VydmljZScsIHVzZXJTZXJ2aWNlKTtcclxuXHJcblx0dXNlclNlcnZpY2UuJGluamVjdCA9IFsnY3J1ZFNlcnZpY2UnXTtcclxuXHRmdW5jdGlvbiB1c2VyU2VydmljZShjcnVkU2VydmljZSkge1xyXG5cdFx0dmFyIHZtID0gdGhpczsgIC8vIGpzaGludCBpZ25vcmU6bGluZVxyXG5cdFx0dm0udXNlciA9IG5ldyBjcnVkU2VydmljZSgndXNlcicpO1xyXG5cclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGNyZWF0ZVVzZXI6IGNyZWF0ZVVzZXIsXHJcblx0XHRcdGNyZWF0ZU9yVXBkYXRlVXNlcjogY3JlYXRlT3JVcGRhdGVVc2VyLFxyXG5cdFx0XHRkZWxldGVVc2VyOiBkZWxldGVVc2VyLFxyXG5cdFx0XHRnZXRVc2VyczogZ2V0VXNlcnMsXHJcblx0XHRcdHVwZGF0ZVVzZXI6IHVwZGF0ZVVzZXJcclxuXHRcdH07XHJcblxyXG5cdFx0ZnVuY3Rpb24gY3JlYXRlVXNlcih1c2VyKSB7XHJcblx0XHRcdHJldHVybiB2bS51c2VyLmNyZWF0ZSh1c2VyKS50aGVuKHByb21pc2VDb21wbGV0ZSk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gY3JlYXRlT3JVcGRhdGVVc2VyKHVzZXIpIHtcclxuXHRcdFx0aWYgKCF1c2VyLmlkKSB7XHJcblx0XHRcdFx0cmV0dXJuIGNyZWF0ZVVzZXIodXNlcik7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHVwZGF0ZVVzZXIodXNlci5pZCwgdXNlcik7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gZGVsZXRlVXNlcihpZCkge1xyXG5cdFx0XHRyZXR1cm4gdm0udXNlci5yZW1vdmUoaWQpLnRoZW4ocHJvbWlzZUNvbXBsZXRlKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBnZXRVc2VycygpIHtcclxuXHRcdFx0cmV0dXJuIHZtLnVzZXIuZ2V0V2hlcmUoJycsIHt9KS50aGVuKHByb21pc2VDb21wbGV0ZSk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gdXBkYXRlVXNlcihpZCwgdXNlcikge1xyXG5cdFx0XHRyZXR1cm4gdm0udXNlci51cGRhdGUoaWQsIHVzZXIpLnRoZW4ocHJvbWlzZUNvbXBsZXRlKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBwcm9taXNlQ29tcGxldGUocmVzcG9uc2UpIHtcclxuXHRcdFx0dmFyIHJlcyA9IHJlc3BvbnNlLmRhdGE7XHJcblx0XHRcdGlmIChyZXMuc3VjY2Vzcykge1xyXG5cdFx0XHRcdHJldHVybiByZXMuZGF0YTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmVzLnRpdGxlO1xyXG5cdFx0fVxyXG5cdH1cclxufSkoKTtcclxuXG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmNvbnRyb2xsZXIoJ0hlYWRlckNvbnRyb2xsZXInLCBIZWFkZXJDb250cm9sbGVyKTtcclxuXHJcblx0SGVhZGVyQ29udHJvbGxlci4kaW5qZWN0ID0gWyckcm9vdFNjb3BlJywgJ3VzZXInLCAnaGVhZGVyU2VydmljZSddO1xyXG5cdGZ1bmN0aW9uIEhlYWRlckNvbnRyb2xsZXIoJHJvb3RTY29wZSwgdXNlciwgaGVhZGVyU2VydmljZSkge1xyXG5cdFx0dmFyIHZtID0gdGhpcztcclxuXHRcdHZtLnVzZXIgPSB1c2VyO1xyXG5cclxuXHRcdGFjdGl2YXRlKCk7XHJcblxyXG5cdFx0ZnVuY3Rpb24gYWN0aXZhdGUoKSB7XHJcblx0XHRcdCRyb290U2NvcGUuJG9uKCd1cGRhdGVVc2VyJywgdXBkYXRlVXNlcik7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gdXBkYXRlVXNlcigpIHtcclxuXHRcdFx0aGVhZGVyU2VydmljZS5nZXRVc2VyKCkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xyXG5cdFx0XHRcdHZtLnVzZXIgPSByZXNwb25zZTtcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fVxyXG59KSgpO1xuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5mYWN0b3J5KCdoZWFkZXJTZXJ2aWNlJywgaGVhZGVyU2VydmljZSk7XHJcblxyXG5cdGhlYWRlclNlcnZpY2UuJGluamVjdCA9IFsnJGh0dHAnLCAnJGxvZycsICdzZXNzaW9uU2VydmljZSddO1xyXG5cdGZ1bmN0aW9uIGhlYWRlclNlcnZpY2UoJGh0dHAsICRsb2csIHNlc3Npb25TZXJ2aWNlKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRnZXRVc2VyOiBnZXRVc2VyXHJcblx0XHR9O1xyXG5cclxuXHRcdGZ1bmN0aW9uIGdldFVzZXIoKSB7XHJcblx0XHRcdHJldHVybiBzZXNzaW9uU2VydmljZS5nZXRWYXIoJ2FsbCcpXHJcblx0XHRcdFx0LnRoZW4oZ2V0TmFtZUNvbXBsZXRlKTtcclxuXHJcblx0XHRcdGZ1bmN0aW9uIGdldE5hbWVDb21wbGV0ZShyZXNwb25zZSkge1xyXG5cdFx0XHRcdHZhciByZXN1bHQgPSByZXNwb25zZS5kYXRhO1xyXG5cclxuXHRcdFx0XHRpZiAocmVzdWx0LnN1Y2Nlc3MgPT09IGZhbHNlKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiAnJywgYXZhdGFyOiAnY29udGVudC9pbWcvdXNlci5wbmcnIH07XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0LmRhdGE7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XHJcblxuKGZ1bmN0aW9uKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZSgnYXBwJylcclxuXHRcdC5jb250cm9sbGVyKCdTaWRlYmFyQ29udHJvbGxlcicsIFNpZGViYXJDb250cm9sbGVyKTtcclxuXHJcblx0U2lkZWJhckNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHJvb3RTY29wZScsICdsYWJlbFNlcnZpY2UnLCAnY2FsZW5kYXJTZXJ2aWNlJywgJ3NpZGViYXJTZXJ2aWNlJ107XHJcblx0ZnVuY3Rpb24gU2lkZWJhckNvbnRyb2xsZXIoJHJvb3RTY29wZSwgbGFiZWxTZXJ2aWNlLCBjYWxlbmRhclNlcnZpY2UsIHNpZGViYXJTZXJ2aWNlKSB7XHJcblx0XHR2YXIgdm0gPSB0aGlzO1xyXG5cdFx0dm0uY29sbGFwc2VkID0ge307XHJcblx0XHR2bS5sYWJlbHMgPSBbXTtcclxuXHRcdHZtLmNhbGVuZGFycyA9IFtdO1xyXG5cdFx0dm0udG9nZ2xlU2lkZWJhciA9IHRvZ2dsZVNpZGViYXI7XHJcblx0XHR2bS50b2dnbGVDYWxlbmRhcnMgPSB0b2dnbGVDYWxlbmRhcnM7XHJcblx0XHR2bS50b2dnbGVMYWJlbHMgPSB0b2dnbGVMYWJlbHM7XHJcblxyXG5cdFx0YWN0aXZhdGUoKTtcclxuXHJcblx0XHRmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcclxuXHRcdFx0dXBkYXRlQ2FsZW5kYXJzKCk7XHJcblx0XHRcdHVwZGF0ZUxhYmVscygpO1xyXG5cclxuXHRcdFx0dm0uY29sbGFwc2VkID0gc2lkZWJhclNlcnZpY2UuZ2V0Q29sbGFwc2VkKCk7XHJcblxyXG5cdFx0XHQkcm9vdFNjb3BlLiRvbigndXBkYXRlQ2FsZW5kYXJzJywgdXBkYXRlQ2FsZW5kYXJzKTtcclxuXHRcdFx0JHJvb3RTY29wZS4kb24oJ3VwZGF0ZUxhYmVscycsIHVwZGF0ZUxhYmVscyk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gdG9nZ2xlU2lkZWJhcigpIHtcclxuXHRcdFx0dm0uY29sbGFwc2VkID0gc2lkZWJhclNlcnZpY2UudG9nZ2xlU2lkZWJhcigpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIHRvZ2dsZUNhbGVuZGFycygpIHtcclxuXHRcdFx0dm0uY29sbGFwc2VkID0gc2lkZWJhclNlcnZpY2UudG9nZ2xlQ2FsZW5kYXJzKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gdG9nZ2xlTGFiZWxzKCkge1xyXG5cdFx0XHR2bS5jb2xsYXBzZWQgPSBzaWRlYmFyU2VydmljZS50b2dnbGVMYWJlbHMoKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiB1cGRhdGVDYWxlbmRhcnMoKSB7XHJcblx0XHRcdHZtLmNhbGVuZGFycyA9IGNhbGVuZGFyU2VydmljZS5nZXRDYWxlbmRhcnMoKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiB1cGRhdGVMYWJlbHMoKSB7XHJcblx0XHRcdHZtLmxhYmVscyA9IGxhYmVsU2VydmljZS5nZXRMYWJlbHMoKTtcclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XG4oZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhcHAnKVxyXG5cdFx0LmZhY3RvcnkoJ3NpZGViYXJTZXJ2aWNlJywgc2lkZWJhclNlcnZpY2UpO1xyXG5cclxuXHRzaWRlYmFyU2VydmljZS4kaW5qZWN0ID0gWyckd2luZG93J107XHJcblx0ZnVuY3Rpb24gc2lkZWJhclNlcnZpY2UoJHdpbmRvdykge1xyXG5cdFx0dmFyIHZtID0gdGhpczsgLy8ganNoaW50IGlnbm9yZTogbGluZVxyXG5cdFx0dm0uY29sbGFwc2VkID0ge307XHJcblxyXG5cdFx0YWN0aXZhdGUoKTtcclxuXHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRnZXRDb2xsYXBzZWQ6IGdldENvbGxhcHNlZCxcclxuXHRcdFx0dG9nZ2xlU2lkZWJhcjogdG9nZ2xlU2lkZWJhcixcclxuXHRcdFx0dG9nZ2xlQ2FsZW5kYXJzOiB0b2dnbGVDYWxlbmRhcnMsXHJcblx0XHRcdHRvZ2dsZUxhYmVsczogdG9nZ2xlTGFiZWxzXHJcblx0XHR9O1xyXG5cclxuXHRcdGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xyXG5cdFx0XHRpZiAoJHdpbmRvdy5pbm5lcldpZHRoIDwgNjAwKSB7XHJcblx0XHRcdFx0dm0uY29sbGFwc2VkID0ge1xyXG5cdFx0XHRcdFx0c2lkZWJhcjogdHJ1ZSxcclxuXHRcdFx0XHRcdGNhbGVuZGFyczogdHJ1ZSxcclxuXHRcdFx0XHRcdGxhYmVsczogdHJ1ZVxyXG5cdFx0XHRcdH07XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dm0uY29sbGFwc2VkID0ge1xyXG5cdFx0XHRcdFx0c2lkZWJhcjogZmFsc2UsXHJcblx0XHRcdFx0XHRjYWxlbmRhcnM6IGZhbHNlLFxyXG5cdFx0XHRcdFx0bGFiZWxzOiBmYWxzZVxyXG5cdFx0XHRcdH07XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBnZXRDb2xsYXBzZWQoKSB7XHJcblx0XHRcdHJldHVybiB2bS5jb2xsYXBzZWQ7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gdG9nZ2xlU2lkZWJhcigpIHtcclxuXHRcdFx0dm0uY29sbGFwc2VkLnNpZGViYXIgPSAhdm0uY29sbGFwc2VkLnNpZGViYXI7XHJcblx0XHRcdGlmICh2bS5jb2xsYXBzZWQuc2lkZWJhcikge1xyXG5cdFx0XHRcdHZtLmNvbGxhcHNlZC5jYWxlbmRhcnMgPSB0cnVlO1xyXG5cdFx0XHRcdHZtLmNvbGxhcHNlZC5sYWJlbHMgPSB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiB2bS5jb2xsYXBzZWQ7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gdG9nZ2xlQ2FsZW5kYXJzKCkge1xyXG5cdFx0XHR2bS5jb2xsYXBzZWQuY2FsZW5kYXJzID0gIXZtLmNvbGxhcHNlZC5jYWxlbmRhcnM7XHJcblx0XHRcdGlmICghdm0uY29sbGFwc2VkLmNhbGVuZGFycykge1xyXG5cdFx0XHRcdHZtLmNvbGxhcHNlZC5zaWRlYmFyID0gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHZtLmNvbGxhcHNlZDtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiB0b2dnbGVMYWJlbHMoKSB7XHJcblx0XHRcdHZtLmNvbGxhcHNlZC5sYWJlbHMgPSAhdm0uY29sbGFwc2VkLmxhYmVscztcclxuXHRcdFx0aWYgKCF2bS5jb2xsYXBzZWQubGFiZWxzKSB7XHJcblx0XHRcdFx0dm0uY29sbGFwc2VkLnNpZGViYXIgPSBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gdm0uY29sbGFwc2VkO1xyXG5cdFx0fVxyXG5cdH1cclxufSkoKTtcclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
