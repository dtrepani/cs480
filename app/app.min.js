!function(){"use strict";function e(e,t){function n(e){return e.cacheAll()}function r(e){return e.getUser()}function a(e){return e.getUsers()}function o(e){return e.isAuthenticated()}function c(e){return e.isAdmin()}e.state("root",{url:"",templateUrl:"index.html","abstract":!0,resolve:{cache:["cacheService",n],user:["headerService",r]},views:{header:{templateUrl:"pages/layout/header/header.html",controller:"HeaderController",controllerAs:"hc"},sidebar:{templateUrl:"pages/layout/sidebar/sidebar.html",controller:"SidebarController",controllerAs:"sc"}}}).state("login",{url:"/login",parent:"root",views:{"content@":{templateUrl:"pages/login/login.html",controller:"LoginController",controllerAs:"vm"}}}).state("logout",{url:"/logout",parent:"root",views:{"content@":{controller:"LogoutController",controllerAs:"vm"}}}).state("register",{url:"/register",parent:"root",views:{"content@":{templateUrl:"pages/register/register.html",controller:"RegisterController",controllerAs:"vm"}}}).state("admin",{url:"/admin",parent:"root",views:{"content@":{templateUrl:"pages/admin/admin.html",controller:"AdminController",controllerAs:"vm",resolve:{isAdmin:["accessService",c],users:["userService",a]}}}}).state("dashboard",{url:"/dashboard",parent:"root",views:{"content@":{templateUrl:"pages/dashboard/dashboard.html",resolve:{isAuthenticated:["accessService",o]}}}}).state("labels",{url:"/labels",parent:"root"}).state("labels.label",{url:"/:labelId",views:{"content@":{templateUrl:"pages/tasks/label.html",controller:"LabelPageController",controllerAs:"vm"}}}).state("inbox",{url:"/inbox",parent:"root",views:{"content@":{templateUrl:"pages/tasks/inbox.html",resolve:{isAuthenticated:["accessService",o]}}}}).state("today",{url:"/today",parent:"root",views:{"content@":{templateUrl:"pages/tasks/today.html",resolve:{isAuthenticated:["accessService",o]}}}}).state("week",{url:"/week",parent:"root",views:{"content@":{templateUrl:"pages/tasks/week.html",resolve:{isAuthenticated:["accessService",o]}}}}).state("calendar",{url:"/calendar",parent:"root",views:{"content@":{templateUrl:"pages/calendar/calendar.html",resolve:{isAuthenticated:["accessService",o]}}}}),t.otherwise("/dashboard")}angular.module("app",["ui.router","ui.bootstrap","angularMoment"]).config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function e(e){e.init()}angular.module("app").run(e),e.$inject=["appService"]}(),function(){"use strict";function e(e,t,n){function r(){e.$on("$stateChangeError",a)}function a(e,r,a,o,c,s){s===n.UNAUTHORIZED?(e.preventDefault(),t.go("login")):"admin"===r.name&&s===n.FORBIDDEN}return{init:r}}angular.module("app").factory("appService",e),e.$inject=["$rootScope","$state","statusService"]}(),function(){"use strict";function e(){return function(e,t){if(!t)return e;for(var n=[],r=0;r<e.length;r++)(e[r].label_id===t||e[r].calendar_id===t)&&n.push(e[r]);return n}}angular.module("app").filter("inGroups",e),e.$inject=[]}(),function(){"use strict";function e(e){return function(t,n){for(var r=[],a=0;a<t.length;a++){var o=n.isSame(e(t[a].dt_start),"day");o||(o=n.isSame(e(t[a].dt_end),"day")),o&&r.push(t[a])}return r}}angular.module("app").filter("sameDayAs",e),e.$inject=["moment"]}(),function(){"use strict";function e(e){return function(t,n){if(!n)return t;for(var r=[],a=0;a<t.length;a++){(!t[a].due||t[a].due&&e(t[a].due).isBefore(e().add(n,"days")))&&r.push(t[a])}return r}}angular.module("app").filter("withinDays",e),e.$inject=["moment"]}(),function(){"use strict";function e(e,t){function n(){r(),a(),o(),c()}function r(){b.calendar=new t("calendar"),b.calendar.getByUser().then(function(e){b.calendars=l(e),m()})}function a(){b.event=new t("event"),b.event.getByUser().then(function(e){b.events=l(e),v()})}function o(){b.label=new t("label"),b.label.getByUser().then(function(e){b.labels=l(e),g()})}function c(){b.task=new t("task"),b.task.getByUser().then(function(e){b.tasks=l(e),h()})}function s(){b.calendars=[],b.events=[],b.labels=[],b.tasks=[],m(),v(),g(),h()}function l(e){var t=e.data;return t.success?t.data:t.title}function u(){return{calendars:i(),events:d(),labels:p(),tasks:f()}}function i(){return b.calendars}function d(){return b.events}function p(){return b.labels}function f(){return b.tasks}function m(){e.$broadcast("updateCalendars")}function v(){e.$broadcast("updateEvents")}function g(){e.$broadcast("updateLabels")}function h(){e.$broadcast("updateTasks")}var b=this;return b.calendars=[],b.events=[],b.labels=[],b.tasks=[],{cacheAll:n,cacheCalendars:r,cacheEvents:a,cacheLabels:o,cacheTasks:c,clearCache:s,getAll:u,getCalendars:i,getEvents:d,getLabels:p,getTasks:f}}angular.module("app").service("cacheService",e),e.$inject=["$rootScope","crudService"]}(),function(){"use strict";function e(e,t){function n(e){switch(this.type=e,this.base="api/",e){case"event":case"calendar":this.base+="activity/calendar/";break;case"label":case"task":this.base+="activity/task/";break;default:this.base+=e+"/"}this.base+=e+"Manager.php"}function r(t){return e.get(this.base,{params:{id:t}}).then(i)["catch"](d)}function a(){return e.get(this.base,{params:{byUser:!0}}).then(i)["catch"](d)}function o(t,n){return e.get(this.base,{params:{where:t,bindings:JSON.stringify(n)}}).then(i)["catch"](d)}function c(t){return t=this.removeUnecessaryKeys(t),e.post(this.base,t).then(i)["catch"](d)}function s(t,n){return n=this.removeUnecessaryKeys(n),e.put(this.base,n,{params:{id:t}}).then(i)["catch"](d)}function l(t){return e["delete"](this.base,{params:{id:t}}).then(i)["catch"](d)}function u(t){return e["delete"](this.base+"?usewhere=true&where="+escape(t)).then(i)["catch"](d)}function i(e){return e}function d(e){return t.error(e),{success:"false",title:"Error when querying server.",message:e}}function p(e){for(var t=["id","person_id",this.type+"_id","activity_info_id","parent_name"],n=0;n<t.length;n++)delete e[t[n]];return e}var f=n;return f.prototype={get:r,getByUser:a,getWhere:o,create:c,update:s,remove:l,removeWhere:u,removeUnecessaryKeys:p},f}angular.module("app").factory("crudService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(e,t){function n(t){return e.get(c.base+t).then(a)["catch"](o)}function r(t,n){return e.post(c.base+t,n).then(a)["catch"](o)}function a(e){return e}function o(e){return t.error(e),{success:"false",title:"Error when accessing variable.",message:e}}var c=this;return c.base="api/session/sessionVarManager.php?var=",{getVar:n,setVar:r}}angular.module("app").factory("sessionService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(){function e(e,t,n,r){t[0].focus()}return{restrict:"A",link:e}}angular.module("app").directive("spAutoFocus",e)}(),function(){"use strict";function e(){function e(e,t,n,r){function a(){s()}function o(t){return t===e.otherModel.$viewValue}function c(e,t){r.$validate()}var s=e.$watch("otherModel",c);r.$validators.spCompareTo=o,t.on("$destroy",a)}return{require:"ngModel",scope:{otherModel:"=spCompareTo"},link:e}}angular.module("app").directive("spCompareTo",e)}(),function(){"use strict";function e(e){function t(){e.logout()}t()}angular.module("app").controller("LogoutController",e),e.$inject=["logoutService"]}(),function(){"use strict";function e(e,t,n,r,a){function o(){function o(t){a.clearCache(),e.$broadcast("updateUser"),n.go("login")}function c(e){r.error(e)}return t.post("api/user/logoutManager.php").then(o)["catch"](c)}return{logout:o}}angular.module("app").factory("logoutService",e),e.$inject=["$rootScope","$http","$state","$log","cacheService"]}(),function(){"use strict";function e(e,t,n,r){function a(){i(),d(),e.$on("updateCalendars",i),e.$on("updateEvents",d),p.today=t.getToday(),p.selectedDay=p.today,p.month=t.getMonth(p.today)}function o(e,n){p.selectedDay=t.dayClicked(e,n,p.selectedDay,p.calendars)}function c(e){return t.isSameDay(e,p.selectedDay)}function s(e,n){t.showEventModal(e,n,p.calendars)}function l(){p.month=t.lastMonth(p.month)}function u(){p.month=t.nextMonth(p.month)}function i(){p.calendars=n.getCalendars()}function d(){p.events=r.getEvents()}var p=this;p.events=[],p.calendar=[],p.today=null,p.selectedDay=null,p.month=null,p.dayClicked=o,p.isSameDayAsSelected=c,p.showEventModal=s,p.lastMonth=l,p.nextMonth=u,a()}angular.module("app").controller("EventsController",e),e.$inject=["$rootScope","calendarWidgetService","calendarService","eventsService"]}(),function(){"use strict";function e(){return{templateUrl:"modules/events/events.html",controller:"EventsController",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("spEvents",e)}(),function(){"use strict";function e(e,t){function n(e){return l.event.create(e).then(s)}function r(e){return e.event_id?c(e.event_id,e):n(e)}function a(e){return l.event.remove(e).then(s)}function o(){return t.getEvents()}function c(e,t){return l.event.update(e,t).then(s)}function s(e){var n=e.data;return n.success?(t.cacheEvents(),n.data):n.title}var l=this;return l.event=new e("event"),{createEvent:n,createOrUpdateEvent:r,deleteEvent:a,getEvents:o,updateEvent:c}}angular.module("app").factory("eventsService",e),e.$inject=["crudService","cacheService"]}(),function(){"use strict";function e(e){function t(t){t.hasOwnProperty("dt_start")?(t.all_day=parseInt(t.all_day),t.dt_start=a(e(t.dt_start)),t.dt_end=a(e(t.dt_end))):(t.hasOwnProperty("due")&&t.due&&(t.due=a(e(t.due))),t.hasOwnProperty("reminder")&&t.reminder&&(t.reminder=a(e(t.reminder))))}function n(t){var n=r();return t.hasOwnProperty("dt_start")?(t.dt_start=o(e(t.dt_start,n)),t.dt_end=o(e(t.dt_end,n))):(t.hasOwnProperty("due")&&t.due&&(t.due=o(e(t.due,n))),t.hasOwnProperty("reminder")&&t.reminder&&(t.reminder=o(e(t.reminder,n)))),t}function r(){return"hh:mm a MM-DD-YYYY"}function a(e){return e.format(r())}function o(e){return e.format("YYYY-MM-DD HH:mm:ss")}return{formatForDisplay:t,formatForStorage:n,getDisplayFormat:r,toDisplayFormat:a,toStorageFormat:o}}angular.module("app").factory("formatService",e),e.$inject=["moment"]}(),function(){"use strict";function e(e,t,n,r){function a(){e.dismiss("cancel")}function o(){e.close()}function c(t){e.close(t)}function s(t){e.dismiss(t)}function l(e){r.toggleAllDay(e)}var u=this;u.groups=t,u.item=n,u.cancel=a,u.close=o,u.confirm=c,u.remove=s,u.toggleAllDay=l}angular.module("app").controller("ModalController",e),e.$inject=["$uibModalInstance","groups","item","eventModalService"]}(),function(){"use strict";function e(e){function t(){n.item.recurrence&&e.openRecurrenceModal(n.item)}var n=this;n.showRecurrenceModal=t}angular.module("app").controller("RecurrenceController",e),e.$inject=["recurrenceModalService"]}(),function(){"use strict";function e(){return{templateUrl:"modules/recurrence/recurrence.html",controller:"RecurrenceController",controllerAs:"rc",bindToController:!0,scope:{item:"="}}}angular.module("app").directive("spRepeat",e)}(),function(){"use strict";function e(){function e(e){e.recurrence=!1}function t(e){}return{clearRecurrence:e,constructRecurrence:t}}angular.module("app").factory("recurrenceService",e)}(),function(){"use strict";function e(e,t,n,r){function a(){s(),l(),e.$on("updateLabels",s),e.$on("updateTasks",l)}function o(e){r.openTaskModal(e,u.labels)}function c(e){t.toggleCompleted(e)}function s(){u.labels=n.getLabels()}function l(){u.tasks=t.getTasks()}var u=this;u.labels=[],u.tasks=[],u.showTaskModal=o,u.toggleCompleted=c,a()}angular.module("app").controller("TasksController",e),e.$inject=["$rootScope","tasksService","labelService","taskModalService"]}(),function(){"use strict";function e(){return{templateUrl:"modules/tasks/tasks.html",controller:"TasksController",controllerAs:"vm",bindToController:!0,scope:{order:"=",days:"=withinDays",inLabels:"=inGroups"}}}angular.module("app").directive("spTasks",e)}(),function(){"use strict";function e(e,t){function n(e){return u.task.create(e).then(l)}function r(e){return e.task_id?s(e.task_id,e):n(e)}function a(e){return u.task.remove(e).then(l)}function o(){return t.getTasks()}function c(e){return e.completed=!parseInt(e.completed),s(e.task_id,e).then(o)}function s(e,t){return u.task.update(e,t).then(l)}function l(e){var n=e.data;return n.success?(t.cacheTasks(),n.data):n.title}var u=this;return u.task=new e("task"),{createTask:n,createOrUpdateTask:r,deleteTask:a,getTasks:o,toggleCompleted:c,updateTask:s}}angular.module("app").factory("tasksService",e),e.$inject=["crudService","cacheService"]}(),function(){"use strict";function e(e,t,n){function r(e,t){return n.uploadFile(e).then(function(e){return e})}var a=this;a.uploadFile=r}angular.module("app").controller("UploadController",e),e.$inject=["$scope","$http","uploadService"]}(),function(){"use strict";function e(e){function t(t,n,r){function a(e){t.$apply(function(){var e=n[0].files[0];e.size<=o?t.uc.uploadFile(e).then(function(e){t.spFileChange=e}):alert("File must be less than "+o/1024/1024+"MB.")})}var o=2097152;e(r.spFileChange);n[0].addEventListener("change",a,!1)}return{restrict:"A",controller:"UploadController",controllerAs:"uc",link:t,scope:{spFileChange:"="}}}angular.module("app").directive("spFileChange",e),e.$inject=["$parse"]}(),function(){"use strict";function e(e,t){function n(n){var r=new FormData;return r.append("file",n),e.post("api/upload/uploadManager.php",r,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).then(function(e){return e.data.success?e.data.data:(t.error(e.title),"")})["catch"](function(e){t.error(e)})}return{uploadFile:n}}angular.module("app").factory("uploadService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(e,t,n,r){function a(){}function o(e){r.openUserModal(e).then(function(e){e&&(c.users=e)})}var c=this;c.isAdmin=e,c.users=t,c.showUserModal=o,a()}angular.module("app").controller("AdminController",e),e.$inject=["isAdmin","users","userService","userModalService"]}(),function(){"use strict";function e(e){function t(){n.loading=!0,e.login(n.user).then(function(e){n.loading=!1,n.error=e})}var n=this;n.loading=!1,n.error="",n.login=t}angular.module("app").controller("LoginController",e),e.$inject=["loginService"]}(),function(){"use strict";function e(e,t,n,r,a){function o(o){function c(t){return t.data.success===!1?t.data.title:(a.cacheAll(),e.$broadcast("updateUser"),void n.go("dashboard"))}function s(e){return r.error(e),"Something went wrong. Please try again."}return o.name=o.name.toLowerCase().trim(),t.post("api/user/loginManager.php",o).then(c)["catch"](s)}return{login:o}}angular.module("app").factory("loginService",e),e.$inject=["$rootScope","$http","$state","$log","cacheService"]}(),function(){"use strict";function e(e){function t(){n.loading=!0,e.register(n.user).then(function(e){n.loading=!1,n.error=e})}var n=this;n.error="",n.loading=!1,n.register=t}angular.module("app").controller("RegisterController",e),e.$inject=["registerService"]}(),function(){"use strict";function e(e,t,n){function r(n){function r(n){return"false"===n.success?(t.error(n.title),n.title):void e.url("/login")}return n.name=n.name.toLowerCase().trim(),a.crud.create(n).then(r)}var a=this;return a.crud=new n("user"),{register:r}}angular.module("app").factory("registerService",e),e.$inject=["$location","$log","crudService"]}(),function(){"use strict";function e(e){this.labelId=e.labelId}angular.module("app").controller("LabelPageController",e),e.$inject=["$stateParams"]}(),function(){"use strict";function e(e,t,n){function r(){function e(e){return e.data.success!==!1?o.resolve(n.OK):o.reject(n.UNAUTHORIZED),o.promise}return t.getVar("name").then(e)}function a(){function e(e){var t=e.data;return t.success===!1||"0"===t.data?o.reject(n.FORBIDDEN):o.resolve(n.OK),o.promise}return t.getVar("admin").then(e)}var o=e.defer();return{isAuthenticated:r,isAdmin:a}}angular.module("app").factory("accessService",e),e.$inject=["$q","sessionService","statusService"]}(),function(){"use strict";function e(){return{OK:200,UNAUTHORIZED:401,FORBIDDEN:403}}angular.module("app").service("statusService",e)}(),function(){"use strict";function e(e,t){function n(e){return s.calendar.create(e).then(c)}function r(e){return s.calendar.remove(e).then(c)}function a(){return t.getCalendars()}function o(e,t){return s.calendar.update(e,t).then(c)}function c(e){var n=e.data;return n.success?(t.cacheCalendars(),n.data):n.title}var s=this;return s.calendar=new e("calendar"),{createCalendar:n,deleteCalendar:r,getCalendars:a,updateCalendar:o}}angular.module("app").factory("calendarService",e),e.$inject=["crudService","cacheService"]}(),function(){"use strict";function e(e,t,n,r){function a(t,a){var o={};return angular.extend(o,t),r.formatForDisplay(o),e.open({controller:"ModalController",controllerAs:"vm",templateUrl:"modules/events/modal/event.modal.html",resolve:{groups:function(){return a},item:o}}).result.then(function(e){return r.formatForStorage(e),n.createOrUpdateEvent(e).then(n.getEvents)},function(e){return Number(e)?n.deleteEvent(e).then(n.getEvents):void 0})}function o(e){var n=r.getDisplayFormat();if(e.all_day)e.dt_start=r.toDisplayFormat(t(e.dt_start,n).startOf("day")),e.dt_end=r.toDisplayFormat(t(e.dt_start,n).endOf("day"));else{var a=t().startOf("hour").hour();e.dt_start=r.toDisplayFormat(t(e.dt_start,n).hour(a)),e.dt_end=r.toDisplayFormat(t(e.dt_start,n).hour(a).add(1,"hours"))}}return{openEventModal:a,toggleAllDay:o}}angular.module("app").factory("eventModalService",e),e.$inject=["$uibModal","moment","eventsService","formatService"]}(),function(){"use strict";function e(e,t){function n(e,t,n,r){return c(t.fullDate,n)?(u(e,{dt_start:t.fullDate,dt_end:t.fullDate.clone().endOf("day"),all_day:1},r),n):t.fullDate}function r(e){for(var t=[],n=e.clone().date(1).startOf("week"),r=0;6>r;r++)t.push(o(n,e.month())),n=n.add(1,"weeks");return t}function a(){return e()}function o(t,n){for(var r=[],a=t.clone(),o=0;7>o;o++)r.push({number:a.date(),isTargetMonth:a.month()===n,isToday:a.isSame(e(),"day"),fullDate:a}),a=a.clone().add(1,"days");return r}function c(e,t){return e.isSame(t,"day")}function s(e){return r(e[3][0].fullDate.clone().subtract(1,"months"))}function l(e){return r(e[3][0].fullDate.clone().add(1,"months"))}function u(e,n,r){e.stopPropagation(),t.openEventModal(n,r)}return{dayClicked:n,getMonth:r,getToday:a,getWeek:o,isSameDay:c,lastMonth:s,nextMonth:l,showEventModal:u}}angular.module("app").factory("calendarWidgetService",e),e.$inject=["moment","eventModalService"]}(),function(){"use strict";function e(e,t){function n(n){return e.open({controller:"ModalController",controllerAs:"vm",templateUrl:"modules/recurrence/modal/recurrence.modal.html",resolve:{groups:function(){return r},item:n}}).result.then(function(e){t.constructRecurrence(n)},function(e){t.clearRecurrence(n)})}var r={freq:["hourly","daily","weekly","monthly","yearly"],days:["mo","tu","we","th","fr","sa","su"]};return{openRecurrenceModal:n}}angular.module("app").factory("recurrenceModalService",e),e.$inject=["$uibModal","recurrenceService"]}(),function(){"use strict";function e(e,t){function n(e){return s.label.create(e).then(c)}function r(e){return s.label.remove(e).then(c)}function a(){return t.getLabels()}function o(e,t){return s.label.update(e,t).then(c)}function c(e){var n=e.data;return n.success?(t.cacheLabels(),n.data):n.title}var s=this;return s.label=new e("label"),{createLabel:n,deleteLabel:r,getLabels:a,updateLabel:o}}angular.module("app").factory("labelService",e),e.$inject=["crudService","cacheService"]}(),function(){"use strict";function e(e,t,n){function r(t,r){var a={};angular.extend(a,t),e.open({controller:"ModalController",controllerAs:"vm",templateUrl:"modules/tasks/modal/subtask.modal.html",resolve:{groups:r,item:a}}).result.then(function(e){n.createOrUpdateSubtask(e.subtask,e.task)},function(e){"string"!=typeof e&&n.deleteSubtask(e.subtask,e.task)})}return{openSubtaskModal:r}}angular.module("app").factory("subtaskModalService",e),e.$inject=["$uibModal","labelService","subtasksService"]}(),function(){"use strict";function e(e,t,n){function r(r,a){var o={};return angular.extend(o,r),n.formatForDisplay(o),e.open({controller:"ModalController",controllerAs:"vm",templateUrl:"modules/tasks/modal/task.modal.html",resolve:{groups:function(){return a},item:o}}).result.then(function(e){return e=n.formatForStorage(e),t.createOrUpdateTask(e).then(t.getTasks)},function(e){return Number(e)?t.deleteTask(e).then(t.getTasks):void 0})}return{openTaskModal:r}}angular.module("app").factory("taskModalService",e),e.$inject=["$uibModal","tasksService","formatService"]}(),function(){"use strict";function e(e,t){function n(e){t.openSubtaskModal(e,a.task)}function r(t){e.toggleCompleted(t)}var a=this;a.showSubtaskModal=n,a.toggleCompleted=r}angular.module("app").controller("SubtasksController",e),e.$inject=["subtasksService","subtaskModalService"]}(),function(){"use strict";function e(){return{templateUrl:"modules/tasks/subtasks/subtasks.html",controller:"SubtasksController",controllerAs:"st",bindToController:!0,scope:{task:"="}}}angular.module("app").directive("spSubtasks",e)}(),function(){"use strict";function e(e,t){function n(e,t){t.subtasks||(t.subtasks={currentId:1,list:[]}),void 0===e.id&&(e.id=t.subtasks.currentId++,e.completed=!1,t.subtasks.list.push(e))}function r(e,t){t.subtasks.list.splice(t.subtasks.list.indexOf(e),1)}function a(e){e.completed=!e.completed}return{createOrUpdateSubtask:n,deleteSubtask:r,toggleCompleted:a}}angular.module("app").factory("subtasksService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(e,t){function n(n){var r={};return angular.extend(r,n),e.open({controller:"ModalController",controllerAs:"vm",templateUrl:"pages/admin/modal/user.modal.html",resolve:{groups:{},item:r}}).result.then(function(e){return t.createOrUpdateUser(e).then(t.getUsers)},function(e){return Number(e)?t.deleteUser(e).then(t.getUsers):void 0})}return{openUserModal:n}}angular.module("app").factory("userModalService",e),e.$inject=["$uibModal","userService"]}(),function(){"use strict";function e(e){function t(e){return s.user.create(e).then(c)}function n(e){return e.id?o(e.id,e):t(e)}function r(e){return s.user.remove(e).then(c)}function a(){return s.user.getWhere("",{}).then(c)}function o(e,t){return s.user.update(e,t).then(c)}function c(e){var t=e.data;return t.success?t.data:t.title}var s=this;return s.user=new e("user"),{createUser:t,createOrUpdateUser:n,deleteUser:r,getUsers:a,updateUser:o}}angular.module("app").factory("userService",e),e.$inject=["crudService"]}(),function(){"use strict";function e(e,t,n){function r(){e.$on("updateUser",a)}function a(){n.getUser().then(function(e){o.user=e})}var o=this;o.user=t,r()}angular.module("app").controller("HeaderController",e),e.$inject=["$rootScope","user","headerService"]}(),function(){"use strict";function e(e,t,n){function r(){function e(e){var t=e.data;return t.success===!1?{name:"",avatar:"content/img/user.png"}:t.data}return n.getVar("all").then(e)}return{getUser:r}}angular.module("app").factory("headerService",e),e.$inject=["$http","$log","sessionService"]}(),function(){"use strict";function e(e,t,n,r){function a(){l(),u(),i.collapsed=r.getCollapsed(),e.$on("updateCalendars",l),e.$on("updateLabels",u)}function o(){i.collapsed=r.toggleSidebar()}function c(){i.collapsed=r.toggleCalendars()}function s(){i.collapsed=r.toggleLabels()}function l(){i.calendars=n.getCalendars()}function u(){i.labels=t.getLabels()}var i=this;i.collapsed={},i.labels=[],i.calendars=[],i.toggleSidebar=o,i.toggleCalendars=c,i.toggleLabels=s,a()}angular.module("app").controller("SidebarController",e),e.$inject=["$rootScope","labelService","calendarService","sidebarService"]}(),function(){"use strict";function e(e){function t(){e.innerWidth<600?c.collapsed={sidebar:!0,calendars:!0,labels:!0}:c.collapsed={sidebar:!1,calendars:!1,labels:!1}}function n(){return c.collapsed}function r(){return c.collapsed.sidebar=!c.collapsed.sidebar,c.collapsed.sidebar&&(c.collapsed.calendars=!0,c.collapsed.labels=!0),c.collapsed}function a(){return c.collapsed.calendars=!c.collapsed.calendars,c.collapsed.calendars||(c.collapsed.sidebar=!1),c.collapsed}function o(){return c.collapsed.labels=!c.collapsed.labels,c.collapsed.labels||(c.collapsed.sidebar=!1),c.collapsed}var c=this;return c.collapsed={},t(),{getCollapsed:n,toggleSidebar:r,toggleCalendars:a,toggleLabels:o}}angular.module("app").factory("sidebarService",e),e.$inject=["$window"]}();
//# sourceMappingURL=data:application/json;base64,
