!function(){"use strict";function e(){}angular.module("app",["ngRoute"]).controller("AppController",e)}(),function(){"use strict";function e(e){e.when("/login",{templateUrl:"modules/login/login.html",controller:"LoginController",controllerAs:"vm"}).when("/logout",{templateUrl:"modules/logout/logout.html",controller:"LogoutController",controllerAs:"vm"}).when("/register",{templateUrl:"pages/register/register.html",controller:"RegisterController",controllerAs:"vm"}).when("/dashboard",{templateUrl:"pages/dashboard/dashboard.html",controller:"DashboardController",controllerAs:"vm"}).otherwise({redirectTo:"/dashboard"})}angular.module("app").config(e),e.$inject=["$routeProvider"]}(),function(){"use strict";function e(e,r){function t(e){this.base="api/"+e+"/"+e+"Manager.php"}function n(r){return e.get(this.base+"?id="+r).then(i)["catch"](u)}function o(r){return e.post(this.base,r).then(i)["catch"](u)}function a(r,t){return e.put(this.base+"?id="+r,t).then(i)["catch"](u)}function l(r){return e["delete"](this.base+"?id="+r).then(i)["catch"](u)}function i(e){return e.data}function u(e){return r.error(e),!1}var c=t;return c.prototype={get:n,create:o,update:a,remove:l},c}angular.module("app").factory("crudService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(){function e(e,r,t,n){function o(){i()}function a(r){return r===e.otherModel.$viewValue}function l(e,r){n.$validate()}var i=e.$watch("otherModel",l);n.$validators.spCompareTo=a,r.on("$destroy",o)}var r={require:"ngModel",scope:{otherModel:"=spCompareTo"},link:e};return r}angular.module("app").directive("spCompareTo",e)}(),function(){"use strict";function e(e){function r(){function r(e){t.loading=!1,t.error=e}t.loading=!0,e.login(t.user).then(r)}var t=this;t.loading=!1,t.error="",t.login=r}angular.module("app").controller("LoginController",e),e.$inject=["loginService"]}(),function(){"use strict";function e(e,r,t){function n(n){function o(e){return"true"===e.data&&r.url("/dashboard"),"Username or password was incorrect."}function a(e){return t.error(e),"Something went wrong. Please try again."}return e.post("api/managers/loginManager.php",n).then(o)["catch"](a)}return{login:n}}angular.module("app").factory("loginService",e),e.$inject=["$http","$location","$log"]}(),function(){"use strict";function e(){}angular.module("app").controller("DashboardController",e)}(),function(){"use strict";function e(e){function r(){function r(e){t.loading=!1,t.error=e}t.loading=!0,e.register(t.user).then(r)}var t=this;t.loading=!1,t.error="",t.register=r}angular.module("app").controller("RegisterController",e),e.$inject=["registerService"]}(),function(){"use strict";function e(e,r){function t(r){function t(r){return"1"===r&&e.url("/login"),"Username taken."}return n.crud.create(r).then(t)}var n=this;return n.crud=new r("user"),{register:t}}angular.module("app").factory("registerService",e),e.$inject=["$location","crudService"]}(),function(){"use strict";function e(e){function r(e){t.name=e.name,t.url=e.url}var t=this;t.name="",t.url="",e.getUser().then(r)}angular.module("app").controller("HeaderController",e),e.$inject=["headerService"]}(),function(){"use strict";function e(){function e(e,r,t){}return{link:e,templateUrl:"pages/layout/header/header.html",controller:"HeaderController",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("spHeader",e)}(),function(){"use strict";function e(e,r){function t(){function t(e){return console.log(e),"false"===e.data?{name:"Login",url:"#/login"}:{name:e.data,url:"#/dashboard"}}function n(e){return r.error(e),"Something went wrong. Please try again."}return e.get("api/session/sessionVarManager.php?var=name").then(t)["catch"](n)}return{getUser:t}}angular.module("app").factory("headerService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(){var e=this;e.collapsed=!0,e.toggleSidebar=function(){e.collapsed=!e.collapsed}}angular.module("app").controller("SidebarController",e)}(),function(){"use strict";function e(){function e(e,r,t){function n(e){e?r.removeClass("collapsed"):r.addClass("collapsed")}e.$watch(t.sidebarDirective,n)}return{link:e,templateUrl:"pages/layout/sidebar/sidebar.html",controller:"SidebarController",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("spSidebar",e)}();
//# sourceMappingURL=data:application/json;base64,
