!function(){"use strict";function e(e,t){e.$on("$routeChangeError",t.routeChangeError)}angular.module("app",["ngRoute","ui.bootstrap"]).controller("AppController",e),e.$inject=["$rootScope","appService"]}(),function(){"use strict";function e(e){function t(e){return e.isAuthenticated()}function r(e){return e.isAdmin()}e.when("/login",{templateUrl:"modules/login/login.html",controller:"LoginController",controllerAs:"vm"}).when("/logout",{templateUrl:"modules/logout/logout.html",controller:"LogoutController",controllerAs:"vm"}).when("/register",{templateUrl:"pages/register/register.html",controller:"RegisterController",controllerAs:"vm"}).when("/dashboard",{templateUrl:"pages/dashboard/dashboard.html",controller:"DashboardController",controllerAs:"vm",resolve:{isAuthenticated:["accessService",t]}}).when("/admin",{templateUrl:"pages/admin/admin.html",controller:"AdminController",controllerAs:"vm",resolve:{isAdmin:["accessService",r]}}).otherwise({redirectTo:"/login"})}angular.module("app").config(e),e.$inject=["$routeProvider"]}(),function(){"use strict";function e(e,t){function r(r,n,o,a){a===t.UNAUTHORIZED?e.path("/login"):a===t.FORBIDDEN&&e.path("/forbidden")}return{routeChangeError:r}}angular.module("app").factory("appService",e),e.$inject=["$location","statusService"]}(),function(){"use strict";function e(e,t){function r(e){switch(this.type=e,this.base="api/",e){case"event":case"calendar":this.base+="activity/calendar/";break;case"label":case"task":this.base+="activity/task/";break;default:this.base+=e+"/"}this.base+=e+"Manager.php"}function n(t){return e.get(this.base+"?id="+t).then(l)["catch"](u)}function o(t,r){return e.get(this.base+"?usewhere=true&where="+escape(t)+"&id="+r).then(l)["catch"](u)}function a(t){return t=this.removeUnecessaryKeys(t),e.post(this.base,t).then(l)["catch"](u)}function i(t,r){return r=this.removeUnecessaryKeys(r),e.put(this.base+"?id="+t,r).then(l)["catch"](u)}function c(t){return e["delete"](this.base+"?id="+t).then(l)["catch"](u)}function s(t,r){return e["delete"](this.base+"?where=true&id="+r,t).then(l)["catch"](u)}function l(e){return e}function u(e){return t.error(e),{success:"false",title:"Error when querying server.",message:e}}function d(e){for(var t=["id","person_id",this.type+"_id","activity_info_id","parent_name"],r=0;r<t.length;r++)delete e[t[r]];return e}var p=r;return p.prototype={get:n,getWhere:o,create:a,update:i,remove:c,removeWhere:s,removeUnecessaryKeys:d},p}angular.module("app").factory("crudService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(e,t){function r(t){return e.get(i.base+t).then(o)["catch"](a)}function n(t,r){return e.post(i.base+t,r).then(o)["catch"](a)}function o(e){return e}function a(e){return t.error(e),{success:"false",title:"Error when accessing variable.",message:e}}var i=this;return i.base="api/session/sessionVarManager.php?var=",{getVar:r,setVar:n}}angular.module("app").factory("sessionService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(){function e(e,t,r,n){function o(){c()}function a(t){return t===e.otherModel.$viewValue}function i(e,t){n.$validate()}var c=e.$watch("otherModel",i);n.$validators.spCompareTo=a,t.on("$destroy",o)}var t={require:"ngModel",scope:{otherModel:"=spCompareTo"},link:e};return t}angular.module("app").directive("spCompareTo",e)}(),function(){"use strict";function e(e){function t(){r.loading=!0,e.login(r.user).then(function(e){r.loading=!1,r.error=e})}var r=this;r.loading=!1,r.error="",r.login=t}angular.module("app").controller("LoginController",e),e.$inject=["loginService"]}(),function(){"use strict";function e(e,t,r){function n(n){function o(e){return e.data.success===!1?e.data.title:void t.path("/dashboard")}function a(e){return r.error(e),"Something went wrong. Please try again."}return e.post("api/user/loginManager.php",n).then(o)["catch"](a)}return{login:n}}angular.module("app").factory("loginService",e),e.$inject=["$http","$location","$log"]}(),function(){"use strict";function e(e,t,r){function n(){e.close()}function o(){e.dismiss("cancel")}function a(t){e.dismiss(t)}function i(t){e.close(t)}var c=this;c.groups=t,c.item=r,c.close=n,c.cancel=o,c.confirm=i,c.remove=a}angular.module("app").controller("ModalController",e),e.$inject=["$uibModalInstance","groups","item"]}(),function(){"use strict";function e(e,t){function r(){e.getTasks().then(a)}function n(e){t.openTaskModal(e).then(a)}function o(t){e.toggleCompleted(t).then(a)}function a(e){e&&(i.tasks=e)}var i=this;i.tasks=[],i.showTaskDialog=n,i.toggleCompleted=o,r()}angular.module("app").controller("TasksController",e),e.$inject=["tasksService","taskModalService"]}(),function(){"use strict";function e(){return{templateUrl:"modules/tasks/tasks.html",controller:"TasksController",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("spTasks",e)}(),function(){"use strict";function e(e,t,r,n){function o(e){return d.task.create(e).then(u)}function a(e){return e.task_id?l(e.task_id,e):o(e)}function i(e){return d.task.remove(e).then(u)}function c(){function e(e){var t=e.data;return t.success?d.task.getWhere("",t.data).then(u):t.title}return n.getVar("id").then(e)}function s(e){return e.completed=!parseInt(e.completed),l(e.task_id,e).then(c)}function l(e,t){return d.task.update(e,t).then(u)}function u(e){var t=e.data;return t.success?t.data:t.title}var d=this;return d.task=new r("task"),{createTask:o,createOrUpdateTask:a,deleteTask:i,getTasks:c,toggleCompleted:s,updateTask:l}}angular.module("app").factory("tasksService",e),e.$inject=["$http","$log","crudService","sessionService"]}(),function(){"use strict";function e(){}angular.module("app").controller("DashboardController",e)}(),function(){"use strict";function e(e){function t(){r.loading=!0,e.register(r.user).then(function(e){r.loading=!1,r.error=e})}var r=this;r.error="",r.loading=!1,r.register=t}angular.module("app").controller("RegisterController",e),e.$inject=["registerService"]}(),function(){"use strict";function e(e,t,r){function n(r){function n(r){return"false"===r.success?(t.error(r.title),r.title):void e.url("/login")}return o.crud.create(r).then(n)}var o=this;return o.crud=new r("user"),{register:n}}angular.module("app").factory("registerService",e),e.$inject=["$location","$log","crudService"]}(),function(){"use strict";function e(e,t,r,n){function o(){function e(e){return e.data.success!==!1?i.resolve(n.OK):i.reject(n.UNAUTHORIZED),i.promise}return r.getVar("name").then(e)}function a(){}var i=t.defer();return{isAuthenticated:o,isAdmin:a}}angular.module("app").factory("accessService",e),e.$inject=["$location","$q","sessionService","statusService"]}(),function(){"use strict";function e(){return{OK:200,UNAUTHORIZED:401,FORBIDDEN:403}}angular.module("app").service("statusService",e)}(),function(){"use strict";function e(e,t,r){function n(n){return angular.isString(n.due)&&(n.due=new Date(n.due.replace(/(.+) (.+)/,"$1T$2Z"))),angular.isString(n.reminder)&&(n.reminder=new Date(n.reminder.replace(/(.+) (.+)/,"$1T$2Z"))),e.open({controller:"ModalController",controllerAs:"vm",templateUrl:"modules/tasks/modal/task.modal.html",resolve:{groups:t.getLabels(),item:n}}).result.then(function(e){return r.createOrUpdateTask(e).then(r.getTasks)},function(e){return e?r.deleteTask(e).then(r.getTasks):void 0})}return{openTaskModal:n}}angular.module("app").factory("taskModalService",e),e.$inject=["$uibModal","labelService","tasksService"]}(),function(){"use strict";function e(e,t,r,n){function o(e){return l.label.create(e).then(s)}function a(e){return l.label.remove(e).then(s)}function i(){function e(e){var t=e.data;return t.success?l.label.getWhere("person_id="+t.data,"").then(s):t.title}return n.getVar("id").then(e)}function c(e,t){return l.label.update(e,t).then(s)}function s(e){var t=e.data;return t.success?t.data:t.title}var l=this;return l.label=new r("label"),{createLabel:o,deleteLabel:a,getLabels:i,updateLabel:c}}angular.module("app").factory("labelService",e),e.$inject=["$http","$log","crudService","sessionService"]}(),function(){"use strict";function e(e,t){function r(t){e.$evalAsync(function(){n.name=t.name===!1?"Login":t.name,n.url=t.url})}var n=this;n.name="",n.url="",t.getUser().then(r)}angular.module("app").controller("HeaderController",e),e.$inject=["$scope","headerService"]}(),function(){"use strict";function e(){function e(e,t,r){}return{link:e,templateUrl:"pages/layout/header/header.html",controller:"HeaderController",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("spHeader",e)}(),function(){"use strict";function e(e,t,r){function n(){function e(e){var t=e.data;return t.success===!1?{name:!1,url:"#/login"}:{name:t.data,url:"#/dashboard"}}return r.getVar("name").then(e)}return{getUser:n}}angular.module("app").factory("headerService",e),e.$inject=["$http","$log","sessionService"]}(),function(){"use strict";function e(){var e=this;e.collapsed=!0,e.toggleSidebar=function(){e.collapsed=!e.collapsed}}angular.module("app").controller("SidebarController",e)}(),function(){"use strict";function e(){function e(e,t,r){function n(e){e?t.removeClass("collapsed"):t.addClass("collapsed")}e.$watch(r.sidebarDirective,n)}return{link:e,templateUrl:"pages/layout/sidebar/sidebar.html",controller:"SidebarController",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("spSidebar",e)}();
//# sourceMappingURL=data:application/json;base64,
