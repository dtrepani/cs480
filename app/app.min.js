!function(){"use strict";function e(e,r){e.$on("$routeChangeError",r.routeChangeError)}angular.module("app",["ngRoute"]).controller("AppController",e),e.$inject=["$rootScope","appService"]}(),function(){"use strict";function e(e){function r(e){return e.isAuthenticated()}function t(e){return e.isAdmin()}e.when("/login",{templateUrl:"modules/login/login.html",controller:"LoginController",controllerAs:"vm"}).when("/logout",{templateUrl:"modules/logout/logout.html",controller:"LogoutController",controllerAs:"vm"}).when("/register",{templateUrl:"pages/register/register.html",controller:"RegisterController",controllerAs:"vm"}).when("/dashboard",{templateUrl:"pages/dashboard/dashboard.html",controller:"DashboardController",controllerAs:"vm",resolve:{isAuthenticated:["accessService",r]}}).when("/admin",{templateUrl:"pages/admin/admin.html",controller:"AdminController",controllerAs:"vm",resolve:{isAdmin:["accessService",t]}}).otherwise({redirectTo:"/login"})}angular.module("app").config(e),e.$inject=["$routeProvider"]}(),function(){"use strict";function e(e,r){function t(t,n,o,i){i===r.UNAUTHORIZED?e.path("/login"):i===r.FORBIDDEN&&e.path("/forbidden")}return{routeChangeError:t}}angular.module("app").factory("appService",e),e.$inject=["$location","statusService"]}(),function(){"use strict";function e(){function e(e,r,t,n){function o(){c()}function i(r){return r===e.otherModel.$viewValue}function a(e,r){n.$validate()}var c=e.$watch("otherModel",a);n.$validators.spCompareTo=i,r.on("$destroy",o)}var r={require:"ngModel",scope:{otherModel:"=spCompareTo"},link:e};return r}angular.module("app").directive("spCompareTo",e)}(),function(){"use strict";function e(e){}angular.module("app").controller("TasksController",e),e.$inject=["tasksService"]}(),function(){"use strict";function e(){function e(e,r,t){}return{link:e,templateUrl:"modules/tasks/tasks.html",controller:"TasksController",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("spTasks",e)}(),function(){"use strict";function e(e,r){return{}}angular.module("app").factory("tasksService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(e,r){function t(e){this.base="api/"+e+"/"+e+"Manager.php"}function n(r){return e.get(this.base+"?id="+r).then(c)["catch"](l)}function o(r){return e.post(this.base,r).then(c)["catch"](l)}function i(r,t){return e.put(this.base+"?id="+r,t).then(c)["catch"](l)}function a(r){return e["delete"](this.base+"?id="+r).then(c)["catch"](l)}function c(e){return e}function l(e){return r.error(e),{success:"false",title:"Error when querying server.",message:e}}var u=t;return u.prototype={get:n,create:o,update:i,remove:a},u}angular.module("app").factory("crudService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(e,r){function t(r){return e.get(a.base+r).then(o)["catch"](i)}function n(r,t){return e.post(a.base+r,t).then(o)["catch"](i)}function o(e){return e}function i(e){return r.error(e),{success:"false",title:"Error when accessing variable.",message:e}}var a=this;return a.base="api/session/sessionVarManager.php?var=",{getVar:t,setVar:n}}angular.module("app").factory("sessionService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(e){function r(){function r(e){t.loading=!1,t.error=e}t.loading=!0,e.login(t.user).then(r)}var t=this;t.loading=!1,t.error="",t.login=r}angular.module("app").controller("LoginController",e),e.$inject=["loginService"]}(),function(){"use strict";function e(e,r,t){function n(n){function o(e){return e.data.success===!1?e.data.title:void r.path("/dashboard")}function i(e){return t.error(e),"Something went wrong. Please try again."}return e.post("api/managers/loginManager.php",n).then(o)["catch"](i)}return{login:n}}angular.module("app").factory("loginService",e),e.$inject=["$http","$location","$log"]}(),function(){"use strict";function e(){}angular.module("app").controller("DashboardController",e)}(),function(){"use strict";function e(e){function r(){function r(e){t.loading=!1,t.error=e}t.loading=!0,e.register(t.user).then(r)}var t=this;t.loading=!1,t.error="",t.register=r}angular.module("app").controller("RegisterController",e),e.$inject=["registerService"]}(),function(){"use strict";function e(e,r,t){function n(t){function n(t){return"false"===t.success?(r.error(t.title),t.title):void e.url("/login")}return o.crud.create(t).then(n)}var o=this;return o.crud=new t("user"),{register:n}}angular.module("app").factory("registerService",e),e.$inject=["$location","$log","crudService"]}(),function(){"use strict";function e(){var e=this;e.collapsed=!0,e.toggleSidebar=function(){e.collapsed=!e.collapsed}}angular.module("app").controller("SidebarController",e)}(),function(){"use strict";function e(){function e(e,r,t){function n(e){e?r.removeClass("collapsed"):r.addClass("collapsed")}e.$watch(t.sidebarDirective,n)}return{link:e,templateUrl:"pages/layout/sidebar/sidebar.html",controller:"SidebarController",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("spSidebar",e)}(),function(){"use strict";function e(e,r,t,n){function o(){function e(e){return e.data.success!==!1?a.resolve(n.OK):a.reject(n.UNAUTHORIZED),a.promise}return t.getVar("name").then(e)}function i(){}var a=r.defer();return{isAuthenticated:o,isAdmin:i}}angular.module("app").factory("accessService",e),e.$inject=["$location","$q","sessionService","statusService"]}(),function(){"use strict";function e(){return{OK:200,UNAUTHORIZED:401,FORBIDDEN:403}}angular.module("app").service("statusService",e)}(),function(){"use strict";function e(e,r){function t(r){e.$evalAsync(function(){n.name=r.name===!1?"Login":r.name,n.url=r.url})}var n=this;n.name="",n.url="",r.getUser().then(t)}angular.module("app").controller("HeaderController",e),e.$inject=["$scope","headerService"]}(),function(){"use strict";function e(){function e(e,r,t){}return{link:e,templateUrl:"pages/layout/header/header.html",controller:"HeaderController",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("spHeader",e)}(),function(){"use strict";function e(e,r,t){function n(){function e(e){var r=e.data;return r.success===!1?{name:!1,url:"#/login"}:{name:r.data,url:"#/dashboard"}}return t.getVar("name").then(e)}return{getUser:n}}angular.module("app").factory("headerService",e),e.$inject=["$http","$log","sessionService"]}();
//# sourceMappingURL=data:application/json;base64,
