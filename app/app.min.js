!function(){"use strict";function r(){}angular.module("app",["ngRoute"]).controller("AppController",r)}(),function(){"use strict";function r(r){r.when("/login",{templateUrl:"pages/login/login.html",controller:"LoginController",controllerAs:"vm"}).when("/logout",{templateUrl:"pages/logout/logout.html",controller:"LogoutController",controllerAs:"vm"}).when("/register",{templateUrl:"pages/register/register.html",controller:"RegisterController",controllerAs:"vm"}).when("/dashboard",{templateUrl:"pages/dashboard/dashboard.html",controller:"DashboardController",controllerAs:"vm"}).otherwise({redirectTo:"/dashboard"})}angular.module("app").config(r),r.$inject=["$routeProvider"]}(),function(){"use strict";function r(r,e){function t(r){this.base="api/"+r+"/"+r+"Manager.php"}function n(e){return r.get(this.base+"?id="+e).then(a)["catch"](c)}function o(e){return r.post(this.base,e).then(a)["catch"](c)}function i(e,t){return r.put(this.base+"?id="+e,t).then(a)["catch"](c)}function l(e){return r["delete"](this.base+"?id="+e).then(a)["catch"](c)}function a(r){return r.data}function c(r){return e.error(r),!1}var u=t;return u.prototype={get:n,create:o,update:i,remove:l},u}angular.module("app").factory("crudService",r),r.$inject=["$http","$log"]}(),function(){"use strict";function r(r){function e(){function e(r){t.loading=!1,t.error=r}t.loading=!0,r.login(t.user).then(e)}var t=this;t.loading=!1,t.error="",t.login=e}angular.module("app").controller("LoginController",r),r.$inject=["loginService"]}(),function(){"use strict";function r(r,e,t){function n(n){function o(r){return"true"===r.data&&e.url("/dashboard"),"Username or password was incorrect."}function i(r){return t.error(r),"Something went wrong. Please try again."}return r.post("api/managers/loginManager.php",n).then(o)["catch"](i)}return{login:n}}angular.module("app").factory("loginService",r),r.$inject=["$http","$location","$log"]}(),function(){"use strict";function r(){}angular.module("app").controller("DashboardController",r)}(),function(){"use strict";function r(r){function e(){function e(r){t.loading=!1,t.error=r}t.loading=!0,r.register(t.user).then(e)}var t=this;t.loading=!1,t.error="",t.register=e}angular.module("app").controller("RegisterController",r),r.$inject=["registerService"]}(),function(){"use strict";function r(r,e){function t(e){function t(e){return"1"===e&&r.url("/login"),"Username taken."}return n.crud.create(e).then(t)}var n=this;return n.crud=new e("user"),{register:t}}angular.module("app").factory("registerService",r),r.$inject=["$location","crudService"]}(),function(){"use strict";function r(){function r(r,e,t,n){function o(){a()}function i(e){return e===r.otherModel.$viewValue}function l(r,e){n.$validate()}var a=r.$watch("otherModel",l);n.$validators.spCompareTo=i,e.on("$destroy",o)}var e={require:"ngModel",scope:{otherModel:"=spCompareTo"},link:r};return e}angular.module("app").directive("spCompareTo",r)}(),function(){"use strict";function r(){var r=this;r.collapsed=!0,r.toggleSidebar=function(){r.collapsed=!r.collapsed}}angular.module("app").controller("SidebarController",r)}(),function(){"use strict";function r(){function r(r,e,t){function n(r){r?e.removeClass("collapsed"):e.addClass("collapsed")}r.$watch(t.sidebarDirective,n)}return{link:r,templateUrl:"modules/sidebar/sidebar.html",controller:"SidebarController",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("spSidebar",r)}();
//# sourceMappingURL=data:application/json;base64,
