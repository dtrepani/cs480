!function(){"use strict";function e(e,t,r){e.$on("$locationChangeStart",r.checkAuthentication)}angular.module("app",["ngRoute"]).controller("AppController",e),e.$inject=["$rootScope","$location","appService"]}(),function(){"use strict";function e(e){e.when("/login",{templateUrl:"modules/login/login.html",controller:"LoginController",controllerAs:"vm",adminOnly:!1}).when("/logout",{templateUrl:"modules/logout/logout.html",controller:"LogoutController",controllerAs:"vm",adminOnly:!1}).when("/register",{templateUrl:"pages/register/register.html",controller:"RegisterController",controllerAs:"vm",adminOnly:!1}).when("/dashboard",{templateUrl:"pages/dashboard/dashboard.html",controller:"DashboardController",controllerAs:"vm",adminOnly:!1}).otherwise({redirectTo:"/dashboard"})}angular.module("app").config(e),e.$inject=["$routeProvider"]}(),function(){"use strict";function e(e,t,r){function n(){function t(t){t.data.success===!1&&e.url("/login")}r.getVar("name").then(t)}return{checkAuthentication:n}}angular.module("app").factory("appService",e),e.$inject=["$location","$log","sessionService"]}(),function(){"use strict";function e(e,t){function r(e){this.base="api/"+e+"/"+e+"Manager.php"}function n(t){return e.get(this.base+"?id="+t).then(l)["catch"](c)}function o(t){return e.post(this.base,t).then(l)["catch"](c)}function i(t,r){return e.put(this.base+"?id="+t,r).then(l)["catch"](c)}function a(t){return e["delete"](this.base+"?id="+t).then(l)["catch"](c)}function l(e){return e}function c(e){return t.error(e),{success:"false",title:"Error when querying server.",message:e}}var u=r;return u.prototype={get:n,create:o,update:i,remove:a},u}angular.module("app").factory("crudService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(e,t){function r(t){return e.get(a.base+t).then(o)["catch"](i)}function n(t,r){return e.post(a.base+t,r).then(o)["catch"](i)}function o(e){return e}function i(e){return t.error(e),{success:"false",title:"Error when accessing variable.",message:e}}var a=this;return a.base="api/session/sessionVarManager.php?var=",{getVar:r,setVar:n}}angular.module("app").factory("sessionService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(){function e(e,t,r,n){function o(){l()}function i(t){return t===e.otherModel.$viewValue}function a(e,t){n.$validate()}var l=e.$watch("otherModel",a);n.$validators.spCompareTo=i,t.on("$destroy",o)}var t={require:"ngModel",scope:{otherModel:"=spCompareTo"},link:e};return t}angular.module("app").directive("spCompareTo",e)}(),function(){"use strict";function e(e){function t(){function t(e){r.loading=!1,r.error=e}r.loading=!0,e.login(r.user).then(t)}var r=this;r.loading=!1,r.error="",r.login=t}angular.module("app").controller("LoginController",e),e.$inject=["loginService"]}(),function(){"use strict";function e(e,t,r){function n(n){function o(e){return e.data.success===!1?e.data.title:void t.url("/dashboard")}function i(e){return r.error(e),"Something went wrong. Please try again."}return e.post("api/managers/loginManager.php",n).then(o)["catch"](i)}return{login:n}}angular.module("app").factory("loginService",e),e.$inject=["$http","$location","$log"]}(),function(){"use strict";function e(e){}angular.module("app").controller("TasksController",e),e.$inject=["tasksService"]}(),function(){"use strict";function e(){function e(e,t,r){}return{link:e,templateUrl:"modules/tasks/tasks.html",controller:"TasksController",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("spTasks",e)}(),function(){"use strict";function e(e,t){return{}}angular.module("app").factory("tasksService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(){}angular.module("app").controller("DashboardController",e)}(),function(){"use strict";function e(e){function t(){function t(e){r.loading=!1,r.error=e}r.loading=!0,e.register(r.user).then(t)}var r=this;r.loading=!1,r.error="",r.register=t}angular.module("app").controller("RegisterController",e),e.$inject=["registerService"]}(),function(){"use strict";function e(e,t,r){function n(r){function n(r){return"false"===r.success?(t.error(r.title),r.title):void e.url("/login")}return o.crud.create(r).then(n)}var o=this;return o.crud=new r("user"),{register:n}}angular.module("app").factory("registerService",e),e.$inject=["$location","$log","crudService"]}(),function(){"use strict";function e(e,t){function r(t){e.$evalAsync(function(){n.name=t.name===!1?"Login":t.name,n.url=t.url})}var n=this;n.name="",n.url="",t.getUser().then(r)}angular.module("app").controller("HeaderController",e),e.$inject=["$scope","headerService"]}(),function(){"use strict";function e(){function e(e,t,r){}return{link:e,templateUrl:"pages/layout/header/header.html",controller:"HeaderController",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("spHeader",e)}(),function(){"use strict";function e(e,t,r){function n(){function e(e){var t=e.data;return t.success===!1?{name:!1,url:"#/login"}:{name:t.data,url:"#/dashboard"}}return r.getVar("name").then(e)}return{getUser:n}}angular.module("app").factory("headerService",e),e.$inject=["$http","$log","sessionService"]}(),function(){"use strict";function e(){var e=this;e.collapsed=!0,e.toggleSidebar=function(){e.collapsed=!e.collapsed}}angular.module("app").controller("SidebarController",e)}(),function(){"use strict";function e(){function e(e,t,r){function n(e){e?t.removeClass("collapsed"):t.addClass("collapsed")}e.$watch(r.sidebarDirective,n)}return{link:e,templateUrl:"pages/layout/sidebar/sidebar.html",controller:"SidebarController",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("spSidebar",e)}();
//# sourceMappingURL=data:application/json;base64,
