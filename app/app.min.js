!function(){"use strict";function r(){}angular.module("app",["ngRoute"]).controller("AppController",r)}(),function(){"use strict";function r(r){r.when("/login",{templateUrl:"login/login.html",controller:"LoginController",controllerAs:"vm"}).when("/logout",{templateUrl:"logout/logout.html",controller:"LogoutController",controllerAs:"vm"}).when("/register",{templateUrl:"register/register.html",controller:"RegisterController",controllerAs:"vm"}).when("/dashboard",{templateUrl:"dashboard/dashboard.html",controller:"DashboardController",controllerAs:"vm"}).otherwise({redirectTo:"/dashboard"})}angular.module("app").config(r),r.$inject=["$routeProvider"]}(),function(){"use strict";function r(){}angular.module("app").controller("DashboardController",r)}(),function(){"use strict";function r(){function r(r,o,e,t){function n(){a()}function l(o){return o===r.otherModel.$viewValue}function i(r,o){t.$validate()}var a=r.$watch("otherModel",i);t.$validators.spCompareTo=l,o.on("$destroy",n)}var o={require:"ngModel",scope:{otherModel:"=spCompareTo"},link:r};return o}angular.module("app").directive("spCompareTo",r)}(),function(){"use strict";function r(){}angular.module("app").controller("LoginController",r)}(),function(){"use strict";function r(r){function o(){r.registerUser(e.user)}var e=this;e.registerUser=o}angular.module("app").controller("RegisterController",r),r.$inject=["registerService"]}(),function(){"use strict";function r(r,o,e){function t(o){function t(r){return console.log(r.data),r.data}function n(r){e.error(r)}return r.post("api/createUser.php",o).then(t)["catch"](n)}return{registerUser:t}}angular.module("app").factory("registerService",r),r.$inject=["$http","$location","$log"]}(),function(){"use strict";function r(){var r=this;r.collapsed=!0,r.toggleSidebar=function(){r.collapsed=!r.collapsed}}angular.module("app").controller("SidebarController",r)}(),function(){"use strict";function r(){function r(r,o,e){function t(r){r?o.removeClass("collapsed"):o.addClass("collapsed")}r.$watch(e.sidebarDirective,t)}return{link:r,templateUrl:"sidebar/sidebar.html",controller:"SidebarController",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("spSidebar",r)}();
//# sourceMappingURL=data:application/json;base64,
