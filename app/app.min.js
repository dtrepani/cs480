!function(){"use strict";function e(e,t){e.$on("$routeChangeError",t.routeChangeError)}angular.module("app",["ngRoute"]).controller("AppController",e),e.$inject=["$rootScope","appService"]}(),function(){"use strict";function e(e){function t(e){return e.isAuthenticated()}function r(e){return e.isAdmin()}e.when("/login",{templateUrl:"modules/login/login.html",controller:"LoginController",controllerAs:"vm"}).when("/logout",{templateUrl:"modules/logout/logout.html",controller:"LogoutController",controllerAs:"vm"}).when("/register",{templateUrl:"pages/register/register.html",controller:"RegisterController",controllerAs:"vm"}).when("/dashboard",{templateUrl:"pages/dashboard/dashboard.html",controller:"DashboardController",controllerAs:"vm",resolve:{isAuthenticated:["accessService",t]}}).when("/admin",{templateUrl:"pages/admin/admin.html",controller:"AdminController",controllerAs:"vm",resolve:{isAdmin:["accessService",r]}}).otherwise({redirectTo:"/login"})}angular.module("app").config(e),e.$inject=["$routeProvider"]}(),function(){"use strict";function e(e,t){function r(r,n,o,a){a===t.UNAUTHORIZED?e.path("/login"):a===t.FORBIDDEN&&e.path("/forbidden")}return{routeChangeError:r}}angular.module("app").factory("appService",e),e.$inject=["$location","statusService"]}(),function(){"use strict";function e(e,t){function r(e){switch(this.base="api/",e){case"event":case"calendar":this.base+="activity/calendar/";break;case"label":case"task":this.base+="activity/task/";break;default:this.base+=e+"/"}this.base+=e+"Manager.php"}function n(t){return e.get(this.base+"?id="+t).then(u)["catch"](l)}function o(t,r){return e.get(this.base+"?where=true&id="+r,t).then(u)["catch"](l)}function a(t){return e.post(this.base,t).then(u)["catch"](l)}function i(t,r){return e.put(this.base+"?id="+t,r).then(u)["catch"](l)}function c(t){return e["delete"](this.base+"?id="+t).then(u)["catch"](l)}function s(t,r){return e["delete"](this.base+"?where=true&id="+r,t).then(u)["catch"](l)}function u(e){return e}function l(e){return t.error(e),{success:"false",title:"Error when querying server.",message:e}}var d=r;return d.prototype={get:n,getWhere:o,create:a,update:i,remove:c,removeWhere:s},d}angular.module("app").factory("crudService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(e,t){function r(t){return e.get(i.base+t).then(o)["catch"](a)}function n(t,r){return e.post(i.base+t,r).then(o)["catch"](a)}function o(e){return e}function a(e){return t.error(e),{success:"false",title:"Error when accessing variable.",message:e}}var i=this;return i.base="api/session/sessionVarManager.php?var=",{getVar:r,setVar:n}}angular.module("app").factory("sessionService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(){function e(e,t,r,n){function o(){c()}function a(t){return t===e.otherModel.$viewValue}function i(e,t){n.$validate()}var c=e.$watch("otherModel",i);n.$validators.spCompareTo=a,t.on("$destroy",o)}var t={require:"ngModel",scope:{otherModel:"=spCompareTo"},link:e};return t}angular.module("app").directive("spCompareTo",e)}(),function(){"use strict";function e(e){function t(){r.loading=!0,e.login(r.user).then(function(e){r.loading=!1,r.error=e})}var r=this;r.loading=!1,r.error="",r.login=t}angular.module("app").controller("LoginController",e),e.$inject=["loginService"]}(),function(){"use strict";function e(e,t,r){function n(n){function o(e){return e.data.success===!1?e.data.title:void t.path("/dashboard")}function a(e){return r.error(e),"Something went wrong. Please try again."}return e.post("api/user/loginManager.php",n).then(o)["catch"](a)}return{login:n}}angular.module("app").factory("loginService",e),e.$inject=["$http","$location","$log"]}(),function(){"use strict";function e(e){function t(){e.getTasks().then(function(e){r.tasks=e})}var r=this;r.tasks={},t()}angular.module("app").controller("TasksController",e),e.$inject=["tasksService"]}(),function(){"use strict";function e(){return{templateUrl:"modules/tasks/tasks.html",controller:"TasksController",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("spTasks",e)}(),function(){"use strict";function e(e,t,r,n){function o(){function e(e){var r=e.data;return r.success?a.task.getWhere("",r.data).then(t):r.title}function t(e){var t=e.data;return t.success?t.data:t.title}return n.getVar("id").then(e)}var a=this;return a.task=new r("task"),{getTasks:o}}angular.module("app").factory("tasksService",e),e.$inject=["$http","$log","crudService","sessionService"]}(),function(){"use strict";function e(){}angular.module("app").controller("DashboardController",e)}(),function(){"use strict";function e(e){function t(){r.loading=!0,e.register(r.user).then(function(e){r.loading=!1,r.error=e})}var r=this;r.error="",r.loading=!1,r.register=t}angular.module("app").controller("RegisterController",e),e.$inject=["registerService"]}(),function(){"use strict";function e(e,t,r){function n(r){function n(r){return"false"===r.success?(t.error(r.title),r.title):void e.url("/login")}return o.crud.create(r).then(n)}var o=this;return o.crud=new r("user"),{register:n}}angular.module("app").factory("registerService",e),e.$inject=["$location","$log","crudService"]}(),function(){"use strict";function e(e,t,r,n){function o(){function e(e){return e.data.success!==!1?i.resolve(n.OK):i.reject(n.UNAUTHORIZED),i.promise}return r.getVar("name").then(e)}function a(){}var i=t.defer();return{isAuthenticated:o,isAdmin:a}}angular.module("app").factory("accessService",e),e.$inject=["$location","$q","sessionService","statusService"]}(),function(){"use strict";function e(){return{OK:200,UNAUTHORIZED:401,FORBIDDEN:403}}angular.module("app").service("statusService",e)}(),function(){"use strict";function e(e,t){function r(t){e.$evalAsync(function(){n.name=t.name===!1?"Login":t.name,n.url=t.url})}var n=this;n.name="",n.url="",t.getUser().then(r)}angular.module("app").controller("HeaderController",e),e.$inject=["$scope","headerService"]}(),function(){"use strict";function e(){function e(e,t,r){}return{link:e,templateUrl:"pages/layout/header/header.html",controller:"HeaderController",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("spHeader",e)}(),function(){"use strict";function e(e,t,r){function n(){function e(e){var t=e.data;return t.success===!1?{name:!1,url:"#/login"}:{name:t.data,url:"#/dashboard"}}return r.getVar("name").then(e)}return{getUser:n}}angular.module("app").factory("headerService",e),e.$inject=["$http","$log","sessionService"]}(),function(){"use strict";function e(){var e=this;e.collapsed=!0,e.toggleSidebar=function(){e.collapsed=!e.collapsed}}angular.module("app").controller("SidebarController",e)}(),function(){"use strict";function e(){function e(e,t,r){function n(e){e?t.removeClass("collapsed"):t.addClass("collapsed")}e.$watch(r.sidebarDirective,n)}return{link:e,templateUrl:"pages/layout/sidebar/sidebar.html",controller:"SidebarController",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("spSidebar",e)}();
//# sourceMappingURL=data:application/json;base64,
