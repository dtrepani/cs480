!function(){"use strict";function e(e,t){e.$on("$stateChangeError",t.stateChangeError)}angular.module("app",["ui.router","ui.bootstrap","angularMoment"]).controller("AppController",e),e.$inject=["$rootScope","appService"]}(),function(){"use strict";function e(e,t){function r(e){return e.getCalendars()}function n(e){return e.getEvents()}function o(e){return e.getLabels()}function a(e){return e.getTasks()}function c(e){return e.getUser()}function s(e){return e.isAuthenticated()}e.state("root",{url:"",templateUrl:"index.html","abstract":!0,controller:"AppController",controllerAs:"app",resolve:{tasks:["tasksService",a],events:["eventsService",n],labels:["labelService",o],calendars:["calendarService",r]},views:{header:{templateUrl:"pages/layout/header/header.html",controller:"HeaderController",controllerAs:"hc",resolve:{user:["headerService",c]}},sidebar:{templateUrl:"pages/layout/sidebar/sidebar.html",controller:"SidebarController",controllerAs:"sc"}}}).state("login",{url:"/login",parent:"root",views:{"content@":{templateUrl:"modules/login/login.html",controller:"LoginController",controllerAs:"vm"}}}).state("logout",{url:"/logout",parent:"root",views:{"content@":{templateUrl:"modules/logout/logout.html",controller:"LogoutController",controllerAs:"vm"}}}).state("register",{url:"/register",parent:"root",views:{"content@":{templateUrl:"pages/register/register.html",controller:"RegisterController",controllerAs:"vm"}}}).state("dashboard",{url:"/dashboard",parent:"root",views:{"content@":{templateUrl:"pages/dashboard/dashboard.html",controller:"DashboardController",controllerAs:"vm",resolve:{isAuthenticated:["accessService",s],tasks:["tasksService",a],events:["eventsService",n],labels:["labelService",o],calendars:["calendarService",r]}}}}).state("inbox",{url:"/inbox",parent:"root",views:{"content@":{templateUrl:"pages/tasks/inbox.html",controller:"ActivityController",controllerAs:"vm",resolve:{isAuthenticated:["accessService",s],items:["tasksService",a],groups:["labelService",o]}}}}).state("today",{url:"/today",parent:"root",views:{"content@":{templateUrl:"pages/tasks/today.html",controller:"ActivityController",controllerAs:"vm",resolve:{isAuthenticated:["accessService",s],items:["tasksService",a],groups:["labelService",o]}}}}).state("week",{url:"/week",parent:"root",views:{"content@":{templateUrl:"pages/tasks/week.html",controller:"ActivityController",controllerAs:"vm",resolve:{isAuthenticated:["accessService",s],items:["tasksService",a],groups:["labelService",o]}}}}).state("calendar",{url:"/calendar",parent:"root",views:{"content@":{templateUrl:"pages/calendar/calendar.html",controller:"ActivityController",controllerAs:"vm",resolve:{isAuthenticated:["accessService",s],items:["eventsService",n],groups:["calendarService",r]}}}}),t.otherwise("/dashboard")}angular.module("app").config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function e(e,t){function r(r,n,o,a){a===t.UNAUTHORIZED?e.path("/login"):a===t.FORBIDDEN&&e.path("/forbidden")}return{stateChangeError:r}}angular.module("app").factory("appService",e),e.$inject=["$location","statusService"]}(),function(){"use strict";function e(e){return function(t,r){for(var n=[],o=0;o<t.length;o++){var a=r.isSame(e(t[o].dt_start),"day");a||(a=r.isSame(e(t[o].dt_end),"day")),a&&n.push(t[o])}return n}}angular.module("app").filter("sameDayAs",e),e.$inject=["moment"]}(),function(){"use strict";function e(e){return function(t,r){if(!r)return t;for(var n=[],o=0;o<t.length;o++){(!t[o].due||t[o].due&&e(t[o].due).isBefore(e().add(r,"days")))&&n.push(t[o])}return n}}angular.module("app").filter("withinDays",e),e.$inject=["moment"]}(),function(){"use strict";function e(e,t,r){var n=this;n.items=t,n.groups=r}angular.module("app").controller("ActivityController",e),e.$inject=["isAuthenticated","items","groups"]}(),function(){"use strict";function e(e,t){function r(e){switch(this.type=e,this.base="api/",e){case"event":case"calendar":this.base+="activity/calendar/";break;case"label":case"task":this.base+="activity/task/";break;default:this.base+=e+"/"}this.base+=e+"Manager.php"}function n(t){return e.get(this.base+"?id="+t).then(l)["catch"](u)}function o(t,r){return e.get(this.base+"?usewhere=true&where="+escape(t)+"&id="+r).then(l)["catch"](u)}function a(t){return t=this.removeUnecessaryKeys(t),e.post(this.base,t).then(l)["catch"](u)}function c(t,r){return r=this.removeUnecessaryKeys(r),e.put(this.base+"?id="+t,r).then(l)["catch"](u)}function s(t){return e["delete"](this.base+"?id="+t).then(l)["catch"](u)}function i(t,r){return e["delete"](this.base+"?where=true&id="+r,t).then(l)["catch"](u)}function l(e){return e}function u(e){return t.error(e),{success:"false",title:"Error when querying server.",message:e}}function d(e){for(var t=["id","person_id",this.type+"_id","activity_info_id","parent_name"],r=0;r<t.length;r++)delete e[t[r]];return e}var p=r;return p.prototype={get:n,getWhere:o,create:a,update:c,remove:s,removeWhere:i,removeUnecessaryKeys:d},p}angular.module("app").factory("crudService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(e,t){function r(t){return e.get(c.base+t).then(o)["catch"](a)}function n(t,r){return e.post(c.base+t,r).then(o)["catch"](a)}function o(e){return e}function a(e){return t.error(e),{success:"false",title:"Error when accessing variable.",message:e}}var c=this;return c.base="api/session/sessionVarManager.php?var=",{getVar:r,setVar:n}}angular.module("app").factory("sessionService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(e,t,r,n){function o(){u.today=t.getToday(),u.selectedDay=u.today,u.month=t.getMonth(u.today)}function a(e){return t.getEndOfDay(e)}function c(e){return t.isSameDay(e,u.selectedDay)}function s(e){u.selectedDay=e.fullDate}function i(e){n.openEventModal(e,u.calendars).then(l)}function l(e){e&&(u.events=e)}var u=this;u.isSameDayAsSelected=c,u.getEndOfDay=a,u.selectDay=s,u.showEventModal=i,o()}angular.module("app").controller("EventsController",e),e.$inject=["moment","calendarWidgetService","eventsService","eventModalService"]}(),function(){"use strict";function e(){return{templateUrl:"modules/events/events.html",controller:"EventsController",controllerAs:"vm",bindToController:!0,scope:{events:"=",calendars:"="}}}angular.module("app").directive("spEvents",e)}(),function(){"use strict";function e(e,t,r,n){function o(e){return u.event.create(e).then(l)}function a(e){return e.event_id?i(e.event_id,e):o(e)}function c(e){return u.event.remove(e).then(l)}function s(){function e(e){var t=e.data;return t.success?u.event.getWhere("",t.data).then(l):t.title}return n.getVar("id").then(e)}function i(e,t){return u.event.update(e,t).then(l)}function l(e){var t=e.data;return t.success?t.data:t.title}var u=this;return u.event=new r("event"),{createEvent:o,createOrUpdateEvent:a,deleteEvent:c,getEvents:s,updateEvent:i}}angular.module("app").factory("eventsService",e),e.$inject=["$http","$log","crudService","sessionService"]}(),function(){"use strict";function e(){function e(e,t,r,n){t[0].focus()}return{restrict:"A",link:e}}angular.module("app").directive("spAutoFocus",e)}(),function(){"use strict";function e(){function e(e,t,r,n){function o(){s()}function a(t){return t===e.otherModel.$viewValue}function c(e,t){n.$validate()}var s=e.$watch("otherModel",c);n.$validators.spCompareTo=a,t.on("$destroy",o)}return{require:"ngModel",scope:{otherModel:"=spCompareTo"},link:e}}angular.module("app").directive("spCompareTo",e)}(),function(){"use strict";function e(e){function t(){r.loading=!0,e.login(r.user).then(function(e){r.loading=!1,r.error=e})}var r=this;r.loading=!1,r.error="",r.login=t}angular.module("app").controller("LoginController",e),e.$inject=["loginService"]}(),function(){"use strict";function e(e,t,r){function n(n){function o(e){return e.data.success===!1?e.data.title:void t.path("/dashboard")}function a(e){return r.error(e),"Something went wrong. Please try again."}return e.post("api/user/loginManager.php",n).then(o)["catch"](a)}return{login:n}}angular.module("app").factory("loginService",e),e.$inject=["$http","$location","$log"]}(),function(){"use strict";function e(e,t,r){function n(){e.dismiss("cancel")}function o(){e.close()}function a(t){e.close(t)}function c(t){e.dismiss(t)}var s=this;s.groups=t,s.item=r,s.cancel=n,s.close=o,s.confirm=a,s.remove=c}angular.module("app").controller("ModalController",e),e.$inject=["$uibModalInstance","groups","item"]}(),function(){"use strict";function e(e,t){function r(e){t.openTaskModal(e,a.labels).then(o)}function n(t){e.toggleCompleted(t).then(o)}function o(e){e&&(a.tasks=e)}var a=this;a.showTaskModal=r,a.toggleCompleted=n}angular.module("app").controller("TasksController",e),e.$inject=["tasksService","taskModalService"]}(),function(){"use strict";function e(e){return{templateUrl:"modules/tasks/tasks.html",controller:"TasksController",controllerAs:"vm",bindToController:!0,scope:{tasks:"=",labels:"=",order:"=",days:"=withinDays"}}}angular.module("app").directive("spTasks",e),e.$inject=["$filter"]}(),function(){"use strict";function e(e,t,r,n){function o(e){return d.task.create(e).then(u)}function a(e){return e.task_id?l(e.task_id,e):o(e)}function c(e){return d.task.remove(e).then(u)}function s(){function e(e){var t=e.data;return t.success?d.task.getWhere("",t.data).then(u):t.title}return n.getVar("id").then(e)}function i(e){return e.completed=!parseInt(e.completed),l(e.task_id,e).then(s)}function l(e,t){return d.task.update(e,t).then(u)}function u(e){var t=e.data;return t.success?t.data:t.title}var d=this;return d.task=new r("task"),{createTask:o,createOrUpdateTask:a,deleteTask:c,getTasks:s,toggleCompleted:i,updateTask:l}}angular.module("app").factory("tasksService",e),e.$inject=["$http","$log","crudService","sessionService"]}(),function(){"use strict";function e(e){function t(){r.item.recurrence&&e.openRecurrenceModal(r.item)}var r=this;r.showRecurrenceModal=t}angular.module("app").controller("RecurrenceController",e),e.$inject=["recurrenceModalService"]}(),function(){"use strict";function e(){return{templateUrl:"modules/recurrence/recurrence.html",controller:"RecurrenceController",controllerAs:"rc",bindToController:!0,scope:{item:"="}}}angular.module("app").directive("spRepeat",e)}(),function(){"use strict";function e(){function e(e){e.recurrence=!1}function t(e){}return{clearRecurrence:e,constructRecurrence:t}}angular.module("app").factory("recurrenceService",e)}(),function(){"use strict";function e(e,t,r){function n(e,t){return r.uploadFile(e).then(function(e){return e})}var o=this;o.uploadFile=n}angular.module("app").controller("UploadController",e),e.$inject=["$scope","$http","uploadService"]}(),function(){"use strict";function e(e){function t(t,r,n){function o(e){t.$apply(function(){var e=r[0].files[0];e.size<=a?t.uc.uploadFile(e).then(function(e){t.spFileChange=e}):alert("File must be less than "+a/1024/1024+"MB.")})}var a=2097152;e(n.spFileChange);r[0].addEventListener("change",o,!1)}return{restrict:"A",controller:"UploadController",controllerAs:"uc",link:t,scope:{spFileChange:"="}}}angular.module("app").directive("spFileChange",e),e.$inject=["$parse"]}(),function(){"use strict";function e(e,t){function r(r){var n=new FormData;return n.append("file",r),e.post("api/upload/uploadManager.php",n,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).then(function(e){return e.data.success?e.data.data:(t.error(e.title),"")})["catch"](function(e){t.error(e)})}return{uploadFile:r}}angular.module("app").factory("uploadService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(e,t,r,n,o){var a=this;a.tasks=t,a.events=r,a.labels=n,a.calendars=o}angular.module("app").controller("DashboardController",e),e.$inject=["isAuthenticated","tasks","events","labels","calendars"]}(),function(){"use strict";function e(e){function t(){r.loading=!0,e.register(r.user).then(function(e){r.loading=!1,r.error=e})}var r=this;r.error="",r.loading=!1,r.register=t}angular.module("app").controller("RegisterController",e),e.$inject=["registerService"]}(),function(){"use strict";function e(e,t,r){function n(r){function n(r){return"false"===r.success?(t.error(r.title),r.title):void e.url("/login")}return o.crud.create(r).then(n)}var o=this;return o.crud=new r("user"),{register:n}}angular.module("app").factory("registerService",e),e.$inject=["$location","$log","crudService"]}(),function(){"use strict";function e(e,t,r,n){function o(){function e(e){return e.data.success!==!1?c.resolve(n.OK):c.reject(n.UNAUTHORIZED),c.promise}return r.getVar("name").then(e)}function a(){}var c=t.defer();return{isAuthenticated:o,isAdmin:a}}angular.module("app").factory("accessService",e),e.$inject=["$location","$q","sessionService","statusService"]}(),function(){"use strict";function e(){return{OK:200,UNAUTHORIZED:401,FORBIDDEN:403}}angular.module("app").service("statusService",e)}(),function(){"use strict";function e(e,t,r,n){function o(e){return l.calendar.create(e).then(i)}function a(e){return l.calendar.remove(e).then(i)}function c(){function e(e){var t=e.data;return t.success?l.calendar.getWhere("person_id="+t.data,"").then(i):t.title}return n.getVar("id").then(e)}function s(e,t){return l.calendar.update(e,t).then(i)}function i(e){var t=e.data;return t.success?t.data:t.title}var l=this;return l.calendar=new r("calendar"),{createCalendar:o,deleteCalendar:a,getCalendars:c,updateCalendar:s}}angular.module("app").factory("calendarService",e),e.$inject=["$http","$log","crudService","sessionService"]}(),function(){"use strict";function e(e,t,r){function n(t,n){return e.open({controller:"ModalController",controllerAs:"vm",templateUrl:"modules/events/modal/event.modal.html",resolve:{groups:function(){return n},item:t}}).result.then(function(e){return r.createOrUpdateEvent(e).then(r.getEvents)},function(e){return"string"!=typeof e?r.deleteEvent(e).then(r.getEvents):void 0})}return{openEventModal:n}}angular.module("app").factory("eventModalService",e),e.$inject=["$uibModal","calendarService","eventsService"]}(),function(){"use strict";function e(e){function t(e){return e.clone().add(1,"day").subtract(1,"ms")}function r(e){for(var t=[],r=e.clone().date(1).startOf("week"),n=e.month();n===e.month();n=r.month())t.push(o(r,e.month())),r=r.add(1,"weeks");return t}function n(){return e()}function o(t,r){for(var n=[],o=t.clone(),a=0;7>a;a++)n.push({number:o.date(),isTargetMonth:o.month()===r,isToday:o.isSame(e(),"day"),fullDate:o}),o=o.clone().add(1,"days");return n}function a(e,t){return e.isSame(t,"day")}return{getEndOfDay:t,getMonth:r,getToday:n,getWeek:o,isSameDay:a}}angular.module("app").factory("calendarWidgetService",e),e.$inject=["moment"]}(),function(){"use strict";function e(e,t,r,n){function o(e){return l.label.create(e).then(i)}function a(e){return l.label.remove(e).then(i)}function c(){function e(e){var t=e.data;return t.success?l.label.getWhere("person_id="+t.data,"").then(i):t.title}return n.getVar("id").then(e)}function s(e,t){return l.label.update(e,t).then(i)}function i(e){var t=e.data;return t.success?t.data:t.title}var l=this;return l.label=new r("label"),{createLabel:o,deleteLabel:a,getLabels:c,updateLabel:s}}angular.module("app").factory("labelService",e),e.$inject=["$http","$log","crudService","sessionService"]}(),function(){"use strict";function e(e,t,r){function n(t,n){e.open({controller:"ModalController",controllerAs:"vm",templateUrl:"modules/tasks/modal/subtask.modal.html",resolve:{groups:n,item:t}}).result.then(function(e){r.createOrUpdateSubtask(e.subtask,e.task)},function(e){"string"!=typeof e&&r.deleteSubtask(e.subtask,e.task)})}return{openSubtaskModal:n}}angular.module("app").factory("subtaskModalService",e),e.$inject=["$uibModal","labelService","subtasksService"]}(),function(){"use strict";function e(e,t,r){function n(t,n){return e.open({controller:"ModalController",controllerAs:"vm",templateUrl:"modules/tasks/modal/task.modal.html",resolve:{groups:function(){return n},item:t}}).result.then(function(e){return r.createOrUpdateTask(e).then(r.getTasks)},function(e){return"string"!=typeof e?r.deleteTask(e).then(r.getTasks):void 0})}return{openTaskModal:n}}angular.module("app").factory("taskModalService",e),e.$inject=["$uibModal","labelService","tasksService"]}(),function(){"use strict";function e(e,t){function r(e){t.openSubtaskModal(e,o.task)}function n(t){e.toggleCompleted(t)}var o=this;o.showSubtaskModal=r,o.toggleCompleted=n}angular.module("app").controller("SubtasksController",e),e.$inject=["subtasksService","subtaskModalService"]}(),function(){"use strict";function e(){return{templateUrl:"modules/tasks/subtasks/subtasks.html",controller:"SubtasksController",controllerAs:"st",bindToController:!0,scope:{task:"="}}}angular.module("app").directive("spSubtasks",e)}(),function(){"use strict";function e(e,t){function r(e,t){t.subtasks||(t.subtasks={currentId:1,list:[]}),void 0===e.id&&(e.id=t.subtasks.currentId++,e.completed=!1,t.subtasks.list.push(e))}function n(e,t){t.subtasks.list.splice(t.subtasks.list.indexOf(e),1)}function o(e){e.completed=!e.completed}return{createOrUpdateSubtask:r,deleteSubtask:n,toggleCompleted:o}}angular.module("app").factory("subtasksService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(e,t){function r(r){return e.open({controller:"ModalController",controllerAs:"vm",templateUrl:"modules/recurrence/modal/recurrence.modal.html",resolve:{groups:function(){return n},item:r}}).result.then(function(e){t.constructRecurrence(r)},function(e){t.clearRecurrence(r)})}var n={freq:["hourly","daily","weekly","monthly","yearly"],days:["mo","tu","we","th","fr","sa","su"]};return{openRecurrenceModal:r}}angular.module("app").factory("recurrenceModalService",e),e.$inject=["$uibModal","recurrenceService"]}(),function(){"use strict";function e(e){this.user=e}angular.module("app").controller("HeaderController",e),e.$inject=["user"]}(),function(){"use strict";function e(e,t,r){function n(){function e(e){var t=e.data;return t.success===!1?{name:!1,url:"#/login"}:{name:t.data,url:"#/dashboard"}}return r.getVar("name").then(e)}return{getUser:n}}angular.module("app").factory("headerService",e),e.$inject=["$http","$log","sessionService"]}(),function(){"use strict";function e(){this.collapsed=!0}angular.module("app").controller("SidebarController",e)}();
//# sourceMappingURL=data:application/json;base64,
