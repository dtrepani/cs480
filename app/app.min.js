!function(){"use strict";function e(e,t){e.$on("$routeChangeError",t.routeChangeError)}angular.module("app",["ngRoute","ui.bootstrap","angularMoment"]).controller("AppController",e),e.$inject=["$rootScope","appService"]}(),function(){"use strict";function e(e){function t(e){return e.getEvents()}function n(e){return e.getTasks()}function r(e){return e.isAuthenticated()}function a(e){return e.isAdmin()}e.when("/login",{templateUrl:"modules/login/login.html",controller:"LoginController",controllerAs:"vm"}).when("/logout",{templateUrl:"modules/logout/logout.html",controller:"LogoutController",controllerAs:"vm"}).when("/register",{templateUrl:"pages/register/register.html",controller:"RegisterController",controllerAs:"vm"}).when("/dashboard",{templateUrl:"pages/dashboard/dashboard.html",controller:"DashboardController",controllerAs:"vm",resolve:{isAuthenticated:["accessService",r],tasks:["tasksService",n],events:["eventsService",t]}}).when("/admin",{templateUrl:"pages/admin/admin.html",controller:"AdminController",controllerAs:"vm",resolve:{isAdmin:["accessService",a]}}).otherwise({redirectTo:"/login"})}angular.module("app").config(e),e.$inject=["$routeProvider"]}(),function(){"use strict";function e(e,t){function n(n,r,a,o){o===t.UNAUTHORIZED?e.path("/login"):o===t.FORBIDDEN&&e.path("/forbidden")}return{routeChangeError:n}}angular.module("app").factory("appService",e),e.$inject=["$location","statusService"]}(),function(){"use strict";function e(e,t){function n(e){switch(this.type=e,this.base="api/",e){case"event":case"calendar":this.base+="activity/calendar/";break;case"label":case"task":this.base+="activity/task/";break;default:this.base+=e+"/"}this.base+=e+"Manager.php"}function r(t){return e.get(this.base+"?id="+t).then(u)["catch"](l)}function a(t,n){return e.get(this.base+"?usewhere=true&where="+escape(t)+"&id="+n).then(u)["catch"](l)}function o(t){return t=this.removeUnecessaryKeys(t),e.post(this.base,t).then(u)["catch"](l)}function i(t,n){return n=this.removeUnecessaryKeys(n),e.put(this.base+"?id="+t,n).then(u)["catch"](l)}function c(t){return e["delete"](this.base+"?id="+t).then(u)["catch"](l)}function s(t,n){return e["delete"](this.base+"?where=true&id="+n,t).then(u)["catch"](l)}function u(e){return e}function l(e){return t.error(e),{success:"false",title:"Error when querying server.",message:e}}function d(e){for(var t=["id","person_id",this.type+"_id","activity_info_id","parent_name"],n=0;n<t.length;n++)delete e[t[n]];return e}var f=n;return f.prototype={get:r,getWhere:a,create:o,update:i,remove:c,removeWhere:s,removeUnecessaryKeys:d},f}angular.module("app").factory("crudService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(e,t){function n(t){return e.get(i.base+t).then(a)["catch"](o)}function r(t,n){return e.post(i.base+t,n).then(a)["catch"](o)}function a(e){return e}function o(e){return t.error(e),{success:"false",title:"Error when accessing variable.",message:e}}var i=this;return i.base="api/session/sessionVarManager.php?var=",{getVar:n,setVar:r}}angular.module("app").factory("sessionService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(e,t,n){function r(){s.today=e.getToday(),s.selectedDay=s.today,s.month=e.getMonth(s.today)}function a(t){return e.isSameDay(t.fullDate,s.selectedDay)}function o(e){s.selectedDay=e.fullDate}function i(e){n.openEventModal(e).then(c)}function c(e){e&&(s.events=e)}var s=this;s.isSameDayAsSelected=a,s.selectDay=o,s.showEventModal=i,r()}angular.module("app").controller("EventsController",e),e.$inject=["calendarWidgetService","eventsService","eventModalService"]}(),function(){"use strict";function e(){return{templateUrl:"modules/events/events.html",controller:"EventsController",controllerAs:"vm",bindToController:!0,scope:{events:"=",order:"="}}}angular.module("app").directive("spEvents",e)}(),function(){"use strict";function e(e,t,n,r){function a(e){return l.event.create(e).then(u)}function o(e){return e.event_id?s(e.event_id,e):a(e)}function i(e){return l.event.remove(e).then(u)}function c(){function e(e){var t=e.data;return t.success?l.event.getWhere("",t.data).then(u):t.title}return r.getVar("id").then(e)}function s(e,t){return l.event.update(e,t).then(u)}function u(e){var t=e.data;return t.success?t.data:t.title}var l=this;return l.event=new n("event"),{createEvent:a,createOrUpdateEvent:o,deleteEvent:i,getEvents:c,updateEvent:s}}angular.module("app").factory("eventsService",e),e.$inject=["$http","$log","crudService","sessionService"]}(),function(){"use strict";function e(){function e(e,t,n,r){function a(){c()}function o(t){return t===e.otherModel.$viewValue}function i(e,t){r.$validate()}var c=e.$watch("otherModel",i);r.$validators.spCompareTo=o,t.on("$destroy",a)}var t={require:"ngModel",scope:{otherModel:"=spCompareTo"},link:e};return t}angular.module("app").directive("spCompareTo",e)}(),function(){"use strict";function e(e){function t(){n.loading=!0,e.login(n.user).then(function(e){n.loading=!1,n.error=e})}var n=this;n.loading=!1,n.error="",n.login=t}angular.module("app").controller("LoginController",e),e.$inject=["loginService"]}(),function(){"use strict";function e(e,t,n){function r(r){function a(e){return e.data.success===!1?e.data.title:void t.path("/dashboard")}function o(e){return n.error(e),"Something went wrong. Please try again."}return e.post("api/user/loginManager.php",r).then(a)["catch"](o)}return{login:r}}angular.module("app").factory("loginService",e),e.$inject=["$http","$location","$log"]}(),function(){"use strict";function e(e,t,n){function r(){e.close()}function a(){e.dismiss("cancel")}function o(t){e.dismiss(t)}function i(t){e.close(t)}var c=this;c.groups=t,c.item=n,c.close=r,c.cancel=a,c.confirm=i,c.remove=o}angular.module("app").controller("ModalController",e),e.$inject=["$uibModalInstance","groups","item"]}(),function(){"use strict";function e(e,t){function n(e){t.openTaskModal(e).then(a)}function r(t){e.toggleCompleted(t).then(a)}function a(e){e&&(o.tasks=e)}var o=this;o.showTaskModal=n,o.toggleCompleted=r}angular.module("app").controller("TasksController",e),e.$inject=["tasksService","taskModalService"]}(),function(){"use strict";function e(){return{templateUrl:"modules/tasks/tasks.html",controller:"TasksController",controllerAs:"vm",bindToController:!0,scope:{tasks:"=",order:"="}}}angular.module("app").directive("spTasks",e)}(),function(){"use strict";function e(e,t,n,r){function a(e){return d.task.create(e).then(l)}function o(e){return e.task_id?u(e.task_id,e):a(e)}function i(e){return d.task.remove(e).then(l)}function c(){function e(e){var t=e.data;return t.success?d.task.getWhere("",t.data).then(l):t.title}return r.getVar("id").then(e)}function s(e){return e.completed=!parseInt(e.completed),u(e.task_id,e).then(c)}function u(e,t){return d.task.update(e,t).then(l)}function l(e){var t=e.data;return t.success?t.data:t.title}var d=this;return d.task=new n("task"),{createTask:a,createOrUpdateTask:o,deleteTask:i,getTasks:c,toggleCompleted:s,updateTask:u}}angular.module("app").factory("tasksService",e),e.$inject=["$http","$log","crudService","sessionService"]}(),function(){"use strict";function e(e,t,n){var r=this;r.tasks=t,r.events=n}angular.module("app").controller("DashboardController",e),e.$inject=["isAuthenticated","tasks","events"]}(),function(){"use strict";function e(e){function t(){n.loading=!0,e.register(n.user).then(function(e){n.loading=!1,n.error=e})}var n=this;n.error="",n.loading=!1,n.register=t}angular.module("app").controller("RegisterController",e),e.$inject=["registerService"]}(),function(){"use strict";function e(e,t,n){function r(n){function r(n){return"false"===n.success?(t.error(n.title),n.title):void e.url("/login")}return a.crud.create(n).then(r)}var a=this;return a.crud=new n("user"),{register:r}}angular.module("app").factory("registerService",e),e.$inject=["$location","$log","crudService"]}(),function(){"use strict";function e(e,t,n,r){function a(){function e(e){return e.data.success!==!1?i.resolve(r.OK):i.reject(r.UNAUTHORIZED),i.promise}return n.getVar("name").then(e)}function o(){}var i=t.defer();return{isAuthenticated:a,isAdmin:o}}angular.module("app").factory("accessService",e),e.$inject=["$location","$q","sessionService","statusService"]}(),function(){"use strict";function e(){return{OK:200,UNAUTHORIZED:401,FORBIDDEN:403}}angular.module("app").service("statusService",e)}(),function(){"use strict";function e(e,t,n,r){function a(e){return u.calendar.create(e).then(s)}function o(e){return u.calendar.remove(e).then(s)}function i(){function e(e){var t=e.data;return t.success?u.calendar.getWhere("person_id="+t.data,"").then(s):t.title}return r.getVar("id").then(e)}function c(e,t){return u.calendar.update(e,t).then(s)}function s(e){var t=e.data;return t.success?t.data:t.title}var u=this;return u.calendar=new n("calendar"),{createCalendar:a,deleteCalendar:o,getCalendars:i,updateCalendar:c}}angular.module("app").factory("calendarService",e),e.$inject=["$http","$log","crudService","sessionService"]}(),function(){"use strict";function e(e,t,n){function r(r){return angular.isString(r.due)&&(r.due=new Date(r.due.replace(/(.+) (.+)/,"$1T$2Z"))),angular.isString(r.reminder)&&(r.reminder=new Date(r.reminder.replace(/(.+) (.+)/,"$1T$2Z"))),e.open({controller:"ModalController",controllerAs:"vm",templateUrl:"modules/events/modal/event.modal.html",resolve:{groups:t.getCalendars(),item:r}}).result.then(function(e){return n.createOrUpdateEvent(e).then(n.getEvents)},function(e){return"string"!=typeof e?n.deleteEvent(e).then(n.getEvents):void 0})}return{openEventModal:r}}angular.module("app").factory("eventModalService",e),e.$inject=["$uibModal","calendarService","eventsService"]}(),function(){"use strict";function e(e){function t(e){for(var t=[],n=e.clone().date(1).startOf("week"),a=e.month();a===e.month();a=n.month())t.push(r(n,e.month())),n=n.add(1,"weeks");return t}function n(){return e()}function r(t,n){for(var r=[],a=t.clone(),o=0;7>o;o++)r.push({number:a.date(),isTargetMonth:a.month()===n,isToday:a.isSame(e(),"day"),fullDate:a}),a=a.clone().add(1,"days");return r}function a(e,t){return e.isSame(t,"day")}return{getMonth:t,getWeek:r,getToday:n,isSameDay:a}}angular.module("app").factory("calendarWidgetService",e),e.$inject=["moment"]}(),function(){"use strict";function e(e,t,n,r){function a(e){return u.label.create(e).then(s)}function o(e){return u.label.remove(e).then(s)}function i(){function e(e){var t=e.data;return t.success?u.label.getWhere("person_id="+t.data,"").then(s):t.title}return r.getVar("id").then(e)}function c(e,t){return u.label.update(e,t).then(s)}function s(e){var t=e.data;return t.success?t.data:t.title}var u=this;return u.label=new n("label"),{createLabel:a,deleteLabel:o,getLabels:i,updateLabel:c}}angular.module("app").factory("labelService",e),e.$inject=["$http","$log","crudService","sessionService"]}(),function(){"use strict";function e(e,t,n){function r(r){return angular.isString(r.due)&&(r.due=new Date(r.due.replace(/(.+) (.+)/,"$1T$2Z"))),angular.isString(r.reminder)&&(r.reminder=new Date(r.reminder.replace(/(.+) (.+)/,"$1T$2Z"))),e.open({controller:"ModalController",controllerAs:"vm",templateUrl:"modules/tasks/modal/task.modal.html",resolve:{groups:t.getLabels(),item:r}}).result.then(function(e){return n.createOrUpdateTask(e).then(n.getTasks)},function(e){return"string"!=typeof e?n.deleteTask(e).then(n.getTasks):void 0})}return{openTaskModal:r}}angular.module("app").factory("taskModalService",e),e.$inject=["$uibModal","labelService","tasksService"]}(),function(){"use strict";function e(e,t){function n(t){e.$evalAsync(function(){r.name=t.name===!1?"Login":t.name,r.url=t.url})}var r=this;r.name="",r.url="",t.getUser().then(n)}angular.module("app").controller("HeaderController",e),e.$inject=["$scope","headerService"]}(),function(){"use strict";function e(){function e(e,t,n){}return{link:e,templateUrl:"pages/layout/header/header.html",controller:"HeaderController",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("spHeader",e)}(),function(){"use strict";function e(e,t,n){function r(){function e(e){var t=e.data;return t.success===!1?{name:!1,url:"#/login"}:{name:t.data,url:"#/dashboard"}}return n.getVar("name").then(e)}return{getUser:r}}angular.module("app").factory("headerService",e),e.$inject=["$http","$log","sessionService"]}(),function(){"use strict";function e(){var e=this;e.collapsed=!0,e.toggleSidebar=function(){e.collapsed=!e.collapsed}}angular.module("app").controller("SidebarController",e)}(),function(){"use strict";function e(){function e(e,t,n){function r(e){e?t.removeClass("collapsed"):t.addClass("collapsed")}e.$watch(n.sidebarDirective,r)}return{link:e,templateUrl:"pages/layout/sidebar/sidebar.html",controller:"SidebarController",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("spSidebar",e)}();
//# sourceMappingURL=data:application/json;base64,
