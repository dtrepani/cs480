!function(){"use strict";function e(e,t){e.$on("$stateChangeError",t.stateChangeError)}angular.module("app",["ui.router","ui.bootstrap","angularMoment"]).controller("AppController",e),e.$inject=["$rootScope","appService"]}(),function(){"use strict";function e(e,t){function n(e){return e.cacheAll()}function r(e){return e.getCalendars()}function a(e){return e.getEvents()}function o(e){return e.getLabels()}function c(e){return e.getTasks()}function u(e){return e.getUser()}function s(e){return e.isAuthenticated()}e.state("root",{url:"",templateUrl:"index.html","abstract":!0,resolve:{cache:["cacheService",n],user:["headerService",u]},views:{header:{templateUrl:"pages/layout/header/header.html",controller:"HeaderController",controllerAs:"hc"},sidebar:{templateUrl:"pages/layout/sidebar/sidebar.html",controller:"SidebarController",controllerAs:"sc"}}}).state("login",{url:"/login",parent:"root",views:{"content@":{templateUrl:"modules/login/login.html",controller:"LoginController",controllerAs:"vm"}}}).state("logout",{url:"/logout",parent:"root",views:{"content@":{templateUrl:"modules/logout/logout.html",controller:"LogoutController",controllerAs:"vm"}}}).state("register",{url:"/register",parent:"root",views:{"content@":{templateUrl:"pages/register/register.html",controller:"RegisterController",controllerAs:"vm"}}}).state("dashboard",{url:"/dashboard",parent:"root",views:{"content@":{templateUrl:"pages/dashboard/dashboard.html",controller:"DashboardController",controllerAs:"vm",resolve:{isAuthenticated:["accessService",s]}}}}).state("labels",{url:"/labels",parent:"root"}).state("labels.label",{url:"/:labelId",views:{"content@":{template:"In progress"}}}).state("inbox",{url:"/inbox",parent:"root",views:{"content@":{templateUrl:"pages/tasks/inbox.html",controller:"ActivityController",controllerAs:"vm",resolve:{isAuthenticated:["accessService",s],items:["tasksService",c],groups:["labelService",o]}}}}).state("today",{url:"/today",parent:"root",views:{"content@":{templateUrl:"pages/tasks/today.html",controller:"ActivityController",controllerAs:"vm",resolve:{isAuthenticated:["accessService",s],items:["tasksService",c],groups:["labelService",o]}}}}).state("week",{url:"/week",parent:"root",views:{"content@":{templateUrl:"pages/tasks/week.html",controller:"ActivityController",controllerAs:"vm",resolve:{isAuthenticated:["accessService",s],items:["tasksService",c],groups:["labelService",o]}}}}).state("calendar",{url:"/calendar",parent:"root",views:{"content@":{templateUrl:"pages/calendar/calendar.html",controller:"ActivityController",controllerAs:"vm",resolve:{isAuthenticated:["accessService",s],items:["eventsService",a],groups:["calendarService",r]}}}}),t.otherwise("/dashboard")}angular.module("app").config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function e(e,t){function n(n,r,a,o){o===t.UNAUTHORIZED?e.path("/login"):o===t.FORBIDDEN&&e.path("/forbidden")}return{stateChangeError:n}}angular.module("app").factory("appService",e),e.$inject=["$location","statusService"]}(),function(){"use strict";function e(){return function(e,t){if(!t)return e;for(var n=[],r=0;r<e.length;r++)(e[r].label_id===t||e[r].calendar_id===t)&&n.push(e[r]);return n}}angular.module("app").filter("inGroups",e),e.$inject=[]}(),function(){"use strict";function e(e){return function(t,n){for(var r=[],a=0;a<t.length;a++){var o=n.isSame(e(t[a].dt_start),"day");o||(o=n.isSame(e(t[a].dt_end),"day")),o&&r.push(t[a])}return r}}angular.module("app").filter("sameDayAs",e),e.$inject=["moment"]}(),function(){"use strict";function e(e){return function(t,n){if(!n)return t;for(var r=[],a=0;a<t.length;a++){(!t[a].due||t[a].due&&e(t[a].due).isBefore(e().add(n,"days")))&&r.push(t[a])}return r}}angular.module("app").filter("withinDays",e),e.$inject=["moment"]}(),function(){"use strict";function e(e){}angular.module("app").controller("ActivityController",e),e.$inject=["isAuthenticated"]}(),function(){"use strict";function e(e,t){function n(){e.all([r(),a(),o(),c()]).then(function(e){s()})}function r(){p.calendar=new t("calendar"),p.calendar.getByUser().then(function(e){p.calendars=u(e)})}function a(){p.event=new t("event"),p.event.getByUser().then(function(e){p.events=u(e)})}function o(){p.label=new t("label"),p.label.getByUser().then(function(e){p.labels=u(e)})}function c(){p.task=new t("task"),p.task.getByUser().then(function(e){p.tasks=u(e)})}function u(e){var t=e.data;return t.success?t.data:t.title}function s(){return{calendars:l(),events:i(),labels:d(),tasks:f()}}function l(){return p.calendars}function i(){return p.events}function d(){return p.labels}function f(){return p.tasks}var p=this;return p.calendars=[],p.events=[],p.labels=[],p.tasks=[],{cacheAll:n,cacheCalendars:r,cacheEvents:a,cacheLabels:o,cacheTasks:c,getAll:s,getCalendars:l,getEvents:i,getLabels:d,getTasks:f}}angular.module("app").service("cacheService",e),e.$inject=["$q","crudService"]}(),function(){"use strict";function e(e,t){function n(e){switch(this.type=e,this.base="api/",e){case"event":case"calendar":this.base+="activity/calendar/";break;case"label":case"task":this.base+="activity/task/";break;default:this.base+=e+"/"}this.base+=e+"Manager.php"}function r(t){return e.get(this.base+"?id="+t).then(l)["catch"](i)}function a(){return e.get(this.base+"?byuser=true").then(l)["catch"](i)}function o(t){return t=this.removeUnecessaryKeys(t),e.post(this.base,t).then(l)["catch"](i)}function c(t,n){return n=this.removeUnecessaryKeys(n),e.put(this.base+"?id="+t,n).then(l)["catch"](i)}function u(t){return e["delete"](this.base+"?id="+t).then(l)["catch"](i)}function s(t){return e["delete"](this.base+"?usewhere=true&where="+escape(t)).then(l)["catch"](i)}function l(e){return e}function i(e){return t.error(e),{success:"false",title:"Error when querying server.",message:e}}function d(e){for(var t=["id","person_id",this.type+"_id","activity_info_id","parent_name"],n=0;n<t.length;n++)delete e[t[n]];return e}var f=n;return f.prototype={get:r,getByUser:a,create:o,update:c,remove:u,removeWhere:s,removeUnecessaryKeys:d},f}angular.module("app").factory("crudService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(e,t){function n(t){return e.get(c.base+t).then(a)["catch"](o)}function r(t,n){return e.post(c.base+t,n).then(a)["catch"](o)}function a(e){return e}function o(e){return t.error(e),{success:"false",title:"Error when accessing variable.",message:e}}var c=this;return c.base="api/session/sessionVarManager.php?var=",{getVar:n,setVar:r}}angular.module("app").factory("sessionService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(e,t,n,r,a){function o(){f.today=t.getToday(),f.selectedDay=f.today,f.month=t.getMonth(f.today)}function c(e){return t.getEndOfDay(e)}function u(e){return t.isSameDay(e,f.selectedDay)}function s(e){f.selectedDay=e.fullDate}function l(e){a.openEventModal(e,f.calendars)}function i(){f.month=t.lastMonth(f.month)}function d(){f.month=t.nextMonth(f.month)}var f=this;f.events=function(){return r.getEvents()},f.calendar=function(){return n.getCalendars()},f.today=null,f.selectedDay=null,f.month=null,f.isSameDayAsSelected=u,f.getEndOfDay=c,f.selectDay=s,f.showEventModal=l,f.lastMonth=i,f.nextMonth=d,o()}angular.module("app").controller("EventsController",e),e.$inject=["moment","calendarWidgetService","calendarService","eventsService","eventModalService"]}(),function(){"use strict";function e(){return{templateUrl:"modules/events/events.html",controller:"EventsController",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("spEvents",e)}(),function(){"use strict";function e(e,t){function n(e){return s.event.create(e).then(u)}function r(e){return e.event_id?c(e.event_id,e):n(e)}function a(e){return s.event.remove(e).then(u)}function o(){return t.getEvents()}function c(e,t){return s.event.update(e,t).then(u)}function u(e){var n=e.data;return n.success?(t.cacheEvents(),n.data):n.title}var s=this;return s.event=new e("event"),{createEvent:n,createOrUpdateEvent:r,deleteEvent:a,getEvents:o,updateEvent:c}}angular.module("app").factory("eventsService",e),e.$inject=["crudService","cacheService"]}(),function(){"use strict";function e(){function e(e,t,n,r){t[0].focus()}return{restrict:"A",link:e}}angular.module("app").directive("spAutoFocus",e)}(),function(){"use strict";function e(){function e(e,t,n,r){function a(){u()}function o(t){return t===e.otherModel.$viewValue}function c(e,t){r.$validate()}var u=e.$watch("otherModel",c);r.$validators.spCompareTo=o,t.on("$destroy",a)}return{require:"ngModel",scope:{otherModel:"=spCompareTo"},link:e}}angular.module("app").directive("spCompareTo",e)}(),function(){"use strict";function e(e){function t(){n.loading=!0,e.login(n.user).then(function(e){n.loading=!1,n.error=e})}var n=this;n.loading=!1,n.error="",n.login=t}angular.module("app").controller("LoginController",e),e.$inject=["loginService"]}(),function(){"use strict";function e(e,t,n){function r(r){function a(e){return e.data.success===!1?e.data.title:void t.path("/dashboard")}function o(e){return n.error(e),"Something went wrong. Please try again."}return e.post("api/user/loginManager.php",r).then(a)["catch"](o)}return{login:r}}angular.module("app").factory("loginService",e),e.$inject=["$http","$location","$log"]}(),function(){"use strict";function e(e,t,n){function r(){e.dismiss("cancel")}function a(){e.close()}function o(t){e.close(t)}function c(t){e.dismiss(t)}var u=this;u.groups=t,u.item=n,u.cancel=r,u.close=a,u.confirm=o,u.remove=c}angular.module("app").controller("ModalController",e),e.$inject=["$uibModalInstance","groups","item"]}(),function(){"use strict";function e(e){function t(){n.item.recurrence&&e.openRecurrenceModal(n.item)}var n=this;n.showRecurrenceModal=t}angular.module("app").controller("RecurrenceController",e),e.$inject=["recurrenceModalService"]}(),function(){"use strict";function e(){return{templateUrl:"modules/recurrence/recurrence.html",controller:"RecurrenceController",controllerAs:"rc",bindToController:!0,scope:{item:"="}}}angular.module("app").directive("spRepeat",e)}(),function(){"use strict";function e(){function e(e){e.recurrence=!1}function t(e){}return{clearRecurrence:e,constructRecurrence:t}}angular.module("app").factory("recurrenceService",e)}(),function(){"use strict";function e(e,t,n){function r(e){n.openTaskModal(e,o.labels())}function a(t){e.toggleCompleted(t)}var o=this;o.tasks=function(){return e.getTasks()},o.labels=function(){return t.getLabels()},o.showTaskModal=r,o.toggleCompleted=a}angular.module("app").controller("TasksController",e),e.$inject=["tasksService","labelService","taskModalService"]}(),function(){"use strict";function e(){return{templateUrl:"modules/tasks/tasks.html",controller:"TasksController",controllerAs:"vm",bindToController:!0,scope:{order:"=",days:"=withinDays",inLabels:"=inGroups"}}}angular.module("app").directive("spTasks",e)}(),function(){"use strict";function e(e,t){function n(e){return l.task.create(e).then(s)}function r(e){return e.task_id?u(e.task_id,e):n(e)}function a(e){return l.task.remove(e).then(s)}function o(){return t.getTasks()}function c(e){return e.completed=!parseInt(e.completed),u(e.task_id,e).then(o)}function u(e,t){return l.task.update(e,t).then(s)}function s(e){var n=e.data;return n.success?(t.cacheTasks(),n.data):n.title}var l=this;return l.task=new e("task"),{createTask:n,createOrUpdateTask:r,deleteTask:a,getTasks:o,toggleCompleted:c,updateTask:u}}angular.module("app").factory("tasksService",e),e.$inject=["crudService","cacheService"]}(),function(){"use strict";function e(e,t,n){function r(e,t){return n.uploadFile(e).then(function(e){return e})}var a=this;a.uploadFile=r}angular.module("app").controller("UploadController",e),e.$inject=["$scope","$http","uploadService"]}(),function(){"use strict";function e(e){function t(t,n,r){function a(e){t.$apply(function(){var e=n[0].files[0];e.size<=o?t.uc.uploadFile(e).then(function(e){t.spFileChange=e}):alert("File must be less than "+o/1024/1024+"MB.")})}var o=2097152;e(r.spFileChange);n[0].addEventListener("change",a,!1)}return{restrict:"A",controller:"UploadController",controllerAs:"uc",link:t,scope:{spFileChange:"="}}}angular.module("app").directive("spFileChange",e),e.$inject=["$parse"]}(),function(){"use strict";function e(e,t){function n(n){var r=new FormData;return r.append("file",n),e.post("api/upload/uploadManager.php",r,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).then(function(e){return e.data.success?e.data.data:(t.error(e.title),"")})["catch"](function(e){t.error(e)})}return{uploadFile:n}}angular.module("app").factory("uploadService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(e){}angular.module("app").controller("DashboardController",e),e.$inject=["isAuthenticated"]}(),function(){"use strict";function e(e){function t(){n.loading=!0,e.register(n.user).then(function(e){n.loading=!1,n.error=e})}var n=this;n.error="",n.loading=!1,n.register=t}angular.module("app").controller("RegisterController",e),e.$inject=["registerService"]}(),function(){"use strict";function e(e,t,n){function r(n){function r(n){return"false"===n.success?(t.error(n.title),n.title):void e.url("/login")}return a.crud.create(n).then(r)}var a=this;return a.crud=new n("user"),{register:r}}angular.module("app").factory("registerService",e),e.$inject=["$location","$log","crudService"]}(),function(){"use strict";function e(e,t,n,r){function a(){function e(e){return e.data.success!==!1?c.resolve(r.OK):c.reject(r.UNAUTHORIZED),c.promise}return n.getVar("name").then(e)}function o(){}var c=t.defer();return{isAuthenticated:a,isAdmin:o}}angular.module("app").factory("accessService",e),e.$inject=["$location","$q","sessionService","statusService"]}(),function(){"use strict";function e(){return{OK:200,UNAUTHORIZED:401,FORBIDDEN:403}}angular.module("app").service("statusService",e)}(),function(){"use strict";function e(e,t){function n(e){return u.calendar.create(e).then(c)}function r(e){return u.calendar.remove(e).then(c)}function a(){return t.getCalendars()}function o(e,t){return u.calendar.update(e,t).then(c)}function c(e){var n=e.data;return n.success?(t.cacheCalendars(),n.data):n.title}var u=this;return u.calendar=new e("calendar"),{createCalendar:n,deleteCalendar:r,getCalendars:a,updateCalendar:o}}angular.module("app").factory("calendarService",e),e.$inject=["crudService","cacheService"]}(),function(){"use strict";function e(e,t,n){function r(t,r){return e.open({controller:"ModalController",controllerAs:"vm",templateUrl:"modules/events/modal/event.modal.html",resolve:{groups:function(){return r},item:t}}).result.then(function(e){return n.createOrUpdateEvent(e).then(n.getEvents)},function(e){return Number(e)?n.deleteEvent(e).then(n.getEvents):void 0})}return{openEventModal:r}}angular.module("app").factory("eventModalService",e),e.$inject=["$uibModal","calendarService","eventsService"]}(),function(){"use strict";function e(e){function t(e){return e.clone().add(1,"day").subtract(1,"ms")}function n(e){for(var t=[],n=e.clone().date(1).startOf("week"),r=0;6>r;r++)t.push(a(n,e.month())),n=n.add(1,"weeks");return t}function r(){return e()}function a(t,n){for(var r=[],a=t.clone(),o=0;7>o;o++)r.push({number:a.date(),isTargetMonth:a.month()===n,isToday:a.isSame(e(),"day"),fullDate:a}),a=a.clone().add(1,"days");return r}function o(e,t){return e.isSame(t,"day")}function c(e){return n(e[3][0].fullDate.clone().subtract(1,"months"))}function u(e){return n(e[3][0].fullDate.clone().add(1,"months"))}return{getEndOfDay:t,getMonth:n,getToday:r,getWeek:a,isSameDay:o,lastMonth:c,nextMonth:u}}angular.module("app").factory("calendarWidgetService",e),e.$inject=["moment"]}(),function(){"use strict";function e(e,t){function n(n){return e.open({controller:"ModalController",controllerAs:"vm",templateUrl:"modules/recurrence/modal/recurrence.modal.html",resolve:{groups:function(){return r},item:n}}).result.then(function(e){t.constructRecurrence(n)},function(e){t.clearRecurrence(n)})}var r={freq:["hourly","daily","weekly","monthly","yearly"],days:["mo","tu","we","th","fr","sa","su"]};return{openRecurrenceModal:n}}angular.module("app").factory("recurrenceModalService",e),e.$inject=["$uibModal","recurrenceService"]}(),function(){"use strict";function e(e,t){function n(e){return u.label.create(e).then(c)}function r(e){return u.label.remove(e).then(c)}function a(){return t.getLabels()}function o(e,t){return u.label.update(e,t).then(c)}function c(e){var n=e.data;return n.success?(t.cacheLabels(),n.data):n.title}var u=this;return u.label=new e("label"),{createLabel:n,deleteLabel:r,getLabels:a,updateLabel:o}}angular.module("app").factory("labelService",e),e.$inject=["crudService","cacheService"]}(),function(){"use strict";function e(e,t,n){function r(t,r){e.open({controller:"ModalController",controllerAs:"vm",templateUrl:"modules/tasks/modal/subtask.modal.html",resolve:{groups:r,item:t}}).result.then(function(e){n.createOrUpdateSubtask(e.subtask,e.task)},function(e){"string"!=typeof e&&n.deleteSubtask(e.subtask,e.task)})}return{openSubtaskModal:r}}angular.module("app").factory("subtaskModalService",e),e.$inject=["$uibModal","labelService","subtasksService"]}(),function(){"use strict";function e(e,t,n){function r(t,r){return e.open({controller:"ModalController",controllerAs:"vm",templateUrl:"modules/tasks/modal/task.modal.html",resolve:{groups:function(){return r},item:t}}).result.then(function(e){return n.createOrUpdateTask(e).then(n.getTasks)},function(e){return Number(e)?n.deleteTask(e).then(n.getTasks):void 0})}return{openTaskModal:r}}angular.module("app").factory("taskModalService",e),e.$inject=["$uibModal","labelService","tasksService"]}(),function(){"use strict";function e(e,t){function n(e){t.openSubtaskModal(e,a.task)}function r(t){e.toggleCompleted(t)}var a=this;a.showSubtaskModal=n,a.toggleCompleted=r}angular.module("app").controller("SubtasksController",e),e.$inject=["subtasksService","subtaskModalService"]}(),function(){"use strict";function e(){return{templateUrl:"modules/tasks/subtasks/subtasks.html",controller:"SubtasksController",controllerAs:"st",bindToController:!0,scope:{task:"="}}}angular.module("app").directive("spSubtasks",e)}(),function(){"use strict";function e(e,t){function n(e,t){t.subtasks||(t.subtasks={currentId:1,list:[]}),void 0===e.id&&(e.id=t.subtasks.currentId++,e.completed=!1,t.subtasks.list.push(e))}function r(e,t){t.subtasks.list.splice(t.subtasks.list.indexOf(e),1)}function a(e){e.completed=!e.completed}return{createOrUpdateSubtask:n,deleteSubtask:r,toggleCompleted:a}}angular.module("app").factory("subtasksService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(e){this.user=e}angular.module("app").controller("HeaderController",e),e.$inject=["user"]}(),function(){"use strict";function e(e,t,n){function r(){function e(e){var t=e.data;return t.success===!1?{name:!1,url:"#/login"}:{name:t.data,url:"#/dashboard"}}return n.getVar("name").then(e)}return{getUser:r}}angular.module("app").factory("headerService",e),e.$inject=["$http","$log","sessionService"]}(),function(){"use strict";function e(e,t){var n=this;n.collapsed=!0,n.labels=function(){return e.getLabels()},n.calendars=function(){return t.getCalendars()}}angular.module("app").controller("SidebarController",e),e.$inject=["labelService","calendarService"]}();
//# sourceMappingURL=data:application/json;base64,
