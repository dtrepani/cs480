// Cross-browser
// ----------------------------
@mixin property($property, $value) {
	-webkit-#{$property}: #{$value};
	-moz-#{$property}: #{$value};
	-ms-#{$property}: #{$value};
	-o-#{$property}: #{$value};
	#{$property}: #{$value};
}

@mixin transition($params) {
	@include property('transition', $params);
}

@mixin opacity($opacity) {
	@include property('opacity', $opacity);
	filter: alpha(opacity=$opacity * 100);
}

@mixin keyframes($animation-name) {
	-webkit-keyframes #{$animation-name} { @content; }
	-moz-keyframes #{$animation-name} { @content; }
	-ms-keyframes #{$animation-name} { @content; }
	-o-keyframes #{$animation-name} { @content; }
	keyframes #{$animation-name} { @content; }
}

// Other
// ----------------------------
@mixin rem($property, $params) {
	$length: length($params);
	$px-params: '';
	$rem-params: '';

	@for $i from 1 through $length {
		$number: strip-units(nth($params, $i));

		$px-params: #{$px-params + $number}px;
		$rem-params: #{$rem-params + ($number / strip-units($font-base))}rem;

		@if ($i < $length) {
			$px-params: #{$px-params + ' '};
			$rem-params: #{$rem-params + ' '};
		}
	}

	#{$property}: $px-params;
	#{$property}: $rem-params;
}

@mixin font-size($size-px) {
	@include rem('font-size', $size-px);
}

@mixin vertical-center() {
	@include property('transform', 'translateY(-50%)');
	position: relative;
	top: 50%;
}

@mixin breakpoint($breakpoint) {
	@if map-has-key($breakpoints, $breakpoint) {
		@media screen and (min-width: #{map-get($breakpoints, $breakpoint)}) {
			@content;
		}
	} @else {
		@warn "No such breakpoint '#{$breakpoint}' exists.";
	}
}

// Functions
// ----------------------------
@function strip-units($number) {
 	@return $number / ($number * 0 + 1);
}